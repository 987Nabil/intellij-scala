/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.jetbrains.plugins.scala.lang.lexer.core;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypesEx;
import org.jetbrains.plugins.scala.lang.scaladoc.parser.ScalaDocElementTypes;
import com.intellij.openapi.util.text.StringUtil;

import static com.intellij.openapi.util.text.StringUtil.endsWith;
import static org.jetbrains.plugins.scala.lang.lexer.ScalaTokenType.*;
import static org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_ScalaCoreLexer.flex</tt>
 */
public class _ScalaCoreLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMON_STATE = 2;
  public static final int WAIT_FOR_INTERPOLATED_STRING = 4;
  public static final int INSIDE_INTERPOLATED_STRING = 6;
  public static final int INSIDE_MULTI_LINE_INTERPOLATED_STRING = 8;
  public static final int INJ_COMMON_STATE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [13, 6, 2]
   * Total runtime size is 25936 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>8]<<6)|((ch>>2)&0x3f)]<<2)|(ch&0x3)];
  }

  /* The ZZ_CMAP_Z table has 4352 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\1\1\21\1\22\1\23\1\1\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\1\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\2\37\1\42\1\37\1\43\1\37\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\37\31\1\1\54\121\1\1\55\4\1\1\56\1\1\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\53\1\1\65\41\66\1\1\1\67\1\70\1\1\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\1\1\102\1\103\1\104\1\105\1\106\1\107\3\66\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\66\1\121\1\66\1\122\1\123\2\66"+
    "\3\1\1\124\1\125\1\126\12\66\4\1\1\127\17\66\2\1\1\130\41\66\2\1\1\131\1\132"+
    "\3\66\1\133\27\1\1\134\2\1\1\135\45\66\1\1\1\136\1\137\11\66\1\140\23\66\1"+
    "\141\1\142\1\143\1\144\1\145\1\146\1\147\1\150\2\37\1\151\5\66\1\152\7\66"+
    "\1\153\1\154\4\66\1\155\1\66\1\156\1\157\1\160\1\161\2\37\1\162\1\163\1\164"+
    "\1\165\6\66\246\1\1\166\20\1\1\167\1\170\25\1\1\171\34\1\1\172\14\66\2\1\1"+
    "\173\u0b05\66\1\174\1\175\u02fe\66");

  /* The ZZ_CMAP_Y table has 8064 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\2\0\1\1\1\2\3\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\0\1\34\6"+
    "\0\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\3\5\16\1\44\7\16\1\44\162\16\1\45"+
    "\1\35\2\16\1\45\3\3\1\16\1\46\1\3\1\47\4\3\34\0\1\16\1\50\1\35\1\51\1\3\1"+
    "\43\1\52\1\50\4\16\1\51\24\16\1\53\42\16\1\54\1\0\1\35\51\16\1\55\10\16\1"+
    "\52\1\42\1\3\1\55\11\16\1\3\1\56\1\57\12\0\1\60\1\61\1\60\2\3\6\16\1\52\1"+
    "\3\1\52\3\3\1\0\1\62\1\63\1\64\2\0\1\65\1\66\12\16\1\67\7\0\1\70\1\35\1\71"+
    "\30\16\1\72\1\0\1\73\1\0\1\74\1\75\1\76\2\0\1\76\1\77\3\3\1\100\1\101\7\16"+
    "\6\0\1\65\1\55\25\16\1\102\2\0\1\103\3\3\2\0\1\76\7\16\1\67\2\0\1\36\1\43"+
    "\1\3\5\16\1\102\1\104\2\0\2\105\1\70\4\3\6\16\1\105\1\3\2\16\1\52\15\3\5\16"+
    "\1\50\1\16\1\45\5\3\14\0\15\16\1\102\1\106\4\0\1\105\1\0\2\16\1\102\1\107"+
    "\2\0\1\55\3\16\1\105\1\55\1\16\2\110\5\16\1\50\1\16\1\47\1\35\1\45\1\106\1"+
    "\0\2\111\1\112\1\3\1\100\1\3\1\51\1\102\1\107\2\0\1\16\1\3\1\113\1\46\1\57"+
    "\1\55\1\52\1\114\1\110\5\16\1\50\1\16\1\50\1\115\1\45\1\116\1\65\1\100\1\111"+
    "\1\70\1\117\1\3\1\55\1\47\1\3\1\107\2\0\1\76\1\120\2\3\1\57\1\55\1\16\2\51"+
    "\5\16\1\50\1\16\1\50\1\55\1\45\1\106\1\0\2\60\1\70\1\46\3\3\1\102\1\107\2"+
    "\0\1\42\1\3\1\72\1\0\1\57\1\55\1\16\2\110\5\16\1\50\1\16\1\50\1\55\1\45\1"+
    "\106\1\0\2\111\1\70\1\3\1\107\1\3\1\51\1\102\1\107\2\0\1\121\3\3\1\122\1\55"+
    "\1\52\1\35\1\50\1\45\1\115\1\50\1\114\1\46\1\52\1\35\2\16\1\45\1\107\1\65"+
    "\1\107\1\116\1\70\1\46\1\100\3\3\1\107\2\0\1\123\1\124\1\125\1\3\1\0\1\55"+
    "\1\16\2\50\5\16\1\50\3\16\1\45\1\72\1\0\2\116\1\70\1\3\1\61\1\52\1\3\1\102"+
    "\1\107\2\0\3\3\1\123\1\105\1\55\1\16\2\50\5\16\1\50\2\16\1\55\1\45\1\106\1"+
    "\0\2\116\1\70\1\3\1\61\1\3\1\43\1\102\1\107\2\0\1\115\3\3\1\0\1\55\1\16\2"+
    "\50\11\16\1\67\1\106\1\0\2\116\1\126\1\3\1\67\1\3\1\114\1\102\1\107\2\0\2"+
    "\3\1\127\1\16\1\107\1\55\3\16\1\52\1\35\5\16\1\51\2\16\1\42\1\16\1\52\1\130"+
    "\1\100\1\0\1\131\2\0\1\3\1\107\2\0\1\107\3\3\1\55\13\16\1\101\1\0\1\65\1\114"+
    "\1\16\1\67\1\0\1\65\2\0\1\70\11\3\1\115\1\110\1\47\1\42\1\3\1\16\1\55\1\16"+
    "\1\55\1\132\1\35\1\55\1\101\1\0\1\60\1\103\1\16\1\47\1\0\1\70\2\0\1\70\1\16"+
    "\10\3\1\133\3\3\1\123\1\134\1\62\1\124\2\0\1\70\2\3\1\135\1\136\1\107\2\16"+
    "\1\55\10\16\1\46\1\57\4\0\1\116\1\16\1\105\2\0\1\57\10\0\1\137\1\124\1\140"+
    "\1\124\1\141\1\3\1\134\1\142\11\3\12\16\1\67\4\0\1\143\2\0\1\70\1\3\1\16\1"+
    "\102\1\76\1\102\1\106\1\74\1\0\1\76\1\105\1\71\2\16\1\102\2\0\1\104\3\0\1"+
    "\62\11\16\1\51\1\3\1\42\12\16\1\52\23\16\1\50\1\45\1\16\1\52\1\50\1\45\12"+
    "\16\1\50\1\45\10\16\1\50\1\45\1\16\1\52\1\50\1\45\3\16\1\52\16\16\1\50\1\45"+
    "\20\16\1\52\1\57\10\3\4\16\2\124\1\41\1\3\25\16\1\45\1\16\1\45\1\55\132\16"+
    "\1\110\4\16\1\55\5\16\1\52\1\3\22\16\1\52\1\35\2\16\1\46\1\3\3\16\1\50\1\102"+
    "\1\66\2\3\4\16\1\102\1\66\2\3\4\16\1\102\3\3\3\16\1\50\1\144\3\3\15\16\10"+
    "\0\2\114\1\120\2\0\1\70\7\3\1\100\1\65\2\0\1\70\1\3\26\16\2\3\1\16\1\145\10"+
    "\16\1\146\1\3\21\16\1\45\2\3\7\16\1\52\3\0\1\3\3\0\1\3\1\142\1\107\2\0\7\16"+
    "\1\45\1\16\1\46\2\3\13\16\1\3\6\16\1\45\1\3\2\0\1\70\1\64\10\124\5\16\1\67"+
    "\1\0\1\3\15\16\1\105\1\0\1\65\7\0\1\111\2\0\1\70\1\3\2\0\1\70\2\3\1\114\2"+
    "\3\3\0\1\70\20\3\1\0\1\71\13\16\4\0\1\71\1\16\1\3\2\0\1\70\1\3\1\134\1\124"+
    "\1\147\2\0\2\124\1\142\1\143\7\16\1\105\2\0\1\76\2\0\1\76\12\16\1\102\3\0"+
    "\3\3\11\16\5\0\2\3\2\0\1\70\1\55\2\0\1\76\10\16\1\45\2\16\1\46\21\3\1\65\5"+
    "\0\1\71\1\101\1\102\1\74\1\70\1\3\60\16\16\0\1\60\1\0\5\16\1\45\1\16\1\45"+
    "\11\16\1\45\1\16\1\45\2\16\2\132\7\16\1\45\15\16\1\50\1\16\1\47\1\35\1\50"+
    "\1\16\1\46\1\16\1\35\1\16\1\3\3\16\1\46\1\35\1\50\1\16\1\46\2\3\1\100\1\0"+
    "\6\3\1\150\1\65\3\3\1\114\1\46\1\142\2\3\1\151\1\46\2\3\1\0\1\116\2\0\1\42"+
    "\1\3\1\64\1\63\2\3\1\64\1\142\3\16\1\46\10\16\4\3\3\0\1\66\1\117\1\57\2\0"+
    "\1\66\3\3\1\152\1\153\1\154\2\16\1\155\1\156\1\157\1\124\1\160\1\161\1\53"+
    "\2\16\1\157\1\16\1\124\1\156\1\157\1\152\4\3\12\16\1\162\1\3\1\163\17\124"+
    "\1\164\115\124\1\3\7\124\1\165\64\124\1\166\11\124\1\166\6\3\2\124\1\166\24"+
    "\3\23\124\1\41\5\3\32\124\13\3\14\124\1\165\7\124\1\41\2\3\44\124\1\166\5"+
    "\3\1\134\17\124\1\3\10\124\1\64\35\124\1\64\7\124\1\41\10\124\1\41\1\134\2"+
    "\124\1\141\1\124\1\41\6\3\1\124\4\3\13\16\1\52\13\16\1\52\41\16\1\133\1\153"+
    "\1\67\1\76\3\3\11\16\1\51\1\3\1\42\16\16\1\3\1\114\3\3\1\100\5\16\1\52\2\3"+
    "\1\16\1\52\1\16\1\52\1\16\1\52\1\16\1\52\1\16\1\52\1\16\1\52\1\16\1\52\1\16"+
    "\1\52\10\0\13\3\1\114\24\3\6\124\1\167\26\124\3\3\65\124\1\41\6\3\3\124\2"+
    "\3\1\156\2\3\1\64\3\3\1\156\1\16\1\102\1\0\1\55\1\157\1\16\1\162\1\55\24\16"+
    "\1\52\1\61\2\55\25\16\1\52\1\16\1\3\1\55\11\16\1\52\1\55\26\16\1\52\1\41\1"+
    "\64\2\124\6\16\1\52\1\3\11\124\3\3\4\16\7\124\1\166\2\3\1\64\7\124\2\3\1\142"+
    "\3\3\10\124\2\3\1\64\11\124\1\142\3\3\17\124\1\166\55\16\1\45\2\3\20\124\72"+
    "\16\1\52\5\3\43\16\1\46\15\124\1\166\2\3\13\16\1\45\3\16\1\46\4\16\2\0\1\76"+
    "\5\3\13\16\1\67\1\3\2\0\1\170\7\16\1\102\24\16\1\70\10\3\1\114\2\16\1\35\31"+
    "\16\1\110\10\16\1\52\2\16\17\3\1\114\2\16\2\171\1\67\5\16\1\67\1\0\1\124\2"+
    "\3\1\64\1\172\1\3\15\16\3\3\1\76\14\16\4\0\1\70\2\3\2\0\1\70\1\3\4\0\1\76"+
    "\1\16\1\114\1\42\2\0\1\76\6\16\1\102\1\0\1\70\5\16\1\67\3\0\3\3\7\16\1\46"+
    "\1\0\13\16\1\67\3\0\1\66\2\3\1\114\2\0\1\70\1\3\1\16\1\101\2\16\2\0\1\76\1"+
    "\52\12\16\1\105\2\0\1\65\2\3\1\67\2\16\1\70\2\0\1\70\1\3\5\16\1\44\1\173\1"+
    "\76\14\16\1\106\1\74\1\71\1\102\1\146\5\3\1\114\1\45\2\16\1\67\1\0\1\35\1"+
    "\174\2\3\1\55\1\52\1\55\1\52\1\55\1\52\2\3\1\16\1\52\1\16\1\52\12\16\1\52"+
    "\2\16\1\45\2\3\34\16\1\67\1\0\1\65\1\70\2\0\1\70\1\3\51\16\3\3\5\16\1\52\1"+
    "\114\14\16\101\3\33\16\1\45\32\16\1\45\11\3\1\16\1\52\2\3\1\114\1\16\1\3\1"+
    "\175\2\16\1\161\2\16\1\52\1\16\1\47\1\51\1\50\32\16\1\45\7\3\1\114\32\16\1"+
    "\45\4\3\20\16\1\35\15\16\12\3\3\16\1\172\4\0\4\3\4\0\1\114\1\46\5\3\1\55\4"+
    "\3\1\151\1\166\1\42\1\3\1\16\1\50\41\16\1\176\1\3\1\46\1\123\1\3\2\0\1\70"+
    "\1\166\1\55\5\16\1\52\1\114\1\55\5\16\1\52\1\177\1\3\1\35\25\16\1\52\1\35"+
    "\1\16\1\35\1\16\1\35\1\16\1\35\1\46\1\36\1\200\1\124\1\166\2\3\1\57\1\41\3"+
    "\16\1\55\5\16\1\52\4\16\1\52\1\51\3\16\1\45\3\16\1\45\10\3\36\16\1\52\16\3"+
    "\1\123\2\124\15\16\1\46\1\134\3\124\1\41\1\166\3\124\1\3\1\142\13\3\13\124"+
    "\1\136\40\3\7\16\1\46\14\16\1\46\3\3\1\66\7\3\10\16\3\3\1\55\6\16\1\52\1\3"+
    "\11\16\1\102\1\65\1\3\7\16\1\45\11\16\1\3\2\16\1\55\1\45\12\3\47\16\1\45\2"+
    "\0\1\70\1\3\11\16\1\3\11\16\1\3\12\16\2\3\15\16\47\3\15\16\1\52\2\3\5\16\1"+
    "\45\2\3\2\16\46\3\1\16\1\45\1\50\12\16\1\51\1\46\1\110\5\16\1\45\2\3\5\16"+
    "\1\44\1\142\1\3\7\16\1\52\20\3\4\16\1\52\1\45\2\3\5\16\1\45\2\3\6\16\1\45"+
    "\21\3\16\16\1\3\1\35\20\3\1\105\1\61\1\3\1\0\1\16\2\55\6\16\1\3\1\65\1\100"+
    "\10\3\7\16\1\46\7\16\1\46\10\3\2\16\1\156\6\16\1\174\6\3\15\16\1\45\2\3\5"+
    "\16\1\45\2\3\4\16\1\52\3\3\4\16\1\45\33\3\22\16\1\46\15\3\14\16\1\52\3\3\14"+
    "\16\1\52\3\3\1\143\15\16\3\0\1\65\7\3\1\107\2\0\3\3\1\100\1\143\13\16\2\0"+
    "\1\65\1\117\4\3\6\16\1\46\1\3\2\0\1\70\1\3\1\143\10\16\1\67\3\0\1\116\2\0"+
    "\4\3\10\16\1\67\1\43\2\3\1\143\13\16\1\67\3\0\1\71\1\46\1\107\1\66\2\0\1\112"+
    "\1\46\10\3\4\16\1\51\6\16\3\0\1\3\1\130\20\3\1\16\1\52\1\50\1\51\3\16\1\51"+
    "\2\16\1\46\1\3\13\16\1\67\2\0\1\65\1\3\2\0\1\70\1\3\1\0\1\55\1\16\2\110\5"+
    "\16\1\50\1\16\1\50\1\55\1\45\1\106\1\0\2\111\1\70\1\46\1\100\1\3\1\55\1\102"+
    "\1\107\1\0\1\66\1\0\1\66\42\3\15\16\1\105\3\0\1\143\1\52\1\3\2\0\1\70\11\3"+
    "\14\16\5\0\1\51\2\3\2\0\1\70\51\3\13\16\1\67\1\0\1\70\2\0\1\66\5\3\1\16\1"+
    "\70\10\3\14\16\4\0\1\66\1\46\2\3\2\0\1\70\11\3\12\16\1\67\3\0\2\3\2\0\1\70"+
    "\15\3\6\16\1\45\1\57\3\0\1\3\2\0\1\70\1\123\130\3\20\16\2\0\1\70\4\3\1\114"+
    "\1\105\1\0\1\143\11\16\1\67\1\0\1\104\1\65\1\3\1\100\2\3\1\105\2\0\12\16\1"+
    "\35\1\102\3\0\1\70\11\3\16\16\1\46\1\3\2\16\1\50\10\16\1\67\1\0\1\65\2\0\1"+
    "\46\3\3\2\0\1\70\5\3\1\35\7\16\1\107\5\0\1\57\2\0\1\65\22\3\1\16\1\52\1\51"+
    "\11\16\1\105\1\65\1\130\1\60\1\0\1\104\2\3\2\0\1\70\51\3\46\16\1\45\31\3\33"+
    "\16\1\52\4\3\61\16\57\3\13\16\1\52\64\3\21\16\1\52\56\3\16\16\1\46\1\3\7\16"+
    "\1\52\2\0\1\70\31\3\7\16\1\45\1\0\1\66\2\3\14\16\1\0\1\65\1\3\1\124\1\16\1"+
    "\201\2\3\2\0\1\70\1\3\1\114\5\16\1\3\1\55\4\16\34\3\21\16\1\46\2\3\1\105\12"+
    "\0\1\65\3\3\1\100\1\143\3\16\20\3\1\45\7\3\73\16\1\46\4\3\74\16\1\52\3\3\7"+
    "\16\1\52\24\3\143\16\1\3\32\16\1\52\1\3\3\16\1\46\2\16\1\46\1\3\2\16\1\45"+
    "\1\202\1\0\27\3\75\124\1\41\2\3\11\124\1\166\1\134\16\124\1\203\1\62\1\203"+
    "\4\0\1\204\1\203\1\0\7\124\1\205\1\62\16\124\1\142\5\3\20\124\1\205\1\206"+
    "\56\3\25\124\1\166\52\3\25\16\1\50\21\16\1\50\1\43\1\115\1\55\1\50\2\16\1"+
    "\51\1\55\1\16\1\55\17\16\1\51\1\52\1\55\1\16\1\50\1\16\1\50\6\16\1\51\1\52"+
    "\1\16\1\47\1\35\1\16\1\50\124\16\1\45\6\16\1\161\5\16\1\44\7\16\1\44\6\16"+
    "\1\161\7\16\1\161\5\16\1\44\7\16\1\44\6\16\1\161\7\16\1\161\5\16\1\44\2\16"+
    "\1\107\31\0\1\204\1\147\14\0\1\207\1\124\1\210\3\124\1\211\4\3\1\100\1\0\1"+
    "\57\3\0\24\3\1\0\1\65\4\0\1\111\1\0\1\60\1\116\1\65\65\3\61\16\1\46\2\3\1"+
    "\0\1\65\12\3\21\16\1\0\1\65\1\3\2\0\1\70\51\3\1\16\1\55\6\16\1\115\1\110\1"+
    "\55\1\16\1\52\1\16\1\132\1\3\1\43\1\114\1\132\1\55\1\115\1\110\2\132\1\115"+
    "\1\110\1\52\1\16\1\52\1\16\1\55\1\47\2\16\1\51\4\16\1\3\2\55\1\51\4\16\15"+
    "\3\1\41\3\3\13\124\1\3\31\124\3\3\3\124\1\166\1\134\3\124\1\134\3\124\1\134"+
    "\10\124\1\41\6\3\7\124\1\166\17\124\1\3\17\124\1\142\15\3\1\64\6\124\1\166"+
    "\3\3\13\124\1\3\2\124\1\142\1\3\1\41\53\3\76\124\1\166\1\3\64\124\1\166\3"+
    "\3\3\124\1\142\1\124\1\166\2\3\35\124\3\3\25\124\1\142\12\3\3\124\1\3\16\124"+
    "\2\3\2\124\1\41\1\3\12\124\2\3\7\124\1\41\30\3\3\124\1\166\2\124\2\3\1\165"+
    "\2\124\1\166\3\124\1\3\3\124\1\166\10\3\4\124\1\41\13\3\1\142\17\3\65\16\1"+
    "\52\12\3\15\16\1\46\2\3\67\16\1\45\140\16\1\45\3\3\114\16\1\46\7\3\7\16\1"+
    "\45\70\3\1\117\7\3\30\0\40\3\74\0\4\3");

  /* The ZZ_CMAP_A table has 552 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\33\1\50\1\36\1\116\1\50\1\45\2\33\4\0\1\50\1\21\1\43\1\15\1\44\1\22\1\23"+
    "\1\41\1\60\1\61\1\24\1\25\1\115\1\14\1\12\1\26\1\2\3\37\4\6\2\3\1\16\1\114"+
    "\1\27\1\17\1\30\1\31\1\20\1\42\1\7\1\52\1\53\1\13\1\11\5\34\1\1\6\34\1\104"+
    "\1\54\3\34\1\4\2\34\1\51\1\32\1\56\1\23\1\5\1\35\1\62\1\63\1\67\1\10\1\70"+
    "\1\75\1\105\1\74\1\102\1\73\1\111\1\71\1\77\1\76\1\72\1\101\1\34\1\66\1\64"+
    "\1\65\1\40\1\106\1\110\1\100\1\103\1\107\1\55\1\23\1\57\1\23\2\33\1\46\2\33"+
    "\2\0\4\34\1\23\2\0\1\23\1\34\1\0\1\23\1\33\1\23\1\0\2\23\3\0\1\34\4\0\1\34"+
    "\1\0\3\34\1\23\2\34\2\0\1\34\3\0\1\34\1\0\1\34\1\0\1\34\1\0\4\34\1\0\4\34"+
    "\1\0\2\34\1\23\3\34\1\23\1\33\1\0\3\34\1\0\2\23\1\34\1\0\5\33\1\0\1\33\1\0"+
    "\2\33\1\0\2\33\3\23\2\0\1\34\2\0\2\23\3\33\1\0\1\33\3\0\3\34\3\33\2\0\1\33"+
    "\3\34\1\0\1\34\4\33\1\23\2\33\2\34\2\33\1\23\4\33\3\34\2\23\1\34\3\0\1\33"+
    "\1\34\1\33\4\34\3\33\1\34\2\0\2\33\1\34\1\33\1\34\4\33\1\34\2\33\2\0\2\33"+
    "\1\34\2\0\1\34\1\33\2\0\3\33\1\34\3\0\1\23\1\34\3\0\1\34\1\0\2\34\1\0\1\33"+
    "\1\0\2\33\1\0\1\33\2\0\1\34\1\33\2\0\1\23\1\34\4\0\1\33\1\34\3\0\6\23\1\34"+
    "\1\23\1\0\2\33\1\34\1\23\1\0\1\23\2\34\2\0\1\33\1\0\1\33\1\0\1\33\2\0\1\34"+
    "\1\0\2\34\3\23\1\0\4\23\1\33\1\23\1\33\1\23\1\33\2\0\1\33\1\0\4\23\1\33\2"+
    "\23\1\0\3\23\3\0\3\33\2\34\1\0\2\33\1\34\2\33\2\34\1\33\1\34\1\0\3\23\1\33"+
    "\2\47\2\33\2\0\1\23\1\0\2\23\1\34\4\23\1\34\2\23\2\34\1\23\1\34\3\23\5\34"+
    "\2\23\1\34\1\23\1\34\1\23\1\34\1\23\3\34\1\0\2\23\1\113\5\23\1\112\2\23\2"+
    "\0\4\23\1\0\2\23\1\0\1\23\2\33\1\0\3\34\1\33\2\34\1\23\2\0\2\23\1\34\1\33"+
    "\1\34\2\33\2\0\1\34\1\33\2\34\2\0\1\33\1\23\1\0\1\23\1\0\1\23\2\34\2\0\1\23"+
    "\2\0\1\23\2\33\1\0\1\23\6\33\3\23\3\33\1\23\2\0\1\33\4\23\1\33\2\23\1\33\2"+
    "\23\1\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\2\3\1\4\1\2\1\5\1\2"+
    "\1\6\1\7\1\10\1\11\4\2\1\1\1\12\1\1"+
    "\1\13\1\2\1\12\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\21\2\1\22\1\23\1\24\1\25\1\2\1\26"+
    "\1\27\1\13\1\30\1\31\2\13\1\32\3\13\2\33"+
    "\2\13\15\0\1\2\1\34\1\35\1\3\2\0\1\36"+
    "\1\37\1\36\1\0\1\2\1\40\1\36\2\2\1\22"+
    "\1\2\1\41\1\42\1\43\1\2\1\44\1\2\1\45"+
    "\1\2\2\0\1\2\1\0\2\46\1\0\1\46\1\0"+
    "\1\47\1\13\1\0\1\50\1\51\2\0\27\2\1\52"+
    "\6\2\1\26\2\0\2\53\2\54\2\0\1\55\1\56"+
    "\3\0\1\57\2\60\2\0\1\55\1\61\1\33\2\0"+
    "\1\33\13\0\1\2\1\34\2\0\1\36\1\3\3\62"+
    "\2\0\1\36\1\0\1\63\1\0\2\2\1\64\1\0"+
    "\3\2\1\0\1\65\1\2\1\66\3\46\3\0\1\67"+
    "\1\50\1\0\1\70\2\0\1\71\2\0\5\2\1\72"+
    "\20\2\1\73\2\2\1\74\10\2\1\75\1\76\2\2"+
    "\1\77\2\0\1\54\1\0\1\54\1\0\1\31\1\100"+
    "\1\60\1\0\1\60\1\33\5\0\1\34\1\0\1\62"+
    "\1\0\1\62\1\0\1\101\1\2\1\0\1\2\1\0"+
    "\2\2\1\102\1\42\10\0\3\2\1\103\2\2\1\104"+
    "\1\105\1\106\1\2\1\107\2\2\1\110\1\111\2\2"+
    "\1\112\5\2\1\113\12\2\1\114\2\0\1\54\1\115"+
    "\1\60\2\0\1\62\1\101\1\0\1\2\1\102\1\0"+
    "\1\116\5\0\1\2\1\117\1\2\1\120\1\121\1\2"+
    "\1\0\1\2\1\122\1\123\4\2\1\124\1\2\1\125"+
    "\1\126\1\127\5\2\1\130\1\131\1\132\5\0\1\2"+
    "\1\116\2\0\1\133\2\0\1\2\1\134\1\135\2\0"+
    "\3\2\1\136\1\137\7\2\1\140\1\27\1\0\1\2"+
    "\3\0\1\2\2\0\2\2\1\141\1\2\1\142\1\143"+
    "\1\144\1\2\1\145\1\2\1\0\1\101\3\0\1\146"+
    "\2\0\2\2\1\147\1\2\1\150\1\101\4\0\2\2"+
    "\1\151\1\152\1\0\1\152\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[470];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u0229"+
    "\0\u0278\0\u02c7\0\u0316\0\u0365\0\u03b4\0\u0403\0\u0365\0\u0452"+
    "\0\u04a1\0\u04f0\0\u053f\0\u058e\0\u05dd\0\u04f0\0\u062c\0\u067b"+
    "\0\u06ca\0\u0719\0\u0768\0\u07b7\0\u0806\0\u0855\0\u08a4\0\u0316"+
    "\0\u0316\0\u08f3\0\u0316\0\u0316\0\u0942\0\u0316\0\u0991\0\u09e0"+
    "\0\u0a2f\0\u0a7e\0\u0acd\0\u0b1c\0\u0b6b\0\u0bba\0\u0c09\0\u0c58"+
    "\0\u0ca7\0\u0cf6\0\u0d45\0\u0d94\0\u0de3\0\u0e32\0\u0e81\0\u04f0"+
    "\0\u04f0\0\u0316\0\u0316\0\u0ed0\0\u0f1f\0\u0f6e\0\u0fbd\0\u0316"+
    "\0\u0316\0\u100c\0\u105b\0\u10aa\0\u10f9\0\u1148\0\u0316\0\u1197"+
    "\0\u11e6\0\u11e6\0\u1235\0\u1284\0\u12d3\0\u1322\0\u1371\0\u13c0"+
    "\0\u140f\0\u145e\0\u14ad\0\u14fc\0\u154b\0\u159a\0\u15e9\0\u1638"+
    "\0\u1687\0\u16d6\0\u0316\0\u1725\0\u1774\0\u17c3\0\u0316\0\u0316"+
    "\0\u1812\0\u1861\0\u18b0\0\u0365\0\u18ff\0\u194e\0\u199d\0\u19ec"+
    "\0\u1a3b\0\u1a8a\0\u0316\0\u04f0\0\u1ad9\0\u04f0\0\u1b28\0\u04f0"+
    "\0\u1b77\0\u0768\0\u1bc6\0\u0316\0\u1c15\0\u1c64\0\u1cb3\0\u1cb3"+
    "\0\u1d02\0\u1d51\0\u1c15\0\u1da0\0\u1def\0\u1e3e\0\u0316\0\u1e8d"+
    "\0\u1edc\0\u1f2b\0\u1f7a\0\u1fc9\0\u2018\0\u2067\0\u20b6\0\u2105"+
    "\0\u2154\0\u21a3\0\u21f2\0\u2241\0\u2290\0\u22df\0\u232e\0\u237d"+
    "\0\u23cc\0\u241b\0\u246a\0\u24b9\0\u2508\0\u2557\0\u25a6\0\u25f5"+
    "\0\u0365\0\u2644\0\u2693\0\u26e2\0\u2731\0\u2780\0\u27cf\0\u281e"+
    "\0\u286d\0\u28bc\0\u0316\0\u290b\0\u295a\0\u29a9\0\u29a9\0\u29f8"+
    "\0\u295a\0\u0316\0\u105b\0\u2a47\0\u2a96\0\u0316\0\u2ae5\0\u2b34"+
    "\0\u2b34\0\u2b83\0\u2ae5\0\u0316\0\u2bd2\0\u1235\0\u2c21\0\u0316"+
    "\0\u2c70\0\u2cbf\0\u2d0e\0\u2d5d\0\u2dac\0\u2dfb\0\u2e4a\0\u2e99"+
    "\0\u0316\0\u2ee8\0\u2f37\0\u2f86\0\u2fd5\0\u3024\0\u3073\0\u30c2"+
    "\0\u3111\0\u3160\0\u31af\0\u31fe\0\u31fe\0\u324d\0\u329c\0\u32eb"+
    "\0\u0365\0\u333a\0\u3389\0\u33d8\0\u04f0\0\u3427\0\u3476\0\u34c5"+
    "\0\u3514\0\u3563\0\u04f0\0\u0768\0\u0316\0\u35b2\0\u3601\0\u3650"+
    "\0\u369f\0\u36ee\0\u373d\0\u0316\0\u0316\0\u378c\0\u0316\0\u37db"+
    "\0\u382a\0\u0316\0\u3879\0\u38c8\0\u3917\0\u3966\0\u39b5\0\u3a04"+
    "\0\u3a53\0\u0365\0\u3aa2\0\u3af1\0\u3b40\0\u3b8f\0\u3bde\0\u3c2d"+
    "\0\u3c7c\0\u3ccb\0\u3d1a\0\u3d69\0\u3db8\0\u3e07\0\u3e56\0\u3ea5"+
    "\0\u3ef4\0\u3f43\0\u3f92\0\u3fe1\0\u4030\0\u0365\0\u407f\0\u40ce"+
    "\0\u411d\0\u416c\0\u41bb\0\u420a\0\u4259\0\u42a8\0\u0365\0\u0365"+
    "\0\u42f7\0\u4346\0\u4395\0\u43e4\0\u290b\0\u4433\0\u4482\0\u0316"+
    "\0\u44d1\0\u4520\0\u0316\0\u456f\0\u45be\0\u0316\0\u1235\0\u460d"+
    "\0\u465c\0\u46ab\0\u140f\0\u2e99\0\u46fa\0\u4749\0\u4798\0\u47e7"+
    "\0\u0316\0\u4836\0\u194e\0\u4885\0\u48d4\0\u4923\0\u4972\0\u49c1"+
    "\0\u4a10\0\u04f0\0\u04f0\0\u4a5f\0\u4aae\0\u4afd\0\u4b4c\0\u4b9b"+
    "\0\u4bea\0\u4c39\0\u4c88\0\u4cd7\0\u4d26\0\u4d75\0\u0365\0\u4dc4"+
    "\0\u4e13\0\u0365\0\u0365\0\u0365\0\u4e62\0\u4eb1\0\u4f00\0\u4f4f"+
    "\0\u0365\0\u0365\0\u4f9e\0\u4fed\0\u0365\0\u503c\0\u508b\0\u50da"+
    "\0\u5129\0\u5178\0\u0365\0\u51c7\0\u5216\0\u5265\0\u52b4\0\u5303"+
    "\0\u5352\0\u53a1\0\u53f0\0\u543f\0\u548e\0\u0365\0\u54dd\0\u552c"+
    "\0\u29f8\0\u4520\0\u2b83\0\u557b\0\u55ca\0\u324d\0\u333a\0\u5619"+
    "\0\u5668\0\u0316\0\u56b7\0\u04f0\0\u5706\0\u5755\0\u57a4\0\u57f3"+
    "\0\u5842\0\u5891\0\u0365\0\u58e0\0\u0365\0\u0365\0\u592f\0\u597e"+
    "\0\u59cd\0\u0365\0\u0365\0\u5a1c\0\u5a6b\0\u5aba\0\u5b09\0\u0365"+
    "\0\u5b58\0\u5ba7\0\u0365\0\u0365\0\u5bf6\0\u5c45\0\u5c94\0\u5ce3"+
    "\0\u5d32\0\u0365\0\u0365\0\u0365\0\u5d81\0\u5dd0\0\u2dfb\0\u5e1f"+
    "\0\u5e6e\0\u5ebd\0\u0316\0\u5f0c\0\u5f5b\0\u5faa\0\u5ff9\0\u6048"+
    "\0\u6097\0\u0365\0\u0365\0\u60e6\0\u6135\0\u6184\0\u61d3\0\u6222"+
    "\0\u0365\0\u0365\0\u6271\0\u62c0\0\u630f\0\u635e\0\u63ad\0\u63fc"+
    "\0\u644b\0\u0365\0\u0316\0\u649a\0\u64e9\0\u6538\0\u6587\0\u65d6"+
    "\0\u6625\0\u6674\0\u66c3\0\u6712\0\u6761\0\u0365\0\u67b0\0\u0365"+
    "\0\u0365\0\u0365\0\u67ff\0\u0365\0\u684e\0\u689d\0\u4885\0\u68ec"+
    "\0\u693b\0\u698a\0\u0365\0\u69d9\0\u6a28\0\u6a77\0\u6ac6\0\u0365"+
    "\0\u6b15\0\u0365\0\u5619\0\u6b64\0\u6bb3\0\u6c02\0\u6c51\0\u6ca0"+
    "\0\u6cef\0\u0365\0\u0316\0\u6d3e\0\u0365\0\u6d8d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[470];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\15\1\16\1\14\1\17\1\16\1\14"+
    "\1\20\1\14\1\21\1\14\1\22\1\23\1\24\1\25"+
    "\1\26\5\22\1\27\1\30\1\31\1\32\1\22\1\13"+
    "\1\14\1\33\1\34\1\16\1\14\1\35\1\14\1\36"+
    "\1\37\3\34\1\40\1\41\3\14\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\14\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\2\14\1\57\1\60\1\61\1\14"+
    "\1\62\1\63\1\64\1\14\1\65\1\66\1\14\1\67"+
    "\1\14\1\70\1\71\1\72\1\73\1\0\1\13\1\14"+
    "\1\15\1\16\1\14\1\17\1\16\1\14\1\20\1\14"+
    "\1\21\1\14\1\22\1\23\1\24\1\25\1\26\5\22"+
    "\1\27\1\74\1\31\1\32\1\22\1\13\1\14\1\33"+
    "\1\34\1\16\1\14\1\35\1\14\1\36\1\37\3\34"+
    "\1\40\1\41\3\14\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\14\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\2\14\1\57\1\60\1\61\1\14\1\62\1\63"+
    "\1\64\1\14\1\65\1\66\1\14\1\67\1\14\1\70"+
    "\1\71\1\72\1\73\44\0\1\75\53\0\32\76\1\77"+
    "\3\76\1\100\4\76\1\101\1\102\1\103\51\76\43\104"+
    "\1\105\1\106\52\104\1\107\1\110\2\107\2\110\1\107"+
    "\3\110\1\107\1\110\1\111\2\112\1\111\1\112\12\111"+
    "\1\107\1\110\1\113\2\107\1\110\1\107\1\110\1\107"+
    "\1\110\5\107\3\110\5\107\30\110\2\111\3\107\1\0"+
    "\1\114\2\0\2\114\1\0\3\114\1\0\1\114\20\0"+
    "\1\114\3\0\1\114\1\0\1\114\1\0\1\114\5\0"+
    "\3\114\5\0\30\114\5\0\32\115\1\116\3\115\1\117"+
    "\4\115\1\120\1\121\1\117\51\115\2\0\1\122\1\123"+
    "\2\0\1\123\30\0\1\123\60\0\1\124\2\125\2\124"+
    "\1\125\3\124\1\0\1\124\1\126\2\127\1\126\1\127"+
    "\12\126\1\125\1\124\1\130\1\0\1\125\1\124\1\0"+
    "\1\124\1\0\1\124\1\0\1\125\3\0\3\124\5\0"+
    "\30\124\2\126\123\0\4\14\1\131\4\14\1\0\1\14"+
    "\17\0\2\14\2\0\2\14\1\0\1\14\1\132\1\14"+
    "\1\0\1\14\3\0\3\14\5\0\30\14\6\0\1\133"+
    "\1\134\1\135\1\136\2\134\1\0\1\137\1\140\1\141"+
    "\1\142\23\0\1\134\13\0\1\137\14\0\1\142\1\133"+
    "\3\0\1\140\2\0\1\136\17\0\1\133\2\16\1\0"+
    "\2\16\1\0\1\137\1\140\1\141\1\142\23\0\1\16"+
    "\13\0\1\137\14\0\1\142\1\133\3\0\1\140\22\0"+
    "\4\14\1\131\4\14\1\0\1\14\17\0\2\14\2\0"+
    "\2\14\1\0\1\14\1\132\1\14\1\0\1\14\3\0"+
    "\3\14\5\0\6\14\1\143\1\14\1\144\17\14\7\0"+
    "\2\145\2\0\1\145\30\0\1\145\73\0\17\22\57\0"+
    "\2\22\17\0\5\22\1\146\11\22\57\0\2\22\17\0"+
    "\2\22\1\147\14\22\57\0\2\22\17\0\14\22\1\150"+
    "\2\22\57\0\2\22\17\0\10\22\1\151\1\22\1\152"+
    "\4\22\57\0\2\22\4\0\1\153\2\0\2\153\1\0"+
    "\3\153\1\0\1\153\1\71\1\22\1\154\2\22\1\155"+
    "\1\156\6\22\1\157\1\22\1\0\1\153\3\0\1\153"+
    "\1\0\1\153\1\0\1\153\5\0\3\153\5\0\30\153"+
    "\2\22\17\0\2\22\1\160\14\22\57\0\2\22\17\0"+
    "\3\22\1\161\13\22\57\0\2\22\3\0\32\162\1\163"+
    "\2\162\1\164\1\0\6\162\3\0\47\162\36\0\1\34"+
    "\6\0\4\34\46\0\1\165\1\166\2\165\2\166\1\165"+
    "\3\166\1\165\1\166\1\167\2\170\1\167\1\170\11\167"+
    "\1\171\1\165\1\166\1\165\1\0\1\165\1\166\1\172"+
    "\1\166\1\165\1\166\1\0\3\165\1\173\3\166\1\173"+
    "\4\165\30\166\2\167\3\165\32\174\1\175\3\174\1\0"+
    "\4\174\1\176\1\174\1\0\51\174\1\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\1\177"+
    "\4\0\30\14\34\0\1\200\116\0\1\201\70\0\4\14"+
    "\1\131\4\14\1\0\1\14\17\0\2\14\2\0\2\14"+
    "\1\0\1\14\1\132\1\14\1\0\1\14\3\0\3\14"+
    "\5\0\1\14\1\202\26\14\6\0\4\14\1\131\4\14"+
    "\1\0\1\14\17\0\2\14\2\0\1\14\1\203\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\6\14\1\204\21\14\6\0\4\14\1\131\4\14\1\0"+
    "\1\14\17\0\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\4\14\1\205"+
    "\5\14\1\206\6\14\1\207\6\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\6\14\1\210\21\14\6\0\4\14\1\131\4\14\1\0"+
    "\1\14\17\0\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\1\211\6\14"+
    "\1\212\20\14\6\0\4\14\1\131\4\14\1\0\1\14"+
    "\17\0\2\14\2\0\2\14\1\0\1\14\1\132\1\14"+
    "\1\0\1\14\3\0\3\14\5\0\7\14\1\213\4\14"+
    "\1\214\1\14\1\215\11\14\6\0\4\14\1\131\4\14"+
    "\1\0\1\14\17\0\2\14\2\0\2\14\1\0\1\14"+
    "\1\132\1\14\1\0\1\14\3\0\3\14\5\0\1\216"+
    "\27\14\6\0\4\14\1\131\4\14\1\0\1\14\17\0"+
    "\2\14\2\0\2\14\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\1\14\1\217\22\14\1\220"+
    "\3\14\6\0\4\14\1\131\4\14\1\0\1\14\17\0"+
    "\2\14\2\0\2\14\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\1\221\7\14\1\222\7\14"+
    "\1\223\7\14\6\0\4\14\1\131\4\14\1\0\1\14"+
    "\17\0\2\14\2\0\1\14\1\224\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\6\14\1\225"+
    "\21\14\6\0\4\14\1\131\4\14\1\0\1\14\17\0"+
    "\2\14\2\0\2\14\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\1\226\27\14\6\0\4\14"+
    "\1\131\4\14\1\0\1\14\17\0\2\14\2\0\2\14"+
    "\1\0\1\14\1\132\1\14\1\0\1\14\3\0\3\14"+
    "\5\0\1\227\3\14\1\230\23\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\13\14\1\231\1\14\1\232\12\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\20\14\1\233\7\14\6\0\4\14\1\131\4\14\1\0"+
    "\1\14\17\0\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\20\14\1\234"+
    "\7\14\6\0\4\14\1\131\4\14\1\0\1\14\17\0"+
    "\2\14\2\0\2\14\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\1\235\27\14\6\0\4\14"+
    "\1\131\4\14\1\0\1\14\17\0\2\14\2\0\2\14"+
    "\1\0\1\14\1\132\1\14\1\0\1\14\3\0\3\14"+
    "\5\0\12\14\1\236\5\14\1\237\7\14\21\0\1\71"+
    "\1\22\1\154\3\22\1\156\10\22\57\0\2\22\3\0"+
    "\32\240\1\241\3\240\1\0\4\240\1\242\2\0\51\240"+
    "\32\76\1\0\3\76\1\0\4\76\3\0\51\76\36\243"+
    "\1\0\1\243\1\244\4\243\1\0\51\243\1\0\1\245"+
    "\2\0\2\245\1\0\3\245\1\0\1\245\1\246\2\247"+
    "\1\246\1\247\12\246\1\0\1\245\1\250\2\0\1\245"+
    "\1\0\1\245\1\0\1\251\5\0\3\245\1\252\4\0"+
    "\30\245\2\246\41\0\1\100\6\0\1\253\51\0\43\104"+
    "\1\254\1\0\115\104\1\255\1\256\52\104\1\0\1\257"+
    "\2\0\2\257\1\0\3\257\1\0\1\257\1\260\2\261"+
    "\1\260\1\261\12\260\1\0\1\257\1\262\2\0\1\257"+
    "\1\0\1\257\1\0\1\263\5\0\3\257\1\264\4\0"+
    "\30\257\2\260\4\0\4\110\1\265\4\110\1\0\1\110"+
    "\17\0\2\110\2\0\2\110\1\0\1\110\1\0\1\110"+
    "\1\0\1\110\3\0\3\110\5\0\30\110\21\0\17\111"+
    "\57\0\2\111\3\0\32\266\1\267\2\266\1\270\1\0"+
    "\6\266\3\0\47\266\1\0\4\114\1\271\4\114\1\0"+
    "\1\114\17\0\2\114\2\0\2\114\1\0\1\114\1\0"+
    "\1\114\1\0\1\114\3\0\3\114\5\0\30\114\5\0"+
    "\36\115\1\117\4\115\1\272\1\121\1\117\51\115\32\117"+
    "\1\273\10\117\1\274\1\0\115\117\1\274\1\0\52\117"+
    "\32\0\1\275\10\0\1\276\105\0\1\275\66\0\1\277"+
    "\1\0\1\300\2\277\30\0\1\277\40\0\1\300\20\0"+
    "\2\123\1\0\2\123\30\0\1\123\60\0\1\124\2\125"+
    "\2\124\1\125\3\124\1\301\1\124\17\0\1\125\1\124"+
    "\2\0\1\125\1\124\1\0\1\124\1\0\1\124\1\0"+
    "\1\125\3\0\3\124\5\0\30\124\6\0\1\124\2\125"+
    "\2\124\1\125\3\124\1\0\1\124\17\0\1\125\1\124"+
    "\2\0\1\125\1\124\1\0\1\124\1\0\1\124\1\0"+
    "\1\125\3\0\3\124\5\0\30\124\12\0\1\125\4\0"+
    "\1\301\1\0\17\126\57\0\2\126\10\0\1\125\6\0"+
    "\17\126\57\0\2\126\3\0\35\130\1\302\1\0\6\130"+
    "\1\0\2\303\47\130\1\0\4\14\1\131\4\14\1\0"+
    "\1\14\17\304\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\30\14\2\304"+
    "\3\0\32\305\1\306\3\305\1\0\4\305\1\307\2\0"+
    "\51\305\1\0\1\133\1\134\1\135\1\0\2\134\1\0"+
    "\1\137\1\140\1\141\1\142\23\0\1\134\13\0\1\137"+
    "\14\0\1\142\1\133\3\0\1\140\23\0\2\135\1\0"+
    "\2\135\1\0\1\137\1\140\1\310\1\142\23\0\1\135"+
    "\13\0\1\137\14\0\1\142\4\0\1\140\23\0\2\311"+
    "\1\0\5\311\1\0\1\311\23\0\1\311\2\0\1\311"+
    "\7\0\2\311\6\0\2\311\3\0\2\311\4\0\1\311"+
    "\22\0\1\312\2\145\2\312\1\145\3\312\1\0\1\313"+
    "\1\314\2\315\1\314\1\315\12\314\1\0\1\312\1\316"+
    "\1\0\1\145\1\312\1\0\1\312\1\0\1\312\5\0"+
    "\3\312\5\0\6\312\1\313\21\312\2\314\5\0\2\317"+
    "\2\0\1\317\5\0\1\320\10\0\1\320\11\0\1\317"+
    "\60\0\4\14\1\131\4\14\1\0\1\14\17\0\2\14"+
    "\2\0\2\14\1\0\1\14\1\132\1\14\1\0\1\14"+
    "\3\0\3\14\5\0\13\14\1\321\14\14\7\0\2\145"+
    "\1\0\2\145\1\0\1\137\1\140\1\0\1\142\23\0"+
    "\1\145\13\0\1\137\14\0\1\142\4\0\1\140\21\0"+
    "\14\322\5\146\1\323\11\146\57\322\2\146\3\322\14\0"+
    "\1\22\1\324\15\22\57\0\2\22\17\0\14\22\1\325"+
    "\2\22\57\0\2\22\3\0\14\326\10\327\1\330\1\327"+
    "\1\22\4\327\57\326\2\327\3\326\36\152\1\0\6\152"+
    "\1\0\51\152\14\0\1\331\16\22\16\0\1\332\40\0"+
    "\2\22\4\0\1\153\2\0\2\153\1\0\3\153\1\0"+
    "\1\153\17\22\1\0\1\153\3\0\1\153\1\0\1\153"+
    "\1\0\1\153\5\0\3\153\5\0\30\153\2\22\17\0"+
    "\14\22\1\333\2\22\57\0\2\22\3\0\32\162\1\163"+
    "\2\162\1\334\1\0\6\162\1\0\51\162\32\0\1\335"+
    "\6\0\1\335\56\0\4\336\1\337\4\336\1\0\1\336"+
    "\16\0\1\335\2\336\2\0\2\336\1\335\1\336\1\0"+
    "\1\336\1\0\1\336\3\0\3\336\5\0\30\336\21\0"+
    "\17\340\6\0\1\335\50\0\2\340\3\0\2\165\1\341"+
    "\3\165\1\342\5\165\17\167\3\165\1\0\1\341\1\343"+
    "\4\165\1\0\44\165\2\167\3\165\41\344\1\335\55\344"+
    "\32\174\1\175\3\174\1\0\4\174\1\345\1\174\1\0"+
    "\107\174\1\0\6\174\1\0\51\174\43\0\1\346\54\0"+
    "\1\347\2\0\2\347\1\0\3\347\1\0\1\347\5\0"+
    "\1\350\7\0\1\351\2\0\1\347\3\0\1\347\1\0"+
    "\1\347\1\0\1\347\5\0\3\347\5\0\30\347\6\0"+
    "\1\352\2\0\2\352\1\0\3\352\1\0\1\352\5\0"+
    "\1\353\7\0\1\354\2\0\1\352\3\0\1\352\1\0"+
    "\1\352\1\0\1\352\5\0\3\352\5\0\30\352\6\0"+
    "\4\14\1\131\4\14\1\0\1\14\17\0\2\14\2\0"+
    "\2\14\1\0\1\14\1\132\1\14\1\0\1\14\3\0"+
    "\3\14\5\0\2\14\1\355\25\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\17\14\1\356\10\14\6\0\4\14\1\131\4\14\1\0"+
    "\1\14\17\0\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\1\357\27\14"+
    "\6\0\4\14\1\131\4\14\1\0\1\14\17\0\2\14"+
    "\2\0\1\14\1\360\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\1\361\20\14\1\362\6\14"+
    "\6\0\4\14\1\131\4\14\1\0\1\14\17\0\2\14"+
    "\2\0\2\14\1\0\1\14\1\132\1\14\1\0\1\14"+
    "\3\0\3\14\5\0\4\14\1\363\1\14\1\364\11\14"+
    "\1\365\7\14\6\0\4\14\1\131\4\14\1\0\1\14"+
    "\17\0\2\14\2\0\2\14\1\0\1\14\1\132\1\14"+
    "\1\0\1\14\3\0\3\14\5\0\17\14\1\366\10\14"+
    "\6\0\4\14\1\131\4\14\1\0\1\14\17\0\2\14"+
    "\2\0\2\14\1\0\1\14\1\132\1\14\1\0\1\14"+
    "\3\0\3\14\5\0\3\14\1\367\24\14\6\0\4\14"+
    "\1\131\4\14\1\0\1\14\17\0\2\14\2\0\2\14"+
    "\1\0\1\14\1\132\1\14\1\0\1\14\3\0\3\14"+
    "\5\0\2\14\1\370\1\371\24\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\1\372\27\14\6\0\4\14\1\131\4\14\1\0\1\14"+
    "\17\0\2\14\2\0\2\14\1\0\1\14\1\132\1\14"+
    "\1\0\1\14\3\0\3\14\5\0\2\14\1\373\25\14"+
    "\6\0\4\14\1\131\4\14\1\0\1\14\17\0\2\14"+
    "\2\0\1\14\1\374\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\30\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\3\14\1\375\13\14\1\376\10\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\25\14\1\377\2\14\6\0\4\14\1\131\4\14\1\0"+
    "\1\14\17\0\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\11\14\1\u0100"+
    "\16\14\6\0\4\14\1\131\4\14\1\0\1\14\17\0"+
    "\2\14\2\0\2\14\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\6\14\1\u0101\21\14\6\0"+
    "\4\14\1\131\4\14\1\0\1\14\17\0\2\14\2\0"+
    "\2\14\1\0\1\14\1\132\1\14\1\0\1\14\3\0"+
    "\3\14\5\0\7\14\1\u0102\20\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\4\14\1\u0103\23\14\6\0\4\14\1\131\4\14\1\0"+
    "\1\14\17\0\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\14\14\1\u0104"+
    "\13\14\6\0\4\14\1\131\4\14\1\0\1\14\17\0"+
    "\2\14\2\0\2\14\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\7\14\1\u0105\20\14\6\0"+
    "\4\14\1\131\4\14\1\0\1\14\17\0\2\14\2\0"+
    "\2\14\1\0\1\14\1\132\1\14\1\0\1\14\3\0"+
    "\3\14\5\0\26\14\1\u0106\1\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\3\14\1\u0107\1\14\1\u0108\22\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\5\14\1\u0109\22\14\6\0\4\14\1\131\4\14\1\0"+
    "\1\14\17\0\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\10\14\1\u010a"+
    "\7\14\1\u010b\7\14\6\0\4\14\1\131\4\14\1\0"+
    "\1\14\17\0\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\17\14\1\u010c"+
    "\10\14\6\0\4\14\1\131\4\14\1\0\1\14\17\0"+
    "\2\14\2\0\2\14\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\6\14\1\u010d\21\14\6\0"+
    "\4\14\1\131\4\14\1\0\1\14\17\0\2\14\2\0"+
    "\2\14\1\0\1\14\1\132\1\14\1\0\1\14\3\0"+
    "\3\14\5\0\24\14\1\u010e\3\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\4\14\1\u010f\2\14\1\u0110\20\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\20\14\1\u0111\7\14\6\0\4\14\1\131\4\14\1\0"+
    "\1\14\17\0\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\3\14\1\u0112"+
    "\24\14\5\0\32\240\1\241\3\240\1\0\4\240\3\0"+
    "\107\240\1\0\6\240\1\0\51\240\43\0\1\u0113\55\0"+
    "\2\u0114\2\0\4\u0114\1\0\1\u0114\23\0\1\u0114\1\u0115"+
    "\1\0\1\u0114\7\0\2\u0114\6\0\2\u0114\3\0\2\u0114"+
    "\4\0\1\u0114\22\0\4\245\1\u0116\4\245\1\0\1\245"+
    "\17\0\2\245\2\0\2\245\1\0\1\245\1\0\1\245"+
    "\1\0\1\245\3\0\3\245\5\0\30\245\21\0\17\246"+
    "\57\0\2\246\3\0\32\250\1\u0117\2\250\1\u0118\1\0"+
    "\6\250\3\0\47\250\43\104\1\u0119\1\0\115\104\1\u011a"+
    "\1\u011b\52\104\1\0\4\257\1\u011c\4\257\1\0\1\257"+
    "\17\0\2\257\2\0\2\257\1\0\1\257\1\0\1\257"+
    "\1\0\1\257\3\0\3\257\5\0\30\257\21\0\17\260"+
    "\57\0\2\260\3\0\32\262\1\u011d\2\262\1\u011e\1\0"+
    "\6\262\3\0\47\262\1\0\4\110\1\265\4\110\1\0"+
    "\1\110\17\111\2\110\2\0\2\110\1\0\1\110\1\0"+
    "\1\110\1\0\1\110\3\0\3\110\5\0\30\110\2\111"+
    "\3\0\32\266\1\267\2\266\1\u011f\1\0\6\266\1\0"+
    "\51\266\1\0\4\114\1\271\4\114\1\0\1\114\17\u0120"+
    "\2\114\2\0\2\114\1\0\1\114\1\0\1\114\1\0"+
    "\1\114\3\0\3\114\5\0\30\114\2\u0120\3\0\32\117"+
    "\1\273\10\117\1\u0121\1\0\52\117\32\115\1\116\3\115"+
    "\1\117\4\115\1\272\1\121\1\117\51\115\43\117\1\u0121"+
    "\1\0\52\117\32\u0122\1\121\3\u0122\1\0\4\u0122\1\u0123"+
    "\1\121\1\0\51\u0122\43\0\1\301\55\0\1\277\2\0"+
    "\2\277\30\0\1\277\61\0\2\u0124\1\0\5\u0124\1\0"+
    "\1\u0124\23\0\1\u0124\2\0\1\u0124\7\0\2\u0124\6\0"+
    "\2\u0124\3\0\2\u0124\4\0\1\u0124\33\0\1\301\17\0"+
    "\1\130\116\0\1\130\100\0\17\304\10\0\1\132\46\0"+
    "\2\304\3\0\32\305\1\306\3\305\1\0\4\305\3\0"+
    "\107\305\1\0\6\305\1\0\51\305\43\0\1\u0125\55\0"+
    "\2\145\2\0\1\145\1\0\1\137\1\140\1\0\1\142"+
    "\23\0\1\145\13\0\1\137\14\0\1\142\4\0\1\140"+
    "\22\0\1\133\2\311\1\0\5\311\1\u0126\1\311\23\0"+
    "\1\311\2\0\1\311\7\0\2\311\6\0\2\311\3\0"+
    "\2\311\1\133\3\0\1\311\22\0\4\312\1\u0127\4\312"+
    "\1\0\1\312\17\0\2\312\2\0\2\312\1\0\1\312"+
    "\1\0\1\312\1\0\1\312\3\0\3\312\5\0\30\312"+
    "\6\0\4\312\1\u0127\4\312\1\0\1\312\1\320\10\0"+
    "\1\320\5\0\2\312\2\0\2\312\1\0\1\312\1\0"+
    "\1\312\1\0\1\312\3\0\3\312\5\0\30\312\21\0"+
    "\17\314\57\0\2\314\3\0\32\316\1\u0128\2\316\1\u0129"+
    "\1\0\6\316\3\0\47\316\2\0\2\317\1\0\2\317"+
    "\1\0\1\137\1\140\25\0\1\317\13\0\1\137\21\0"+
    "\1\140\23\0\2\317\2\0\1\317\30\0\1\317\57\0"+
    "\21\322\1\u012a\111\322\1\146\1\u012b\3\146\1\323\11\146"+
    "\57\322\2\146\3\322\14\0\5\22\1\u012c\11\22\57\0"+
    "\2\22\3\0\24\326\1\u012d\1\326\1\0\104\326\10\327"+
    "\1\u012e\1\327\1\22\4\327\57\326\2\327\3\326\14\u012f"+
    "\10\u0130\1\u0131\1\u0130\1\u0132\4\u0130\57\u012f\2\u0130\3\u012f"+
    "\14\0\1\u0133\16\22\57\0\2\22\55\0\1\u0134\45\0"+
    "\4\336\1\337\4\336\1\0\1\336\17\0\2\336\2\0"+
    "\2\336\1\0\1\336\1\0\1\336\1\0\1\336\3\0"+
    "\3\336\5\0\30\336\6\0\4\336\1\337\4\336\1\0"+
    "\1\336\17\340\2\336\2\0\2\336\1\0\1\336\1\0"+
    "\1\336\1\0\1\336\3\0\3\336\5\0\30\336\2\340"+
    "\17\0\17\340\57\0\2\340\5\0\1\342\3\0\1\342"+
    "\23\0\1\335\4\0\1\342\1\0\1\335\57\0\1\165"+
    "\3\0\1\165\23\0\1\335\4\0\1\165\1\0\1\335"+
    "\57\0\2\u0135\2\0\4\u0135\1\0\1\u0135\16\0\1\335"+
    "\4\0\1\u0135\1\u0136\1\335\1\u0135\7\0\2\u0135\6\0"+
    "\2\u0135\3\0\2\u0135\4\0\1\u0135\21\0\43\346\1\u0137"+
    "\53\346\14\0\1\u0138\34\0\1\u0139\46\0\1\347\2\0"+
    "\2\347\1\0\3\347\1\0\1\347\20\0\1\347\3\0"+
    "\1\347\1\0\1\347\1\0\1\347\5\0\3\347\5\0"+
    "\30\347\21\0\1\u013a\34\0\1\u013b\46\0\1\352\2\0"+
    "\2\352\1\0\3\352\1\0\1\352\20\0\1\352\3\0"+
    "\1\352\1\0\1\352\1\0\1\352\5\0\3\352\5\0"+
    "\30\352\6\0\4\14\1\131\4\14\1\0\1\14\17\0"+
    "\2\14\2\0\2\14\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\3\14\1\u013c\24\14\6\0"+
    "\4\14\1\131\4\14\1\0\1\14\17\0\2\14\2\0"+
    "\2\14\1\0\1\14\1\132\1\14\1\0\1\14\3\0"+
    "\3\14\5\0\6\14\1\u013d\21\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\7\14\1\u013e\20\14\6\0\4\14\1\131\4\14\1\0"+
    "\1\14\17\0\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\6\14\1\u013f"+
    "\21\14\6\0\4\14\1\131\4\14\1\0\1\14\17\0"+
    "\2\14\2\0\2\14\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\20\14\1\u0140\7\14\6\0"+
    "\4\14\1\131\4\14\1\0\1\14\17\0\2\14\2\0"+
    "\2\14\1\0\1\14\1\132\1\14\1\0\1\14\3\0"+
    "\3\14\5\0\10\14\1\u0141\17\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\14\14\1\u0142\13\14\6\0\4\14\1\131\4\14\1\0"+
    "\1\14\17\0\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\2\14\1\u0143"+
    "\25\14\6\0\4\14\1\131\4\14\1\0\1\14\17\0"+
    "\2\14\2\0\2\14\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\6\14\1\u0144\21\14\6\0"+
    "\4\14\1\131\4\14\1\0\1\14\17\0\2\14\2\0"+
    "\1\14\1\u0145\1\0\1\14\1\132\1\14\1\0\1\14"+
    "\3\0\3\14\5\0\30\14\6\0\4\14\1\131\4\14"+
    "\1\0\1\14\17\0\2\14\2\0\2\14\1\0\1\14"+
    "\1\132\1\14\1\0\1\14\3\0\3\14\5\0\6\14"+
    "\1\u0146\21\14\6\0\4\14\1\131\4\14\1\0\1\14"+
    "\17\0\2\14\2\0\2\14\1\0\1\14\1\132\1\14"+
    "\1\0\1\14\3\0\3\14\5\0\5\14\1\u0147\22\14"+
    "\6\0\4\14\1\131\4\14\1\0\1\14\17\0\2\14"+
    "\2\0\2\14\1\0\1\14\1\132\1\14\1\0\1\14"+
    "\3\0\3\14\5\0\2\14\1\u0148\25\14\6\0\4\14"+
    "\1\131\4\14\1\0\1\14\17\0\2\14\2\0\2\14"+
    "\1\0\1\14\1\132\1\14\1\0\1\14\3\0\3\14"+
    "\5\0\6\14\1\u0149\21\14\6\0\4\14\1\131\4\14"+
    "\1\0\1\14\17\0\2\14\2\0\2\14\1\0\1\14"+
    "\1\132\1\14\1\0\1\14\3\0\3\14\5\0\15\14"+
    "\1\u014a\12\14\6\0\4\14\1\131\4\14\1\0\1\14"+
    "\17\0\2\14\2\0\2\14\1\0\1\14\1\132\1\14"+
    "\1\0\1\14\3\0\3\14\5\0\6\14\1\u014b\21\14"+
    "\6\0\4\14\1\131\4\14\1\0\1\14\17\0\2\14"+
    "\2\0\2\14\1\0\1\14\1\132\1\14\1\0\1\14"+
    "\3\0\3\14\5\0\10\14\1\u014c\17\14\6\0\4\14"+
    "\1\131\4\14\1\0\1\14\17\0\2\14\2\0\2\14"+
    "\1\0\1\14\1\132\1\14\1\0\1\14\3\0\3\14"+
    "\5\0\21\14\1\u014d\6\14\6\0\4\14\1\131\4\14"+
    "\1\0\1\14\17\0\2\14\2\0\2\14\1\0\1\14"+
    "\1\132\1\14\1\0\1\14\3\0\3\14\5\0\6\14"+
    "\1\u014e\21\14\6\0\4\14\1\131\4\14\1\0\1\14"+
    "\17\0\2\14\2\0\2\14\1\0\1\14\1\132\1\14"+
    "\1\0\1\14\3\0\3\14\5\0\4\14\1\u014f\23\14"+
    "\6\0\4\14\1\131\4\14\1\0\1\14\17\0\2\14"+
    "\2\0\2\14\1\0\1\14\1\132\1\14\1\0\1\14"+
    "\3\0\3\14\5\0\2\14\1\u0150\25\14\6\0\4\14"+
    "\1\131\4\14\1\0\1\14\17\0\2\14\2\0\2\14"+
    "\1\0\1\14\1\132\1\14\1\0\1\14\3\0\3\14"+
    "\5\0\22\14\1\u0151\5\14\6\0\4\14\1\131\4\14"+
    "\1\0\1\14\17\0\2\14\2\0\2\14\1\0\1\14"+
    "\1\132\1\14\1\0\1\14\3\0\3\14\5\0\1\u0152"+
    "\27\14\6\0\4\14\1\131\4\14\1\0\1\14\17\0"+
    "\2\14\2\0\2\14\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\7\14\1\u0153\20\14\6\0"+
    "\4\14\1\131\4\14\1\0\1\14\17\0\2\14\2\0"+
    "\2\14\1\0\1\14\1\132\1\14\1\0\1\14\3\0"+
    "\3\14\5\0\5\14\1\u0154\22\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\4\14\1\u0155\23\14\6\0\4\14\1\131\4\14\1\0"+
    "\1\14\17\0\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\27\14\1\u0156"+
    "\6\0\4\14\1\131\4\14\1\0\1\14\17\0\2\14"+
    "\2\0\2\14\1\0\1\14\1\132\1\14\1\0\1\14"+
    "\3\0\3\14\5\0\3\14\1\u0157\24\14\6\0\4\14"+
    "\1\131\4\14\1\0\1\14\17\0\2\14\2\0\2\14"+
    "\1\0\1\14\1\132\1\14\1\0\1\14\3\0\3\14"+
    "\5\0\24\14\1\u0158\3\14\6\0\4\14\1\131\4\14"+
    "\1\0\1\14\17\0\2\14\2\0\2\14\1\0\1\14"+
    "\1\132\1\14\1\0\1\14\3\0\3\14\5\0\7\14"+
    "\1\u0159\1\u015a\17\14\6\0\4\14\1\131\4\14\1\0"+
    "\1\14\17\0\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\7\14\1\u015b"+
    "\20\14\6\0\4\14\1\131\4\14\1\0\1\14\17\0"+
    "\2\14\2\0\2\14\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\6\14\1\u015c\21\14\6\0"+
    "\4\14\1\131\4\14\1\0\1\14\17\0\2\14\2\0"+
    "\2\14\1\0\1\14\1\132\1\14\1\0\1\14\3\0"+
    "\3\14\5\0\7\14\1\u015d\20\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\12\14\1\u015e\15\14\5\0\43\u0113\1\u015f\1\0\52\u0113"+
    "\2\0\2\u0160\2\0\4\u0160\1\0\1\u0160\23\0\1\u0160"+
    "\2\0\1\u0160\7\0\2\u0160\6\0\2\u0160\3\0\2\u0160"+
    "\4\0\1\u0160\22\0\4\245\1\u0116\4\245\1\0\1\245"+
    "\17\246\2\245\2\0\2\245\1\0\1\245\1\0\1\245"+
    "\1\0\1\245\3\0\3\245\5\0\30\245\2\246\3\0"+
    "\32\250\1\u0117\2\250\1\u0161\1\0\6\250\1\0\51\250"+
    "\43\104\2\0\52\104\43\0\1\u0162\54\0\4\257\1\u011c"+
    "\4\257\1\0\1\257\17\260\2\257\2\0\2\257\1\0"+
    "\1\257\1\0\1\257\1\0\1\257\3\0\3\257\5\0"+
    "\30\257\2\260\3\0\32\262\1\u011d\2\262\1\u0163\1\0"+
    "\6\262\1\0\51\262\14\0\17\u0120\57\0\2\u0120\3\0"+
    "\43\117\1\u0164\1\0\52\117\36\u0122\1\0\4\u0122\1\u0123"+
    "\1\121\1\0\51\u0122\43\u0125\1\u0165\1\0\52\u0125\1\0"+
    "\1\312\2\0\2\312\1\0\3\312\1\0\1\312\1\314"+
    "\2\315\1\314\1\315\12\314\1\0\1\312\1\316\2\0"+
    "\1\312\1\0\1\312\1\0\1\312\5\0\3\312\5\0"+
    "\30\312\2\314\4\0\4\312\1\u0127\4\312\1\0\1\312"+
    "\17\314\2\312\2\0\2\312\1\0\1\312\1\0\1\312"+
    "\1\0\1\312\3\0\3\312\5\0\30\312\2\314\3\0"+
    "\32\316\1\u0128\2\316\1\u0166\1\0\6\316\1\0\51\316"+
    "\15\322\1\u0167\3\322\1\u012a\75\322\14\u0168\2\u012c\1\u0169"+
    "\14\u012c\57\u0168\2\u012c\3\u0168\24\326\1\u012d\1\326\1\u016a"+
    "\104\326\10\327\1\u012e\1\327\1\u0132\4\327\57\326\2\327"+
    "\3\326\24\u012f\1\u016b\1\u012f\1\0\104\u012f\10\u0130\1\u0131"+
    "\1\u0130\1\22\4\u0130\57\u012f\2\u0130\17\u012f\10\u0130\1\u0131"+
    "\1\u0130\1\u016c\4\u0130\57\u012f\2\u0130\3\u012f\53\0\1\u016d"+
    "\45\0\2\u016e\2\0\4\u016e\1\0\1\u016e\23\0\1\u016e"+
    "\2\0\1\u016e\7\0\2\u016e\6\0\2\u016e\3\0\2\u016e"+
    "\4\0\1\u016e\23\0\2\u0135\2\0\4\u0135\1\0\1\u0135"+
    "\23\0\1\u0135\1\u0136\1\0\1\u0135\7\0\2\u0135\6\0"+
    "\2\u0135\3\0\2\u0135\4\0\1\u0135\21\0\43\346\1\u016f"+
    "\53\346\14\0\1\347\154\0\1\u0170\60\0\1\352\154\0"+
    "\1\u0171\45\0\4\14\1\131\4\14\1\0\1\14\17\0"+
    "\2\14\2\0\2\14\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\4\14\1\u0172\23\14\6\0"+
    "\4\14\1\131\4\14\1\0\1\14\17\0\2\14\2\0"+
    "\2\14\1\0\1\14\1\132\1\14\1\0\1\14\3\0"+
    "\3\14\5\0\4\14\1\u0173\23\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\6\14\1\u0174\21\14\6\0\4\14\1\131\4\14\1\0"+
    "\1\14\17\0\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\3\14\1\u0175"+
    "\24\14\6\0\4\14\1\131\4\14\1\0\1\14\17\0"+
    "\2\14\2\0\2\14\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\26\14\1\u0176\1\14\6\0"+
    "\4\14\1\131\4\14\1\0\1\14\17\0\2\14\2\0"+
    "\2\14\1\0\1\14\1\132\1\14\1\0\1\14\3\0"+
    "\3\14\5\0\4\14\1\u0177\23\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\1\0\1\u0178\2\14"+
    "\1\0\1\14\1\132\1\14\1\u0178\1\u0179\2\u0178\1\0"+
    "\3\14\5\0\30\14\6\0\4\14\1\131\4\14\1\0"+
    "\1\14\17\0\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\12\14\1\u017a"+
    "\15\14\6\0\4\14\1\131\4\14\1\0\1\14\17\0"+
    "\2\14\2\0\2\14\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\2\14\1\u017b\25\14\6\0"+
    "\4\14\1\131\4\14\1\0\1\14\17\0\2\14\2\0"+
    "\2\14\1\0\1\14\1\132\1\14\1\0\1\14\3\0"+
    "\3\14\5\0\14\14\1\u017c\13\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\4\14\1\u017d\23\14\6\0\4\14\1\131\4\14\1\0"+
    "\1\14\17\0\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\5\14\1\u017e"+
    "\22\14\6\0\4\14\1\131\4\14\1\0\1\14\17\0"+
    "\2\14\2\0\2\14\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\4\14\1\u017f\23\14\6\0"+
    "\4\14\1\131\4\14\1\0\1\14\17\0\2\14\2\0"+
    "\2\14\1\0\1\14\1\132\1\14\1\0\1\14\3\0"+
    "\3\14\5\0\6\14\1\u0180\21\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\10\14\1\u0181\17\14\6\0\4\14\1\131\4\14\1\0"+
    "\1\14\17\0\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\7\14\1\u0182"+
    "\20\14\6\0\4\14\1\131\4\14\1\0\1\14\17\0"+
    "\2\14\2\0\2\14\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\12\14\1\u0183\15\14\6\0"+
    "\4\14\1\131\4\14\1\0\1\14\17\0\2\14\2\0"+
    "\2\14\1\0\1\14\1\132\1\14\1\0\1\14\3\0"+
    "\3\14\5\0\10\14\1\u0184\17\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\1\u0185\27\14\6\0\4\14\1\131\4\14\1\0\1\14"+
    "\17\0\2\14\2\0\2\14\1\0\1\14\1\132\1\14"+
    "\1\0\1\14\3\0\3\14\5\0\6\14\1\u0186\21\14"+
    "\6\0\4\14\1\131\4\14\1\0\1\14\17\0\2\14"+
    "\2\0\2\14\1\0\1\14\1\132\1\14\1\0\1\14"+
    "\3\0\3\14\5\0\1\u0187\27\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\20\14\1\u0188\7\14\6\0\4\14\1\131\4\14\1\0"+
    "\1\14\17\0\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\4\14\1\u0189"+
    "\23\14\6\0\4\14\1\131\2\14\1\u018a\1\14\1\0"+
    "\1\14\17\0\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\30\14\6\0"+
    "\4\14\1\131\4\14\1\0\1\14\17\0\2\14\2\0"+
    "\2\14\1\0\1\14\1\132\1\14\1\0\1\14\3\0"+
    "\3\14\5\0\14\14\1\u018b\13\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\6\14\1\u018c\21\14\5\0\43\u0113\1\u018d\1\0\52\u0113"+
    "\2\0\2\u018e\2\0\4\u018e\1\0\1\u018e\23\0\1\u018e"+
    "\2\0\1\u018e\7\0\2\u018e\6\0\2\u018e\3\0\2\u018e"+
    "\4\0\1\u018e\64\0\1\u018f\53\0\43\u0125\1\u0190\1\0"+
    "\52\u0125\16\u0168\1\u0191\114\u0168\2\u012c\1\u0192\14\u012c\57\u0168"+
    "\2\u012c\3\u0168\24\u012f\1\u016b\1\u012f\1\u0193\70\u012f\42\0"+
    "\1\u0194\56\0\2\u0195\2\0\4\u0195\1\0\1\u0195\23\0"+
    "\1\u0195\2\0\1\u0195\7\0\2\u0195\6\0\2\u0195\3\0"+
    "\2\u0195\4\0\1\u0195\21\0\43\346\1\u0196\53\346\53\0"+
    "\1\u0197\116\0\1\u0198\44\0\4\14\1\131\4\14\1\0"+
    "\1\14\17\0\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\1\u0199\27\14"+
    "\6\0\4\14\1\131\2\14\1\u019a\1\14\1\0\1\14"+
    "\17\0\2\14\2\0\2\14\1\0\1\14\1\132\1\14"+
    "\1\0\1\14\3\0\3\14\5\0\30\14\6\0\4\14"+
    "\1\131\4\14\1\0\1\14\17\0\2\14\2\0\2\14"+
    "\1\0\1\14\1\132\1\14\1\0\1\14\3\0\3\14"+
    "\5\0\14\14\1\u019b\13\14\43\0\1\u0178\6\0\4\u0178"+
    "\16\0\1\u019c\2\0\1\u019d\25\0\4\14\1\131\4\14"+
    "\1\0\1\14\17\0\2\14\1\0\1\u0178\2\14\1\0"+
    "\1\14\1\132\1\14\1\u0178\1\u0179\2\u0178\1\0\3\14"+
    "\5\0\5\14\1\u019e\2\14\1\u019f\17\14\6\0\4\14"+
    "\1\131\2\14\1\u01a0\1\14\1\0\1\14\17\0\2\14"+
    "\2\0\2\14\1\0\1\14\1\132\1\14\1\0\1\14"+
    "\3\0\3\14\5\0\30\14\6\0\4\14\1\131\4\14"+
    "\1\0\1\14\17\0\2\14\2\0\2\14\1\0\1\14"+
    "\1\132\1\14\1\0\1\14\3\0\3\14\5\0\3\14"+
    "\1\u01a1\24\14\6\0\4\14\1\131\4\14\1\0\1\14"+
    "\17\0\2\14\2\0\2\14\1\0\1\14\1\132\1\14"+
    "\1\0\1\14\3\0\3\14\5\0\3\14\1\u01a2\24\14"+
    "\6\0\4\14\1\131\4\14\1\0\1\14\17\0\2\14"+
    "\2\0\2\14\1\0\1\14\1\132\1\14\1\0\1\14"+
    "\3\0\3\14\5\0\20\14\1\u01a3\7\14\6\0\4\14"+
    "\1\131\4\14\1\0\1\14\17\0\2\14\2\0\2\14"+
    "\1\0\1\14\1\132\1\14\1\0\1\14\3\0\3\14"+
    "\5\0\15\14\1\u01a4\12\14\6\0\4\14\1\131\4\14"+
    "\1\0\1\14\17\0\2\14\2\0\2\14\1\0\1\14"+
    "\1\132\1\14\1\0\1\14\3\0\3\14\5\0\7\14"+
    "\1\u01a5\20\14\6\0\4\14\1\131\4\14\1\0\1\14"+
    "\17\0\2\14\2\0\2\14\1\0\1\14\1\132\1\14"+
    "\1\0\1\14\3\0\3\14\5\0\23\14\1\u01a6\4\14"+
    "\6\0\4\14\1\131\4\14\1\0\1\14\17\0\2\14"+
    "\2\0\2\14\1\0\1\14\1\132\1\14\1\0\1\14"+
    "\3\0\3\14\5\0\5\14\1\u01a7\22\14\6\0\4\14"+
    "\1\131\4\14\1\0\1\14\17\0\2\14\2\0\2\14"+
    "\1\0\1\14\1\132\1\14\1\0\1\14\3\0\3\14"+
    "\5\0\3\14\1\u01a8\24\14\6\0\4\14\1\131\4\14"+
    "\1\0\1\14\17\0\2\14\2\0\2\14\1\0\1\14"+
    "\1\132\1\14\1\0\1\14\3\0\3\14\5\0\5\14"+
    "\1\u01a9\22\14\6\0\4\14\1\131\4\14\1\0\1\14"+
    "\17\0\2\14\2\0\2\14\1\0\1\14\1\132\1\14"+
    "\1\0\1\14\3\0\3\14\5\0\3\14\1\u01aa\24\14"+
    "\5\0\43\u0113\2\0\52\u0113\2\0\2\u01ab\2\0\4\u01ab"+
    "\1\0\1\u01ab\23\0\1\u01ab\2\0\1\u01ab\7\0\2\u01ab"+
    "\6\0\2\u01ab\3\0\2\u01ab\4\0\1\u01ab\21\0\43\u0125"+
    "\2\0\52\u0125\16\u0168\1\u01ac\114\u0168\2\u012c\1\u0192\2\u012c"+
    "\1\u01ad\11\u012c\57\u0168\2\u012c\3\u0168\54\0\1\u01ae\44\0"+
    "\2\165\2\0\4\165\1\0\1\165\23\0\1\165\2\0"+
    "\1\165\7\0\2\165\6\0\2\165\3\0\2\165\4\0"+
    "\1\165\64\0\1\u0196\115\0\1\u01af\116\0\1\u01b0\55\0"+
    "\4\14\1\131\4\14\1\0\1\14\17\0\2\14\2\0"+
    "\2\14\1\0\1\14\1\132\1\14\1\0\1\14\3\0"+
    "\3\14\5\0\5\14\1\u01b1\22\14\76\0\1\u01b2\110\0"+
    "\1\u01b3\34\0\4\14\1\131\4\14\1\0\1\14\17\0"+
    "\2\14\2\0\2\14\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\7\14\1\u01b4\20\14\6\0"+
    "\4\14\1\131\4\14\1\0\1\14\17\0\2\14\2\0"+
    "\2\14\1\0\1\14\1\132\1\14\1\0\1\14\3\0"+
    "\3\14\5\0\1\14\1\u01b5\26\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\2\14\1\u01b6\25\14\6\0\4\14\1\131\2\14\1\u01b7"+
    "\1\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\30\14\6\0\4\14\1\131\4\14\1\0\1\14\17\0"+
    "\2\14\2\0\2\14\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\6\14\1\u01b8\21\14\6\0"+
    "\4\14\1\131\4\14\1\0\1\14\17\0\2\14\2\0"+
    "\2\14\1\0\1\14\1\132\1\14\1\0\1\14\3\0"+
    "\3\14\5\0\21\14\1\u01b9\6\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\6\14\1\u01ba\21\14\6\0\4\14\1\131\4\14\1\0"+
    "\1\14\17\0\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\3\14\1\u01bb"+
    "\24\14\6\0\4\14\1\131\4\14\1\0\1\14\17\0"+
    "\2\14\2\0\2\14\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\6\14\1\u01bc\21\14\6\0"+
    "\4\14\1\131\4\14\1\0\1\14\17\0\2\14\2\0"+
    "\2\14\1\0\1\14\1\132\1\14\1\0\1\14\3\0"+
    "\3\14\5\0\20\14\1\u01bd\7\14\5\0\16\u0168\1\u01ac"+
    "\2\u0168\1\u01be\111\u0168\1\u012c\1\u01bf\1\u0169\14\u012c\57\u0168"+
    "\2\u012c\3\u0168\42\0\1\u01c0\130\0\1\u01c1\116\0\1\u01c2"+
    "\43\0\4\14\1\131\4\14\1\0\1\14\17\0\2\14"+
    "\2\0\2\14\1\0\1\14\1\132\1\14\1\0\1\14"+
    "\3\0\3\14\5\0\3\14\1\u01c3\24\14\67\0\1\u01c4"+
    "\127\0\1\u01c5\24\0\4\14\1\131\4\14\1\0\1\14"+
    "\17\0\2\14\2\0\2\14\1\0\1\14\1\132\1\14"+
    "\1\0\1\14\3\0\3\14\5\0\1\u01c6\27\14\6\0"+
    "\4\14\1\131\4\14\1\0\1\14\17\0\2\14\2\0"+
    "\2\14\1\0\1\14\1\132\1\14\1\0\1\14\3\0"+
    "\3\14\5\0\11\14\1\u01c7\16\14\6\0\4\14\1\131"+
    "\4\14\1\0\1\14\17\0\2\14\2\0\2\14\1\0"+
    "\1\14\1\132\1\14\1\0\1\14\3\0\3\14\5\0"+
    "\6\14\1\u01c8\21\14\6\0\4\14\1\131\4\14\1\0"+
    "\1\14\17\0\2\14\2\0\2\14\1\0\1\14\1\132"+
    "\1\14\1\0\1\14\3\0\3\14\5\0\6\14\1\u01c9"+
    "\21\14\6\0\4\14\1\131\4\14\1\0\1\14\17\0"+
    "\2\14\2\0\2\14\1\0\1\14\1\132\1\14\1\0"+
    "\1\14\3\0\3\14\5\0\3\14\1\u01ca\24\14\5\0"+
    "\15\u0168\1\u01cb\1\u0191\100\u0168\51\0\1\153\107\0\1\u01cc"+
    "\116\0\1\u01cd\140\0\1\u01ce\122\0\1\u01cf\27\0\4\14"+
    "\1\131\4\14\1\0\1\14\17\0\2\14\2\0\2\14"+
    "\1\0\1\14\1\132\1\14\1\0\1\14\3\0\3\14"+
    "\5\0\2\14\1\u01d0\25\14\6\0\4\14\1\131\4\14"+
    "\1\0\1\14\17\0\2\14\2\0\2\14\1\0\1\14"+
    "\1\132\1\14\1\0\1\14\3\0\3\14\5\0\6\14"+
    "\1\u01d1\21\14\6\0\4\14\1\131\2\14\1\u01d2\1\14"+
    "\1\0\1\14\17\0\2\14\2\0\2\14\1\0\1\14"+
    "\1\132\1\14\1\0\1\14\3\0\3\14\5\0\30\14"+
    "\56\0\1\347\116\0\1\352\131\0\1\u01d3\121\0\1\u01d4"+
    "\30\0\4\14\1\131\4\14\1\0\1\14\17\0\2\14"+
    "\2\0\2\14\1\0\1\14\1\132\1\14\1\0\1\14"+
    "\3\0\3\14\5\0\2\14\1\u01d5\25\14\6\0\4\14"+
    "\1\131\4\14\1\0\1\14\17\0\2\14\2\0\2\14"+
    "\1\0\1\14\1\132\1\14\1\0\1\14\3\0\3\14"+
    "\5\0\5\14\1\u01d6\22\14\72\0\1\u01d3\32\0\4\14"+
    "\1\131\4\14\1\0\1\14\17\0\2\14\2\0\2\14"+
    "\1\0\1\14\1\132\1\14\1\0\1\14\3\0\3\14"+
    "\5\0\3\14\1\u01d5\24\14\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28124];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\11\24\1\2\11\1\1\2\11\1\1\1\11"+
    "\23\1\2\11\4\1\2\11\5\1\1\11\5\1\3\0"+
    "\1\1\1\0\2\1\5\0\2\1\1\11\1\1\2\0"+
    "\2\11\1\1\1\0\10\1\1\11\6\1\2\0\1\11"+
    "\1\0\2\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\11\2\0\37\1\2\0\1\11\3\1\2\0\1\1"+
    "\1\11\3\0\1\11\2\1\2\0\1\1\1\11\1\1"+
    "\2\0\1\11\2\1\4\0\1\1\1\0\1\11\2\0"+
    "\2\1\2\0\5\1\2\0\1\1\1\0\1\1\1\0"+
    "\3\1\1\0\3\1\1\0\2\1\1\11\3\1\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\2\0\47\1\2\0"+
    "\1\1\1\0\1\11\1\0\1\1\1\11\1\1\1\0"+
    "\1\11\2\1\2\0\3\1\1\0\1\1\1\0\1\11"+
    "\1\0\2\1\1\0\1\1\1\0\4\1\10\0\43\1"+
    "\2\0\4\1\1\0\2\1\1\0\1\1\1\11\1\0"+
    "\1\1\5\0\6\1\1\0\24\1\2\0\1\1\2\0"+
    "\1\1\1\11\2\0\1\1\2\0\3\1\2\0\15\1"+
    "\1\11\1\0\1\1\3\0\1\1\2\0\12\1\1\0"+
    "\1\1\3\0\1\1\2\0\6\1\4\0\3\1\1\11"+
    "\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[470];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
    public _ScalaCoreLexer(boolean isScala3) {
      this((java.io.Reader) null);
      this.isScala3 = isScala3;
    }

    private static abstract class InterpolatedStringLevel {
      private int value = 0;

      public final boolean isRaw;

      public InterpolatedStringLevel(boolean isRaw) {
        this.isRaw = isRaw;
      }
      public InterpolatedStringLevel(CharSequence interpolator) {
        this(StringUtil.equal(interpolator, "raw", true));
      }

      public int get() {
        return value;
      }

      public boolean isZero() {
        return value == 0;
      }

      public void increase() {
        ++value;
      }

      public void decrease() {
        --value;
      }

      public abstract int getState();
    }

    private static class RegularLevel extends InterpolatedStringLevel {
      public RegularLevel(CharSequence intepolator) {
        super(intepolator);
      }
      public int getState() {
        return INSIDE_INTERPOLATED_STRING;
      }
    }

    private static class MultilineLevel extends InterpolatedStringLevel {
      public MultilineLevel(CharSequence intepolator) {
        super(intepolator);
      }
      public int getState() {
        return INSIDE_MULTI_LINE_INTERPOLATED_STRING;
      }
    }

    private boolean isScala3;

    //
    // NOTE: when adding new mutable state, do not forget to update `reset_ScalaLexer`
    //
    //to get id after $ in interpolated String
    private boolean haveIdInString = false;
    private boolean haveIdInMultilineString = false;
    // Currently opened interpolated Strings. Each int represents the number of the opened left structural braces in the String
    private Stack<InterpolatedStringLevel> nestedString = new Stack<>();
    private CharSequence lastSeenInterpolator = null;

    private boolean isInsideRawInterpolator() {
      return !nestedString.isEmpty() && nestedString.peek().isRaw;
    }

    public void resetCustom() {
      haveIdInString = false;
      haveIdInMultilineString = false;
      nestedString.clear();
      lastSeenInterpolator = null;
    }

    public boolean isInterpolatedStringState() {
        return isInsideInterpolatedString() ||
               haveIdInString ||
               haveIdInMultilineString ||
               yystate() == INSIDE_INTERPOLATED_STRING ||
               yystate() == INSIDE_MULTI_LINE_INTERPOLATED_STRING;
    }

    private boolean shouldProcessBracesForInterpolated() {
      return isInsideInterpolatedString();
    }
    private boolean isInsideInterpolatedString() {
      return !nestedString.isEmpty();
    }

    @NotNull
    private IElementType processOutsideString() {
      return processOutsideString(tINTERPOLATED_STRING_END);
    }

    private IElementType processOutsideString(IElementType typ) {
      if (isInsideInterpolatedString())
        nestedString.pop();
      yybegin(COMMON_STATE);
      return process(typ);
    }

    @NotNull
    private IElementType process(@NotNull final IElementType type){
      if ((type == tIDENTIFIER || type == kTHIS)) {
        if (haveIdInString) {
          haveIdInString = false;
          yybegin(INSIDE_INTERPOLATED_STRING);
        } else if (haveIdInMultilineString) {
          haveIdInMultilineString = false;
          yybegin(INSIDE_MULTI_LINE_INTERPOLATED_STRING);
        }
      }

      if (yystate() == YYINITIAL && type != tWHITE_SPACE_IN_LINE && type != tLBRACE && type != tLPARENTHESIS) {
        yybegin(COMMON_STATE);
      }

      // see comments to tINTERPOLATED_RAW_STRING and tINTERPOLATED_MULTILINE_RAW_STRING and
      final IElementType typeAdjusted;
      if (type == tINTERPOLATED_STRING && isInsideRawInterpolator())
        typeAdjusted =  tINTERPOLATED_RAW_STRING;
      else if (type == tINTERPOLATED_MULTILINE_STRING && isInsideRawInterpolator())
        typeAdjusted = tINTERPOLATED_MULTILINE_RAW_STRING;
      else
        typeAdjusted = type;

      return typeAdjusted;
    }

    @NotNull
    private IElementType processDollarInsideString(boolean isInsideMultiline) {
        final IElementType token;

        // TODO: remove this chech, this should always be false, cause $$ is handled by INTERPOLATED_STRING_ESCAPE pattern earlier
        boolean isDollarEscape = yycharat(1) == '$';
        if (isDollarEscape) {
            yypushback(yylength() - 2);
            token = tINTERPOLATED_STRING_ESCAPE;
        }
        else {
            if (isInsideMultiline) {
                haveIdInMultilineString = true;
            } else {
                haveIdInString = true;
            }
            yybegin(INJ_COMMON_STATE);
            yypushback(yylength() - 1);
            token = tINTERPOLATED_STRING_INJECTION;
        }
        return process(token);
    }

    private IElementType processScala3(@NotNull IElementType type) {
        return process(isScala3 ? type : tIDENTIFIER);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ScalaCoreLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  @Override
  public final int getTokenStart() {
    return zzStartRead;
  }

  @Override
  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  @Override
  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;

    // !!!! NOTE !!!!
    // When updating the skeleton, do not forget to add this method call
    resetCustom();

    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  @Override
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  @Override
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return process(tSTUB);
            } 
            // fall through
          case 107: break;
          case 2: 
            { return process(tIDENTIFIER);
            } 
            // fall through
          case 108: break;
          case 3: 
            { return process(Integer());
            } 
            // fall through
          case 109: break;
          case 4: 
            { return process(tUNDER);
            } 
            // fall through
          case 110: break;
          case 5: 
            { return process(tDOT);
            } 
            // fall through
          case 111: break;
          case 6: 
            { return process(tINNER_CLASS);
            } 
            // fall through
          case 112: break;
          case 7: 
            { return process(tCOLON);
            } 
            // fall through
          case 113: break;
          case 8: 
            { return process(tASSIGN);
            } 
            // fall through
          case 114: break;
          case 9: 
            { return process(tAT);
            } 
            // fall through
          case 115: break;
          case 10: 
            { yybegin(YYINITIAL);
                                            return process(tWHITE_SPACE_IN_LINE);
            } 
            // fall through
          case 116: break;
          case 11: 
            { return process(tWRONG_STRING);
            } 
            // fall through
          case 117: break;
          case 12: 
            { return process(tLSQBRACKET);
            } 
            // fall through
          case 118: break;
          case 13: 
            { if (shouldProcessBracesForInterpolated()) {
                                              nestedString.peek().increase();
                                            }

                                            return process(tLBRACE);
            } 
            // fall through
          case 119: break;
          case 14: 
            { return process(tRSQBRACKET);
            } 
            // fall through
          case 120: break;
          case 15: 
            { if (shouldProcessBracesForInterpolated()) {
                                              InterpolatedStringLevel level = nestedString.peek();
                                              level.decrease();

                                              if (level.isZero()) {
                                                yybegin(level.getState());
                                              }
                                            }
                                            return process(tRBRACE);
            } 
            // fall through
          case 121: break;
          case 16: 
            { return process(tLPARENTHESIS);
            } 
            // fall through
          case 122: break;
          case 17: 
            { return process(tRPARENTHESIS);
            } 
            // fall through
          case 123: break;
          case 18: 
            { return process(tFUNTYPE);
            } 
            // fall through
          case 124: break;
          case 19: 
            { return process(tCHOOSE);
            } 
            // fall through
          case 125: break;
          case 20: 
            { return process(tSEMICOLON);
            } 
            // fall through
          case 126: break;
          case 21: 
            { return process(tCOMMA);
            } 
            // fall through
          case 127: break;
          case 22: 
            { yypushback(yylength() - 1); // only push opening quote
    yybegin(INSIDE_INTERPOLATED_STRING);
    nestedString.push(new RegularLevel(lastSeenInterpolator));
    return process(tINTERPOLATED_STRING);
            } 
            // fall through
          case 128: break;
          case 23: 
            { return process(tINTERPOLATED_STRING);
            } 
            // fall through
          case 129: break;
          case 24: 
            { //don't add new lines to string itself, add empty error
    yypushback(yylength());
    return processOutsideString(tWRONG_LINE_BREAK_IN_STRING);
            } 
            // fall through
          case 130: break;
          case 25: 
            { return processOutsideString();
            } 
            // fall through
          case 131: break;
          case 26: 
            { return process(tINTERPOLATED_MULTILINE_STRING);
            } 
            // fall through
          case 132: break;
          case 27: 
            { int length = yylength();
  int number = length;
  for (int i = 1; i < length; i++) {
    if (yycharat(i) == '$') {
      number = i;
      break;
    }
  }

  yypushback(length - number);
  boolean isThis = "this".contentEquals(yytext());
  return process(isThis ? kTHIS : tIDENTIFIER);
            } 
            // fall through
          case 133: break;
          case 28: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 6;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 7;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { yybegin(WAIT_FOR_INTERPOLATED_STRING);
  // TODO: remove this check: looks like it's a dead code,
  //  yytext() should only return text that is matched by INTERPOLATED_STRING_ID, which can't end with \"\"
  if (endsWith(yytext(), "\"\"")) yypushback(2);
  lastSeenInterpolator = yytext();
  IElementType token = haveIdInString || haveIdInMultilineString ? tIDENTIFIER : tINTERPOLATED_STRING_ID;
  return process(token);
            } 
            // fall through
          case 134: break;
          case 29: 
            { return process(Long());
            } 
            // fall through
          case 135: break;
          case 30: 
            { return process(Double());
            } 
            // fall through
          case 136: break;
          case 31: 
            { return process(Float());
            } 
            // fall through
          case 137: break;
          case 32: 
            { return process(kDO);
            } 
            // fall through
          case 138: break;
          case 33: 
            { return process(tLINE_COMMENT);
            } 
            // fall through
          case 139: break;
          case 34: 
            { yybegin(COMMON_STATE);
    yypushback(yylength());
    return ScalaTokenTypesEx.SCALA_XML_CONTENT_START;
            } 
            // fall through
          case 140: break;
          case 35: 
            { return process(tUPPER_BOUND);
            } 
            // fall through
          case 141: break;
          case 36: 
            { return process(tVIEW);
            } 
            // fall through
          case 142: break;
          case 37: 
            { return process(tLOWER_BOUND);
            } 
            // fall through
          case 143: break;
          case 38: 
            { return process(tSYMBOL);
            } 
            // fall through
          case 144: break;
          case 39: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (isScala3) {
    return processScala3(QuoteStart());
  }
            } 
            // fall through
          case 145: break;
          case 40: 
            { return process(tSTRING);
            } 
            // fall through
          case 146: break;
          case 41: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (isScala3) {
    return processScala3(SpliceStart());
  }
            } 
            // fall through
          case 147: break;
          case 42: 
            { return process(kIF);
            } 
            // fall through
          case 148: break;
          case 43: 
            { if (isInsideRawInterpolator()) {
      yypushback(1); // from "\t" push "t" back, also if we have "\" we don't want " to be captured
    }
    return process(tINTERPOLATED_STRING);
            } 
            // fall through
          case 149: break;
          case 44: 
            { return processDollarInsideString(false);
            } 
            // fall through
          case 150: break;
          case 45: 
            { return process(tINTERPOLATED_STRING_ESCAPE);
            } 
            // fall through
          case 151: break;
          case 46: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(COMMON_STATE);
    return process(tINTERPOLATED_STRING_INJECTION);
            } 
            // fall through
          case 152: break;
          case 47: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return process(tINTERPOLATED_MULTILINE_STRING);
            } 
            // fall through
          case 153: break;
          case 48: 
            { return processDollarInsideString(true);
            } 
            // fall through
          case 154: break;
          case 49: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(COMMON_STATE);
      return process(tINTERPOLATED_STRING_INJECTION);
            } 
            // fall through
          case 155: break;
          case 50: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 8;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 9;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return process(Integer());
            } 
            // fall through
          case 156: break;
          case 51: 
            { return process(kDEF);
            } 
            // fall through
          case 157: break;
          case 52: 
            { return processScala3(TypeLambdaArrow());
            } 
            // fall through
          case 158: break;
          case 53: 
            { return processScala3(ImplicitFunctionArrow());
            } 
            // fall through
          case 159: break;
          case 54: 
            { return process(tCHAR);
            } 
            // fall through
          case 160: break;
          case 55: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return process(tCHAR);
            } 
            // fall through
          case 161: break;
          case 56: 
            { if (shouldProcessBracesForInterpolated()) {
                                              nestedString.peek().increase();
                                            }

                                            yypushback(yylength() - 1);
                                            yybegin(YYINITIAL);
                                            return process(tLBRACE);
            } 
            // fall through
          case 162: break;
          case 57: 
            { yypushback(yylength() - 1);
                                            yybegin(YYINITIAL);
                                            return process(tLPARENTHESIS);
            } 
            // fall through
          case 163: break;
          case 58: 
            { return process(kTRY);
            } 
            // fall through
          case 164: break;
          case 59: 
            { return process(kFOR);
            } 
            // fall through
          case 165: break;
          case 60: 
            { return process(NewKeyword());
            } 
            // fall through
          case 166: break;
          case 61: 
            { return process(kVAR);
            } 
            // fall through
          case 167: break;
          case 62: 
            { return process(kVAL);
            } 
            // fall through
          case 168: break;
          case 63: 
            { yybegin(INSIDE_MULTI_LINE_INTERPOLATED_STRING);
    nestedString.push(new MultilineLevel(lastSeenInterpolator));
    return process(tINTERPOLATED_MULTILINE_STRING);
            } 
            // fall through
          case 169: break;
          case 64: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return process(tINTERPOLATED_MULTILINE_STRING);
            } 
            // fall through
          case 170: break;
          case 65: 
            { return process(tSH_COMMENT);
            } 
            // fall through
          case 171: break;
          case 66: 
            { //for comments in interpolated strings
    return process(tBLOCK_COMMENT);
            } 
            // fall through
          case 172: break;
          case 67: 
            { return process(kTRUE);
            } 
            // fall through
          case 173: break;
          case 68: 
            { return processScala3(ThenKeyword());
            } 
            // fall through
          case 174: break;
          case 69: 
            { return process(kTHIS);
            } 
            // fall through
          case 175: break;
          case 70: 
            { return process(kTYPE);
            } 
            // fall through
          case 176: break;
          case 71: 
            { return process(kCASE);
            } 
            // fall through
          case 177: break;
          case 72: 
            { return process(kELSE);
            } 
            // fall through
          case 178: break;
          case 73: 
            { return processScala3(EnumKeyword());
            } 
            // fall through
          case 179: break;
          case 74: 
            { return process(kLAZY);
            } 
            // fall through
          case 180: break;
          case 75: 
            { return process(kNULL);
            } 
            // fall through
          case 181: break;
          case 76: 
            { return process(kWITH);
            } 
            // fall through
          case 182: break;
          case 77: 
            { yypushback(yylength() - 1);
    return process(tINTERPOLATED_MULTILINE_STRING);
            } 
            // fall through
          case 183: break;
          case 78: 
            { //for comments in interpolated strings
    return process(ScalaDocElementTypes.SCALA_DOC_COMMENT);
            } 
            // fall through
          case 184: break;
          case 79: 
            { return process(kSUPER);
            } 
            // fall through
          case 185: break;
          case 80: 
            { return process(TraitKeyword());
            } 
            // fall through
          case 186: break;
          case 81: 
            { return process(kTHROW);
            } 
            // fall through
          case 187: break;
          case 82: 
            { return process(kCATCH);
            } 
            // fall through
          case 188: break;
          case 83: 
            { return process(ClassKeyword());
            } 
            // fall through
          case 189: break;
          case 84: 
            { return process(kFALSE);
            } 
            // fall through
          case 190: break;
          case 85: 
            { return process(kFINAL);
            } 
            // fall through
          case 191: break;
          case 86: 
            { return process(kMATCH);
            } 
            // fall through
          case 192: break;
          case 87: 
            { return process(kMACRO);
            } 
            // fall through
          case 193: break;
          case 88: 
            { return process(kYIELD);
            } 
            // fall through
          case 194: break;
          case 89: 
            { return processScala3(GivenKeyword());
            } 
            // fall through
          case 195: break;
          case 90: 
            { return process(kWHILE);
            } 
            // fall through
          case 196: break;
          case 91: 
            { return process(tMULTILINE_STRING);
            } 
            // fall through
          case 197: break;
          case 92: 
            { return process(kSEALED);
            } 
            // fall through
          case 198: break;
          case 93: 
            { return process(kRETURN);
            } 
            // fall through
          case 199: break;
          case 94: 
            { return processScala3(ExportKeyword());
            } 
            // fall through
          case 200: break;
          case 95: 
            { return process(ObjectKeyword());
            } 
            // fall through
          case 201: break;
          case 96: 
            { return process(kIMPORT);
            } 
            // fall through
          case 202: break;
          case 97: 
            { return process(kEXTENDS);
            } 
            // fall through
          case 203: break;
          case 98: 
            { return process(kFOR_SOME);
            } 
            // fall through
          case 204: break;
          case 99: 
            { return process(kFINALLY);
            } 
            // fall through
          case 205: break;
          case 100: 
            { return process(kPACKAGE);
            } 
            // fall through
          case 206: break;
          case 101: 
            { return process(kPRIVATE);
            } 
            // fall through
          case 207: break;
          case 102: 
            { return process(kABSTRACT);
            } 
            // fall through
          case 208: break;
          case 103: 
            { return process(kOVERRIDE);
            } 
            // fall through
          case 209: break;
          case 104: 
            { return process(kIMPLICIT);
            } 
            // fall through
          case 210: break;
          case 105: 
            { return process(kPROTECTED);
            } 
            // fall through
          case 211: break;
          case 106: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return process(kCASE);
            } 
            // fall through
          case 212: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
