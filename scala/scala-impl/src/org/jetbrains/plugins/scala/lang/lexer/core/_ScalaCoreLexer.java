/* The following code was generated by JFlex 1.4.3 on 6/22/21, 6:05 PM */

package org.jetbrains.plugins.scala.lang.lexer.core;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypesEx;
import org.jetbrains.plugins.scala.lang.scaladoc.parser.ScalaDocElementTypes;
import com.intellij.openapi.util.text.StringUtil;

import static com.intellij.openapi.util.text.StringUtil.endsWith;
import static org.jetbrains.plugins.scala.lang.lexer.ScalaTokenType.*;
import static org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/22/21, 6:05 PM from the specification file
 * <tt>scala.flex</tt>
 */
public class _ScalaCoreLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int INJ_COMMON_STATE = 10;
  public static final int INSIDE_MULTI_LINE_INTERPOLATED_STRING = 8;
  public static final int WAIT_FOR_INTERPOLATED_STRING = 4;
  public static final int INSIDE_INTERPOLATED_STRING = 6;
  public static final int COMMON_STATE = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\31\1\44\1\32\1\0\1\44\1\41\16\31\4\0\1\44\1\16"+
    "\1\37\1\17\1\40\1\116\1\20\1\35\1\56\1\57\1\21\1\22"+
    "\1\120\1\14\1\12\1\26\1\2\1\112\1\111\1\33\4\6\1\3"+
    "\1\114\1\23\1\117\1\45\1\60\1\27\1\46\1\24\1\36\1\7"+
    "\1\50\1\51\1\13\1\11\5\30\1\1\6\30\1\103\1\52\3\30"+
    "\1\4\2\30\1\47\1\25\1\54\1\20\1\5\1\15\1\61\1\62"+
    "\1\66\1\10\1\67\1\74\1\104\1\73\1\101\1\72\1\110\1\70"+
    "\1\76\1\75\1\71\1\100\1\30\1\65\1\63\1\64\1\34\1\105"+
    "\1\107\1\77\1\102\1\106\1\53\1\20\1\55\1\20\6\31\1\42"+
    "\32\31\2\0\4\30\1\20\2\0\1\20\1\30\1\0\1\20\1\31"+
    "\1\20\1\0\1\20\1\20\3\0\1\30\4\0\1\30\5\0\27\30"+
    "\1\20\37\30\1\20\u01ca\30\4\0\14\30\16\0\5\30\7\0\1\30"+
    "\1\0\1\30\21\0\160\31\5\30\1\0\2\30\2\0\4\30\1\0"+
    "\1\30\6\0\1\30\1\0\3\30\1\0\1\30\1\0\24\30\1\0"+
    "\123\30\1\20\213\30\1\20\5\31\2\0\246\30\1\0\46\30\2\0"+
    "\1\30\7\0\47\30\5\0\2\20\1\30\1\0\55\31\1\0\1\31"+
    "\1\0\2\31\1\0\2\31\1\0\1\31\10\0\33\30\5\0\3\30"+
    "\15\0\6\31\3\20\2\0\1\30\2\0\2\20\13\31\1\0\1\31"+
    "\3\0\53\30\37\31\4\0\2\30\1\31\143\30\1\0\1\30\10\31"+
    "\1\20\6\31\2\30\2\31\1\20\4\31\2\30\12\31\3\30\2\20"+
    "\1\30\17\0\1\31\1\30\1\31\36\30\33\31\2\0\131\30\13\31"+
    "\1\30\16\0\12\31\41\30\11\31\2\30\1\20\3\0\1\30\5\0"+
    "\26\30\4\31\1\30\11\31\1\30\3\31\1\30\5\31\22\0\31\30"+
    "\3\31\4\0\13\30\65\0\25\30\1\0\10\30\26\0\60\31\66\30"+
    "\3\31\1\30\22\31\1\30\7\31\12\30\2\31\2\0\12\31\1\0"+
    "\20\30\3\31\1\0\10\30\2\0\2\30\2\0\26\30\1\0\7\30"+
    "\1\0\1\30\3\0\4\30\2\0\1\31\1\30\7\31\2\0\2\31"+
    "\2\0\3\31\1\30\10\0\1\31\4\0\2\30\1\0\3\30\2\31"+
    "\2\0\12\31\4\30\6\0\1\20\2\30\4\0\3\31\1\0\6\30"+
    "\4\0\2\30\2\0\26\30\1\0\7\30\1\0\2\30\1\0\2\30"+
    "\1\0\2\30\2\0\1\31\1\0\5\31\4\0\2\31\2\0\3\31"+
    "\3\0\1\31\7\0\4\30\1\0\1\30\7\0\14\31\3\30\1\31"+
    "\13\0\3\31\1\0\11\30\1\0\3\30\1\0\26\30\1\0\7\30"+
    "\1\0\2\30\1\0\5\30\2\0\1\31\1\30\10\31\1\0\3\31"+
    "\1\0\3\31\2\0\1\30\17\0\2\30\2\31\2\0\12\31\1\0"+
    "\1\30\7\0\1\30\6\31\1\0\3\31\1\0\10\30\2\0\2\30"+
    "\2\0\26\30\1\0\7\30\1\0\2\30\1\0\5\30\2\0\1\31"+
    "\1\30\7\31\2\0\2\31\2\0\3\31\10\0\2\31\4\0\2\30"+
    "\1\0\3\30\2\31\2\0\12\31\1\20\1\30\20\0\1\31\1\30"+
    "\1\0\6\30\3\0\3\30\1\0\4\30\3\0\2\30\1\0\1\30"+
    "\1\0\2\30\3\0\2\30\3\0\3\30\3\0\14\30\4\0\5\31"+
    "\3\0\3\31\1\0\4\31\2\0\1\30\6\0\1\31\16\0\12\31"+
    "\3\0\6\20\1\30\1\20\5\0\4\31\1\0\10\30\1\0\3\30"+
    "\1\0\27\30\1\0\20\30\3\0\1\30\7\31\1\0\3\31\1\0"+
    "\4\31\7\0\2\31\1\0\3\30\5\0\2\30\2\31\2\0\12\31"+
    "\17\0\1\20\1\30\3\31\1\0\10\30\1\0\3\30\1\0\27\30"+
    "\1\0\12\30\1\0\5\30\2\0\1\31\1\30\7\31\1\0\3\31"+
    "\1\0\4\31\7\0\2\31\7\0\1\30\1\0\2\30\2\31\2\0"+
    "\12\31\1\0\2\30\15\0\4\31\1\0\10\30\1\0\3\30\1\0"+
    "\51\30\2\31\1\30\7\31\1\0\3\31\1\0\4\31\1\30\1\20"+
    "\4\0\3\30\1\31\7\0\3\30\2\31\2\0\12\31\11\0\1\20"+
    "\6\30\2\0\2\31\1\0\22\30\3\0\30\30\1\0\11\30\1\0"+
    "\1\30\2\0\7\30\3\0\1\31\4\0\6\31\1\0\1\31\1\0"+
    "\10\31\6\0\12\31\2\0\2\31\15\0\60\30\1\31\2\30\7\31"+
    "\4\0\10\30\10\31\1\0\12\31\47\0\2\30\1\0\1\30\2\0"+
    "\2\30\1\0\1\30\2\0\1\30\6\0\4\30\1\0\7\30\1\0"+
    "\3\30\1\0\1\30\1\0\1\30\2\0\2\30\1\0\4\30\1\31"+
    "\2\30\6\31\1\0\2\31\1\30\2\0\5\30\1\0\1\30\1\0"+
    "\6\31\2\0\12\31\2\0\4\30\40\0\1\30\3\20\17\0\1\20"+
    "\1\0\3\20\2\31\6\20\12\31\12\0\1\20\1\31\1\20\1\31"+
    "\1\20\1\31\4\0\2\31\10\30\1\0\44\30\4\0\24\31\1\0"+
    "\2\31\5\30\13\31\1\0\44\31\1\0\10\20\1\31\6\20\1\0"+
    "\2\20\5\0\4\20\47\0\53\30\24\31\1\30\12\31\6\0\6\30"+
    "\4\31\4\30\3\31\1\30\3\31\2\30\7\31\3\30\4\31\15\30"+
    "\14\31\1\30\17\31\2\20\46\30\1\0\1\30\5\0\1\30\2\0"+
    "\53\30\1\0\u014d\30\1\0\4\30\2\0\7\30\1\0\1\30\1\0"+
    "\4\30\2\0\51\30\1\0\4\30\2\0\41\30\1\0\4\30\2\0"+
    "\7\30\1\0\1\30\1\0\4\30\2\0\17\30\1\0\71\30\1\0"+
    "\4\30\2\0\103\30\2\0\3\31\40\0\20\30\12\20\6\0\126\30"+
    "\2\0\6\30\3\0\u026c\30\2\0\21\30\1\0\32\30\5\0\113\30"+
    "\3\0\13\30\7\0\15\30\1\0\4\30\3\31\13\0\22\30\3\31"+
    "\13\0\22\30\2\31\14\0\15\30\1\0\3\30\1\0\2\31\14\0"+
    "\64\30\40\31\3\0\1\30\3\0\2\30\1\31\2\0\12\31\41\0"+
    "\4\31\1\0\12\31\6\0\130\30\10\0\5\30\2\31\42\30\1\31"+
    "\1\30\5\0\106\30\12\0\37\30\1\0\14\31\4\0\14\31\4\0"+
    "\1\20\5\0\12\31\36\30\2\0\5\30\13\0\54\30\4\0\32\30"+
    "\6\0\12\31\4\0\42\20\27\30\5\31\4\0\65\30\12\31\1\0"+
    "\35\31\2\0\13\31\6\0\12\31\15\0\1\30\10\0\16\31\102\0"+
    "\5\31\57\30\21\31\7\30\4\0\12\31\7\0\12\20\11\31\11\20"+
    "\3\0\3\31\36\30\15\31\2\30\12\31\54\30\16\31\14\0\44\30"+
    "\24\31\10\0\12\31\3\0\3\30\12\31\44\30\2\0\11\30\107\0"+
    "\3\31\1\0\25\31\4\30\1\31\4\30\3\31\2\30\3\31\6\0"+
    "\300\30\72\31\1\0\5\31\u0116\30\2\0\6\30\2\0\46\30\2\0"+
    "\6\30\2\0\10\30\1\0\1\30\1\0\1\30\1\0\1\30\1\0"+
    "\37\30\2\0\65\30\1\0\7\30\1\0\1\30\3\0\3\30\1\0"+
    "\7\30\3\0\4\30\2\0\6\30\4\0\15\30\5\0\3\30\1\0"+
    "\7\30\16\0\5\31\30\0\1\43\1\43\5\31\20\0\2\30\3\0"+
    "\1\20\15\0\1\20\1\0\1\30\13\0\5\31\1\0\12\31\1\0"+
    "\1\30\10\0\3\20\2\0\1\30\12\0\3\20\3\0\15\30\3\0"+
    "\40\30\20\0\15\31\4\0\1\31\3\0\14\31\17\0\2\20\1\30"+
    "\4\20\1\30\2\20\12\30\1\20\1\30\2\20\1\20\5\30\6\20"+
    "\1\30\1\20\1\30\1\20\1\30\1\20\4\30\1\20\13\30\2\20"+
    "\4\30\5\20\5\30\1\20\1\20\2\20\1\30\1\20\20\0\51\30"+
    "\1\0\2\20\4\0\1\115\4\20\5\20\2\20\4\20\1\20\2\20"+
    "\1\20\2\20\1\20\7\20\1\20\37\20\2\20\2\20\1\113\1\20"+
    "\1\20\37\20\u010c\20\10\20\4\0\24\20\2\20\7\20\2\0\121\20"+
    "\1\20\36\20\31\20\50\20\6\20\105\20\31\0\13\20\121\0\116\20"+
    "\26\0\267\20\1\20\11\20\1\20\66\20\10\20\157\20\1\20\44\20"+
    "\1\20\323\20\54\0\54\20\5\20\2\0\37\20\12\0\20\20\u0100\20"+
    "\203\20\26\0\77\20\4\0\40\20\2\0\u0102\20\60\20\25\20\2\20"+
    "\6\20\47\20\2\0\40\20\2\0\42\20\3\0\14\20\1\0\11\20"+
    "\31\0\4\20\20\0\57\30\1\0\57\30\1\0\205\30\6\20\4\30"+
    "\3\31\2\30\14\0\46\30\1\0\1\30\5\0\1\30\2\0\70\30"+
    "\7\0\1\30\17\0\1\31\27\30\11\0\7\30\1\0\7\30\1\0"+
    "\7\30\1\0\7\30\1\0\7\30\1\0\7\30\1\0\7\30\1\0"+
    "\7\30\1\0\40\31\57\0\1\30\120\0\32\20\1\0\131\20\14\0"+
    "\326\20\32\0\14\20\10\0\1\20\3\30\12\0\2\20\14\0\1\20"+
    "\11\30\6\31\1\0\5\30\2\20\5\30\1\0\2\20\1\0\126\30"+
    "\2\0\2\31\2\0\3\30\1\0\132\30\1\0\4\30\5\0\52\30"+
    "\2\0\136\30\1\0\2\20\4\0\12\20\33\30\5\0\44\20\14\0"+
    "\20\30\37\20\13\0\36\20\10\0\1\20\17\0\40\20\12\0\47\20"+
    "\17\0\u0140\20\u19b6\30\12\0\100\20\u51eb\30\25\0\u048d\30\3\0\67\20"+
    "\11\0\56\30\2\0\u010d\30\3\0\20\30\12\31\2\30\24\0\57\30"+
    "\1\31\4\0\12\31\1\0\37\30\2\31\120\30\2\31\45\0\11\30"+
    "\2\0\147\30\2\0\44\30\1\0\10\30\77\0\13\30\1\31\3\30"+
    "\1\31\4\30\1\31\27\30\5\31\4\20\12\0\2\20\1\30\1\20"+
    "\6\0\64\30\14\0\2\31\62\30\22\31\12\0\12\31\6\0\22\31"+
    "\6\30\3\0\1\30\1\0\1\30\2\0\12\31\34\30\10\31\2\0"+
    "\27\30\15\31\14\0\35\30\3\0\4\31\57\30\16\31\16\0\1\30"+
    "\12\31\6\0\5\30\1\31\12\30\12\31\5\30\1\0\51\30\16\31"+
    "\11\0\3\30\1\31\10\30\2\31\2\0\12\31\6\0\27\30\3\20"+
    "\1\30\3\31\62\30\1\31\1\30\3\31\2\30\2\31\5\30\2\31"+
    "\1\30\1\31\1\30\30\0\3\30\2\0\13\30\5\31\2\0\3\30"+
    "\2\31\12\0\6\30\2\0\6\30\2\0\6\30\11\0\7\30\1\0"+
    "\7\30\1\0\53\30\1\0\12\30\12\0\163\30\10\31\1\0\2\31"+
    "\2\0\12\31\6\0\u2ba4\30\14\0\27\30\4\0\61\30\u2104\0\u016e\30"+
    "\2\0\152\30\46\0\7\30\14\0\5\30\5\0\1\30\1\31\12\30"+
    "\1\20\15\30\1\0\5\30\1\0\1\30\1\0\2\30\1\0\2\30"+
    "\1\0\154\30\41\0\u016b\30\22\0\100\30\2\0\66\30\50\0\15\30"+
    "\1\20\2\0\20\31\20\0\20\31\3\0\2\30\30\0\3\30\22\0"+
    "\1\20\1\0\3\20\2\0\1\30\6\0\5\30\1\0\207\30\2\0"+
    "\1\31\4\0\1\30\6\0\1\20\4\0\12\31\2\0\3\20\2\0"+
    "\32\30\4\0\1\30\1\0\32\30\1\0\1\20\1\0\1\20\7\0"+
    "\131\30\3\0\6\30\2\0\6\30\2\0\6\30\2\0\3\30\3\0"+
    "\2\30\1\20\1\0\1\20\2\30\1\0\1\20\4\20\2\20\12\0"+
    "\3\31\2\20\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\2\3\1\4\1\2\1\5\1\2"+
    "\1\1\1\6\1\7\1\10\3\2\1\11\1\1\1\12"+
    "\1\2\1\11\2\2\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\21\2\1\22\1\23\1\24\1\25\1\2"+
    "\1\26\1\27\1\12\1\30\1\31\2\12\1\32\3\12"+
    "\2\33\1\12\14\0\1\2\1\34\1\35\1\3\2\0"+
    "\1\36\1\37\1\36\1\0\1\2\1\40\1\36\1\0"+
    "\1\2\1\0\2\2\1\0\1\2\1\41\1\42\1\0"+
    "\3\43\1\0\1\44\1\12\1\0\1\45\1\46\1\47"+
    "\1\2\1\50\1\2\1\51\1\2\2\0\1\22\27\2"+
    "\1\52\6\2\1\26\2\0\2\53\2\54\1\0\1\55"+
    "\1\56\3\0\1\57\2\60\1\0\1\55\1\61\1\33"+
    "\1\0\1\33\14\0\1\2\1\34\2\0\1\36\1\3"+
    "\3\62\1\0\1\36\1\0\1\63\1\2\1\0\2\2"+
    "\2\0\2\2\1\64\3\43\3\0\1\65\1\45\1\0"+
    "\1\2\1\0\1\66\1\67\2\0\1\70\2\0\1\71"+
    "\5\2\1\72\20\2\1\73\2\2\1\74\10\2\1\75"+
    "\1\76\2\2\1\77\2\0\2\54\2\0\1\31\1\100"+
    "\2\60\1\0\1\33\5\0\1\34\1\0\2\62\2\0"+
    "\1\101\1\2\2\0\1\2\1\0\2\2\1\102\3\0"+
    "\1\47\5\0\3\2\1\103\2\2\1\104\1\105\1\106"+
    "\1\2\1\107\2\2\1\110\1\111\2\2\1\112\5\2"+
    "\1\113\12\2\1\114\2\0\1\54\1\115\1\60\2\0"+
    "\1\62\1\101\1\0\1\2\2\0\1\102\1\0\1\116"+
    "\5\0\1\2\1\117\1\2\1\120\1\121\1\2\1\0"+
    "\1\2\1\122\1\123\4\2\1\124\1\2\1\125\1\126"+
    "\1\127\5\2\1\130\1\131\1\132\5\0\1\2\1\22"+
    "\1\23\1\116\1\0\1\133\3\0\1\2\1\134\1\135"+
    "\2\0\3\2\1\136\1\137\7\2\1\140\1\27\1\0"+
    "\1\2\3\0\1\2\2\0\2\2\1\141\1\2\1\142"+
    "\1\143\1\144\1\2\1\145\1\2\1\0\1\101\3\0"+
    "\1\146\2\0\2\2\1\147\1\2\1\150\1\101\4\0"+
    "\2\2\1\151\1\152\1\0\1\152\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[472];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\121\0\242\0\363\0\u0144\0\u0195\0\u01e6\0\u0237"+
    "\0\u0288\0\u02d9\0\u032a\0\u037b\0\u03cc\0\u041d\0\u037b\0\u046e"+
    "\0\u04bf\0\u0510\0\u0561\0\u05b2\0\u0603\0\u0510\0\u0654\0\u06a5"+
    "\0\u06f6\0\u0747\0\u0798\0\u07e9\0\u083a\0\u032a\0\u088b\0\u08dc"+
    "\0\u032a\0\u092d\0\u032a\0\u032a\0\u097e\0\u032a\0\u09cf\0\u0a20"+
    "\0\u0a71\0\u0ac2\0\u0b13\0\u0b64\0\u0bb5\0\u0c06\0\u0c57\0\u0ca8"+
    "\0\u0cf9\0\u0d4a\0\u0d9b\0\u0dec\0\u0e3d\0\u0e8e\0\u0edf\0\u0f30"+
    "\0\u0510\0\u0510\0\u032a\0\u032a\0\u0f81\0\u0fd2\0\u1023\0\u1074"+
    "\0\u032a\0\u032a\0\u10c5\0\u1116\0\u1167\0\u11b8\0\u1209\0\u032a"+
    "\0\u125a\0\u12ab\0\u12fc\0\u134d\0\u139e\0\u13ef\0\u1440\0\u1491"+
    "\0\u14e2\0\u1533\0\u1584\0\u15d5\0\u1626\0\u1677\0\u16c8\0\u1719"+
    "\0\u176a\0\u032a\0\u17bb\0\u180c\0\u185d\0\u032a\0\u032a\0\u18ae"+
    "\0\u18ff\0\u1950\0\u037b\0\u19a1\0\u0561\0\u032a\0\u19f2\0\u1a43"+
    "\0\u1a94\0\u1ae5\0\u1b36\0\u1b87\0\u0510\0\u1bd8\0\u1c29\0\u1c7a"+
    "\0\u1ccb\0\u1d1c\0\u1bd8\0\u1d6d\0\u1dbe\0\u1e0f\0\u032a\0\u032a"+
    "\0\u1e60\0\u0510\0\u1eb1\0\u0510\0\u1f02\0\u1f53\0\u1fa4\0\u1ff5"+
    "\0\u2046\0\u2097\0\u20e8\0\u2139\0\u218a\0\u21db\0\u222c\0\u227d"+
    "\0\u22ce\0\u231f\0\u2370\0\u23c1\0\u2412\0\u2463\0\u24b4\0\u2505"+
    "\0\u2556\0\u25a7\0\u25f8\0\u2649\0\u269a\0\u26eb\0\u273c\0\u037b"+
    "\0\u278d\0\u27de\0\u282f\0\u2880\0\u28d1\0\u2922\0\u2973\0\u29c4"+
    "\0\u2a15\0\u032a\0\u2a66\0\u2ab7\0\u2b08\0\u2b59\0\u2ab7\0\u032a"+
    "\0\u1116\0\u2baa\0\u2bfb\0\u032a\0\u2c4c\0\u2c9d\0\u2cee\0\u2c4c"+
    "\0\u032a\0\u2d3f\0\u12fc\0\u032a\0\u2d90\0\u2de1\0\u2e32\0\u2e83"+
    "\0\u2ed4\0\u2f25\0\u2f76\0\u2fc7\0\u3018\0\u032a\0\u3069\0\u30ba"+
    "\0\u310b\0\u315c\0\u31ad\0\u31fe\0\u324f\0\u32a0\0\u32f1\0\u3342"+
    "\0\u3393\0\u33e4\0\u3435\0\u3486\0\u037b\0\u0561\0\u34d7\0\u3528"+
    "\0\u3579\0\u35ca\0\u361b\0\u366c\0\u36bd\0\u032a\0\u370e\0\u375f"+
    "\0\u37b0\0\u3801\0\u3852\0\u38a3\0\u032a\0\u032a\0\u38f4\0\u3945"+
    "\0\u3996\0\u0510\0\u032a\0\u39e7\0\u3a38\0\u032a\0\u3a89\0\u3ada"+
    "\0\u0510\0\u3b2b\0\u3b7c\0\u3bcd\0\u3c1e\0\u3c6f\0\u037b\0\u3cc0"+
    "\0\u3d11\0\u3d62\0\u3db3\0\u3e04\0\u3e55\0\u3ea6\0\u3ef7\0\u3f48"+
    "\0\u3f99\0\u3fea\0\u403b\0\u408c\0\u40dd\0\u412e\0\u417f\0\u41d0"+
    "\0\u4221\0\u4272\0\u037b\0\u42c3\0\u4314\0\u4365\0\u43b6\0\u4407"+
    "\0\u4458\0\u44a9\0\u44fa\0\u037b\0\u037b\0\u454b\0\u459c\0\u45ed"+
    "\0\u463e\0\u2a66\0\u468f\0\u032a\0\u46e0\0\u4731\0\u4782\0\u032a"+
    "\0\u47d3\0\u032a\0\u4824\0\u12fc\0\u4875\0\u48c6\0\u4917\0\u14e2"+
    "\0\u3018\0\u4968\0\u49b9\0\u4a0a\0\u032a\0\u4a5b\0\u4aac\0\u1a43"+
    "\0\u4afd\0\u4b4e\0\u4b9f\0\u4bf0\0\u4c41\0\u4c92\0\u4ce3\0\u0510"+
    "\0\u4d34\0\u4d85\0\u4dd6\0\u0510\0\u4e27\0\u4e78\0\u4ec9\0\u4f1a"+
    "\0\u4f6b\0\u4fbc\0\u500d\0\u505e\0\u037b\0\u50af\0\u5100\0\u037b"+
    "\0\u037b\0\u037b\0\u5151\0\u51a2\0\u51f3\0\u5244\0\u037b\0\u037b"+
    "\0\u5295\0\u52e6\0\u037b\0\u5337\0\u5388\0\u53d9\0\u542a\0\u547b"+
    "\0\u037b\0\u54cc\0\u551d\0\u556e\0\u55bf\0\u5610\0\u5661\0\u56b2"+
    "\0\u5703\0\u5754\0\u57a5\0\u037b\0\u57f6\0\u5847\0\u2b59\0\u4782"+
    "\0\u2cee\0\u5898\0\u58e9\0\u33e4\0\u34d7\0\u593a\0\u598b\0\u59dc"+
    "\0\u5a2d\0\u032a\0\u5a7e\0\u0510\0\u5acf\0\u5b20\0\u5b71\0\u5bc2"+
    "\0\u5c13\0\u5c64\0\u037b\0\u5cb5\0\u037b\0\u037b\0\u5d06\0\u5d57"+
    "\0\u5da8\0\u037b\0\u037b\0\u5df9\0\u5e4a\0\u5e9b\0\u5eec\0\u037b"+
    "\0\u5f3d\0\u5f8e\0\u037b\0\u037b\0\u5fdf\0\u6030\0\u6081\0\u60d2"+
    "\0\u6123\0\u037b\0\u037b\0\u037b\0\u6174\0\u61c5\0\u2f76\0\u6216"+
    "\0\u6267\0\u62b8\0\u032a\0\u032a\0\u032a\0\u6309\0\u635a\0\u63ab"+
    "\0\u63fc\0\u644d\0\u649e\0\u037b\0\u037b\0\u64ef\0\u6540\0\u6591"+
    "\0\u65e2\0\u6633\0\u037b\0\u037b\0\u6684\0\u66d5\0\u6726\0\u6777"+
    "\0\u67c8\0\u6819\0\u686a\0\u037b\0\u032a\0\u68bb\0\u690c\0\u695d"+
    "\0\u69ae\0\u69ff\0\u6a50\0\u6aa1\0\u6af2\0\u6b43\0\u6b94\0\u037b"+
    "\0\u6be5\0\u037b\0\u037b\0\u037b\0\u6c36\0\u037b\0\u6c87\0\u6cd8"+
    "\0\u4afd\0\u6d29\0\u6d7a\0\u6dcb\0\u037b\0\u6e1c\0\u6e6d\0\u6ebe"+
    "\0\u6f0f\0\u037b\0\u6f60\0\u037b\0\u593a\0\u6fb1\0\u7002\0\u7053"+
    "\0\u70a4\0\u70f5\0\u7146\0\u037b\0\u032a\0\u7197\0\u037b\0\u71e8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[472];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\15\1\16\1\14\1\17\1\16\1\14"+
    "\1\20\1\14\1\21\1\14\1\22\1\23\1\22\1\24"+
    "\3\22\1\25\1\26\1\27\1\30\1\31\1\14\1\13"+
    "\1\32\1\16\1\14\1\33\1\14\1\34\1\35\3\32"+
    "\1\36\1\37\1\40\1\41\3\14\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\14\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\2\14\1\60\1\61\1\62"+
    "\1\14\1\63\1\64\1\65\1\14\1\66\1\67\1\14"+
    "\1\70\1\14\2\16\1\71\1\16\1\72\1\22\1\73"+
    "\1\74\1\13\1\14\1\15\1\16\1\14\1\17\1\16"+
    "\1\14\1\20\1\14\1\21\1\14\1\22\1\23\1\22"+
    "\1\24\3\22\1\25\1\26\1\27\1\30\1\31\1\14"+
    "\1\13\1\32\1\16\1\14\1\33\1\14\1\34\1\35"+
    "\3\32\1\36\1\75\1\40\1\41\3\14\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\14\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\2\14\1\60\1\61"+
    "\1\62\1\14\1\63\1\64\1\65\1\14\1\66\1\67"+
    "\1\14\1\70\1\14\2\16\1\71\1\16\1\72\1\22"+
    "\1\73\1\74\37\0\1\76\61\0\25\77\1\100\4\77"+
    "\1\101\4\77\1\102\1\103\1\104\57\77\37\105\1\106"+
    "\1\107\60\105\1\110\1\111\2\110\2\111\1\110\3\111"+
    "\1\110\1\111\1\112\1\113\12\112\1\111\3\110\1\111"+
    "\1\110\1\111\1\110\1\111\4\110\2\112\1\110\3\111"+
    "\5\110\1\112\30\111\2\110\1\112\1\110\2\112\2\110"+
    "\1\0\1\114\2\0\2\114\1\0\3\114\1\0\1\114"+
    "\14\0\1\114\3\0\1\114\1\0\1\114\1\0\1\114"+
    "\7\0\3\114\6\0\30\114\10\0\25\115\1\116\4\115"+
    "\1\117\4\115\1\120\1\121\1\117\57\115\2\0\1\122"+
    "\1\123\2\0\1\123\24\0\1\123\55\0\2\123\1\0"+
    "\1\123\5\0\1\124\2\125\2\124\1\125\3\124\1\0"+
    "\1\124\1\126\1\127\12\126\1\124\1\125\1\0\1\125"+
    "\1\124\1\0\1\124\1\0\1\124\1\0\1\125\2\0"+
    "\2\126\1\0\3\124\5\0\1\126\30\124\2\125\1\126"+
    "\1\125\2\126\124\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\14\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\32\14\1\0\1\14"+
    "\5\0\1\132\1\133\1\134\1\135\2\133\1\0\1\136"+
    "\1\137\1\140\1\141\17\0\1\133\15\0\1\136\15\0"+
    "\1\141\1\132\3\0\1\137\2\0\1\135\11\0\2\133"+
    "\1\0\1\134\5\0\1\132\2\16\1\0\2\16\1\0"+
    "\1\136\1\137\1\140\1\141\17\0\1\16\15\0\1\136"+
    "\15\0\1\141\1\132\3\0\1\137\14\0\2\16\1\0"+
    "\1\16\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\14\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\6\14\1\142\1\14\1\143"+
    "\21\14\1\0\1\14\6\0\2\144\2\0\1\144\24\0"+
    "\1\144\55\0\2\144\1\0\1\144\20\0\1\22\1\0"+
    "\12\22\15\0\2\22\11\0\1\22\32\0\1\22\1\0"+
    "\2\22\2\0\15\145\1\146\7\145\1\147\4\145\1\0"+
    "\6\145\3\0\55\145\14\0\1\22\1\0\1\150\11\22"+
    "\15\0\2\22\11\0\1\22\32\0\1\22\1\0\2\22"+
    "\16\0\1\22\1\0\5\22\1\151\4\22\15\0\2\22"+
    "\11\0\1\22\32\0\1\22\1\0\2\22\16\0\1\22"+
    "\1\0\12\22\4\0\1\152\10\0\2\22\11\0\1\22"+
    "\32\0\1\22\1\0\2\22\16\0\1\22\1\0\3\22"+
    "\1\153\4\22\1\154\1\22\15\0\2\22\11\0\1\22"+
    "\32\0\1\22\1\0\2\22\16\0\1\22\1\0\5\22"+
    "\1\155\4\22\15\0\2\22\11\0\1\22\32\0\1\22"+
    "\1\0\2\22\34\0\1\32\6\0\4\32\54\0\1\156"+
    "\1\157\2\156\2\157\1\156\3\157\1\156\1\157\1\160"+
    "\1\156\7\160\1\161\2\160\1\157\1\156\1\0\1\156"+
    "\1\157\1\162\1\157\1\156\1\157\1\0\3\156\2\160"+
    "\1\163\3\157\1\163\4\156\1\160\30\157\2\156\1\160"+
    "\1\156\2\160\2\156\25\164\1\165\4\164\1\0\4\164"+
    "\1\166\1\164\1\0\57\164\1\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\14"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\1\167\5\0"+
    "\32\14\1\0\1\14\5\0\1\170\2\0\2\170\1\0"+
    "\3\170\1\0\1\170\1\72\1\0\1\171\4\22\1\172"+
    "\4\22\1\170\3\0\1\170\1\0\1\170\1\0\1\170"+
    "\4\0\1\22\1\173\1\0\3\170\5\0\1\22\30\170"+
    "\2\0\1\22\1\0\1\22\1\174\16\0\1\22\1\0"+
    "\12\22\15\0\2\22\11\0\1\175\32\0\1\22\1\0"+
    "\2\22\47\0\1\176\120\0\1\177\67\0\1\22\1\0"+
    "\11\22\1\200\15\0\2\22\11\0\1\22\32\0\1\22"+
    "\1\0\2\22\3\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\14\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\1\14\1\201\30\14"+
    "\1\0\1\14\5\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\1\14\1\202\1\0\1\14\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\6\14\1\203"+
    "\23\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\14\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\4\14\1\204"+
    "\5\14\1\205\6\14\1\206\10\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\6\14\1\207\23\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\1\210\6\14\1\211\22\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\7\14\1\212\4\14\1\213\1\14"+
    "\1\214\13\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\14"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\1\215"+
    "\31\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\14\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\1\14\1\216"+
    "\22\14\1\217\5\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\14\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\1\220\7\14\1\221\7\14\1\222\11\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\1\14\1\223\1\0\1\14\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\6\14\1\224\23\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\14\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\1\225\31\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\1\226\3\14\1\227\25\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\14\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\13\14\1\230\1\14\1\231"+
    "\14\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\14\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\20\14\1\232"+
    "\11\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\14\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\20\14\1\233"+
    "\11\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\14\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\1\234\31\14"+
    "\1\0\1\14\5\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\14\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\12\14\1\235\5\14"+
    "\1\236\11\14\1\0\1\14\20\0\1\72\1\0\5\22"+
    "\1\172\4\22\15\0\2\22\11\0\1\22\32\0\1\22"+
    "\1\0\1\22\1\174\2\0\25\237\1\240\4\237\1\0"+
    "\4\237\1\241\2\0\57\237\25\77\1\0\4\77\1\0"+
    "\4\77\3\0\57\77\32\242\1\0\1\242\1\243\4\242"+
    "\1\0\57\242\1\0\1\244\2\0\2\244\1\0\3\244"+
    "\1\0\1\244\1\245\1\246\12\245\1\244\3\0\1\244"+
    "\1\0\1\244\1\0\1\247\4\0\2\245\1\0\3\244"+
    "\1\250\4\0\1\245\30\244\2\0\1\245\1\0\2\245"+
    "\34\0\1\101\6\0\1\251\57\0\37\105\1\252\1\0"+
    "\117\105\1\253\1\254\60\105\1\0\1\255\2\0\2\255"+
    "\1\0\3\255\1\0\1\255\1\256\1\257\12\256\1\255"+
    "\3\0\1\255\1\0\1\255\1\0\1\260\4\0\2\256"+
    "\1\0\3\255\1\261\4\0\1\256\30\255\2\0\1\256"+
    "\1\0\2\256\3\0\4\111\1\262\4\111\1\0\1\111"+
    "\14\0\2\111\1\0\2\111\1\0\1\111\1\0\1\111"+
    "\1\0\1\111\5\0\3\111\6\0\32\111\1\0\1\111"+
    "\20\0\1\112\1\0\12\112\15\0\2\112\11\0\1\112"+
    "\32\0\1\112\1\0\2\112\2\0\15\263\1\264\7\263"+
    "\1\265\4\263\1\0\6\263\3\0\55\263\1\0\4\114"+
    "\1\266\4\114\1\0\1\114\14\0\2\114\1\0\2\114"+
    "\1\0\1\114\1\0\1\114\1\0\1\114\5\0\3\114"+
    "\6\0\32\114\1\0\1\114\4\0\32\115\1\117\4\115"+
    "\1\267\1\121\1\117\57\115\25\117\1\270\11\117\1\271"+
    "\1\0\117\117\1\271\1\0\60\117\25\0\1\272\11\0"+
    "\1\273\106\0\1\272\75\0\1\274\1\0\1\275\2\274"+
    "\24\0\1\274\43\0\1\275\11\0\2\274\10\0\2\123"+
    "\1\0\2\123\24\0\1\123\55\0\2\123\1\0\1\123"+
    "\5\0\1\124\2\125\2\124\1\125\3\124\1\276\1\124"+
    "\14\0\1\124\1\125\1\0\1\125\1\124\1\0\1\124"+
    "\1\0\1\124\1\0\1\125\5\0\3\124\6\0\30\124"+
    "\2\125\1\0\1\125\5\0\1\124\2\125\2\124\1\125"+
    "\3\124\1\0\1\124\14\0\1\124\1\125\1\0\1\125"+
    "\1\124\1\0\1\124\1\0\1\124\1\0\1\125\5\0"+
    "\3\124\6\0\30\124\2\125\1\0\1\125\11\0\1\125"+
    "\4\0\1\276\1\0\1\126\1\0\12\126\15\0\2\126"+
    "\11\0\1\126\32\0\1\126\1\0\2\126\2\0\15\127"+
    "\1\277\14\127\1\0\6\127\1\0\2\300\55\127\1\0"+
    "\4\14\1\130\4\14\1\0\1\14\1\301\1\0\12\301"+
    "\2\14\1\0\2\14\1\0\1\14\1\131\1\14\1\0"+
    "\1\14\2\0\2\301\1\0\3\14\5\0\1\301\32\14"+
    "\1\301\1\14\2\301\2\0\25\302\1\303\4\302\1\0"+
    "\4\302\1\304\2\0\57\302\1\0\1\132\1\133\1\134"+
    "\1\0\2\133\1\0\1\136\1\137\1\140\1\141\17\0"+
    "\1\133\15\0\1\136\15\0\1\141\1\132\3\0\1\137"+
    "\14\0\2\133\1\0\1\134\6\0\2\134\1\0\2\134"+
    "\1\0\1\136\1\137\1\305\1\141\17\0\1\134\15\0"+
    "\1\136\15\0\1\141\4\0\1\137\14\0\2\134\1\0"+
    "\1\134\6\0\2\306\1\0\5\306\1\0\1\306\17\0"+
    "\1\306\2\0\1\306\11\0\2\306\7\0\2\306\3\0"+
    "\2\306\4\0\1\306\14\0\2\306\1\0\1\306\5\0"+
    "\1\307\2\144\2\307\1\144\3\307\1\0\1\310\1\311"+
    "\1\312\12\311\1\307\2\0\1\144\1\307\1\0\1\307"+
    "\1\0\1\307\4\0\2\311\1\0\3\307\5\0\1\311"+
    "\6\307\1\310\21\307\2\144\1\311\1\144\2\311\4\0"+
    "\2\313\2\0\1\313\5\0\1\314\5\0\1\314\10\0"+
    "\1\313\55\0\2\313\1\0\1\313\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\14\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\13\14\1\315\16\14\1\0\1\14\6\0\2\144\1\0"+
    "\2\144\1\0\1\136\1\137\1\0\1\141\17\0\1\144"+
    "\15\0\1\136\15\0\1\141\4\0\1\137\14\0\2\144"+
    "\1\0\1\144\4\0\15\145\1\316\7\145\1\147\4\145"+
    "\1\0\6\145\1\0\57\145\14\317\1\150\1\317\1\320"+
    "\11\150\15\317\2\150\11\317\1\150\32\317\1\150\1\317"+
    "\2\150\2\317\14\0\1\22\1\0\1\22\1\321\10\22"+
    "\15\0\2\22\11\0\1\22\32\0\1\22\1\0\2\22"+
    "\113\0\1\322\7\0\14\323\1\324\1\323\3\324\1\325"+
    "\4\324\1\22\1\324\15\323\2\324\11\323\1\324\32\323"+
    "\1\324\1\323\2\324\2\323\32\154\1\0\6\154\1\0"+
    "\57\154\25\0\1\326\7\0\1\326\64\0\4\327\1\330"+
    "\4\327\1\0\1\327\11\0\1\326\2\0\2\327\1\0"+
    "\2\327\1\326\1\327\1\0\1\327\1\0\1\327\5\0"+
    "\3\327\6\0\32\327\1\0\1\327\20\0\1\331\1\0"+
    "\12\331\5\0\1\326\7\0\2\331\11\0\1\331\32\0"+
    "\1\331\1\0\2\331\2\0\2\156\1\332\3\156\1\333"+
    "\5\156\1\160\1\156\12\160\2\156\1\0\1\332\1\334"+
    "\4\156\1\0\3\156\2\160\11\156\1\160\30\156\2\332"+
    "\1\160\1\156\2\160\2\156\35\335\1\326\63\335\25\164"+
    "\1\165\4\164\1\0\4\164\1\336\1\164\1\0\111\164"+
    "\1\0\6\164\1\0\57\164\37\0\1\337\75\0\1\340"+
    "\1\0\12\22\15\0\2\22\1\341\10\0\1\22\32\0"+
    "\1\22\1\0\2\22\3\0\1\170\2\0\2\170\1\0"+
    "\3\170\1\0\1\170\1\22\1\0\12\22\1\170\3\0"+
    "\1\170\1\0\1\170\1\0\1\170\4\0\2\22\1\0"+
    "\3\170\5\0\1\22\30\170\2\0\1\22\1\0\2\22"+
    "\16\0\1\22\1\0\11\22\1\342\15\0\2\22\11\0"+
    "\1\22\32\0\1\22\1\0\2\22\3\0\1\343\2\0"+
    "\2\343\1\0\3\343\1\0\1\343\2\0\1\344\11\0"+
    "\1\343\3\0\1\343\1\0\1\343\1\0\1\343\5\0"+
    "\1\345\1\0\3\343\6\0\30\343\11\0\1\346\2\0"+
    "\2\346\1\0\3\346\1\0\1\346\2\0\1\347\11\0"+
    "\1\346\3\0\1\346\1\0\1\346\1\0\1\346\5\0"+
    "\1\350\1\0\3\346\6\0\30\346\24\0\1\22\1\0"+
    "\11\22\1\351\15\0\2\22\11\0\1\22\32\0\1\22"+
    "\1\0\2\22\3\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\14\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\2\14\1\352\27\14"+
    "\1\0\1\14\5\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\14\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\17\14\1\353\12\14"+
    "\1\0\1\14\5\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\14\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\1\354\31\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\1\14\1\355\1\0\1\14\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\1\356\20\14\1\357"+
    "\10\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\14\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\4\14\1\360"+
    "\1\14\1\361\11\14\1\362\11\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\17\14\1\363\12\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\3\14\1\364\26\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\2\14\1\365\1\366\26\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\1\367\31\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\2\14\1\370\27\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\1\14\1\371\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\32\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\14\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\3\14\1\372\13\14\1\373\12\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\25\14\1\374\4\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\11\14\1\375\20\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\6\14\1\376\23\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\7\14\1\377\22\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\4\14\1\u0100\25\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\14\14\1\u0101\15\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\7\14\1\u0102\22\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\26\14\1\u0103\3\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\3\14\1\u0104\1\14\1\u0105\24\14"+
    "\1\0\1\14\5\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\14\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\5\14\1\u0106\24\14"+
    "\1\0\1\14\5\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\14\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\10\14\1\u0107\7\14"+
    "\1\u0108\11\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\14"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\17\14"+
    "\1\u0109\12\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\14"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\6\14"+
    "\1\u010a\23\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\14"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\24\14"+
    "\1\u010b\5\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\14"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\4\14"+
    "\1\u010c\2\14\1\u010d\22\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\14\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\20\14\1\u010e\11\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\14\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\3\14\1\u010f\26\14\1\0\1\14\4\0\25\237"+
    "\1\240\4\237\1\0\4\237\3\0\111\237\1\0\6\237"+
    "\1\0\57\237\37\0\1\u0110\63\0\2\u0111\2\0\4\u0111"+
    "\1\0\1\u0111\17\0\1\u0111\1\u0112\1\0\1\u0111\11\0"+
    "\2\u0111\7\0\2\u0111\3\0\2\u0111\4\0\1\u0111\14\0"+
    "\2\u0111\1\0\1\u0111\5\0\4\244\1\u0113\4\244\1\0"+
    "\1\244\14\0\2\244\1\0\2\244\1\0\1\244\1\0"+
    "\1\244\1\0\1\244\5\0\3\244\6\0\32\244\1\0"+
    "\1\244\20\0\1\245\1\0\12\245\15\0\2\245\11\0"+
    "\1\245\32\0\1\245\1\0\2\245\2\0\15\246\1\u0114"+
    "\7\246\1\u0115\4\246\1\0\6\246\3\0\55\246\37\105"+
    "\1\u0116\1\0\117\105\1\u0117\1\u0118\60\105\1\0\4\255"+
    "\1\u0119\4\255\1\0\1\255\14\0\2\255\1\0\2\255"+
    "\1\0\1\255\1\0\1\255\1\0\1\255\5\0\3\255"+
    "\6\0\32\255\1\0\1\255\20\0\1\256\1\0\12\256"+
    "\15\0\2\256\11\0\1\256\32\0\1\256\1\0\2\256"+
    "\2\0\15\257\1\u011a\7\257\1\u011b\4\257\1\0\6\257"+
    "\3\0\55\257\1\0\4\111\1\262\4\111\1\0\1\111"+
    "\1\112\1\0\12\112\2\111\1\0\2\111\1\0\1\111"+
    "\1\0\1\111\1\0\1\111\2\0\2\112\1\0\3\111"+
    "\5\0\1\112\32\111\1\112\1\111\2\112\2\0\15\263"+
    "\1\u011c\7\263\1\265\4\263\1\0\6\263\1\0\57\263"+
    "\1\0\4\114\1\266\4\114\1\0\1\114\1\u011d\1\0"+
    "\12\u011d\2\114\1\0\2\114\1\0\1\114\1\0\1\114"+
    "\1\0\1\114\2\0\2\u011d\1\0\3\114\5\0\1\u011d"+
    "\32\114\1\u011d\1\114\2\u011d\2\0\25\117\1\270\11\117"+
    "\1\u011e\1\0\60\117\25\115\1\116\4\115\1\117\4\115"+
    "\1\267\1\121\1\117\57\115\37\117\1\u011e\1\0\60\117"+
    "\25\u011f\1\121\4\u011f\1\0\4\u011f\1\u0120\1\121\1\0"+
    "\57\u011f\37\0\1\276\63\0\1\274\2\0\2\274\24\0"+
    "\1\274\55\0\2\274\10\0\2\u0121\1\0\5\u0121\1\0"+
    "\1\u0121\17\0\1\u0121\2\0\1\u0121\11\0\2\u0121\7\0"+
    "\2\u0121\3\0\2\u0121\4\0\1\u0121\14\0\2\u0121\1\0"+
    "\1\u0121\16\0\1\276\12\0\1\127\120\0\1\127\107\0"+
    "\1\301\1\0\12\301\7\0\1\131\5\0\2\301\11\0"+
    "\1\301\32\0\1\301\1\0\2\301\2\0\25\302\1\303"+
    "\4\302\1\0\4\302\3\0\111\302\1\0\6\302\1\0"+
    "\57\302\37\0\1\u0122\63\0\2\144\2\0\1\144\1\0"+
    "\1\136\1\137\1\0\1\141\17\0\1\144\15\0\1\136"+
    "\15\0\1\141\4\0\1\137\14\0\2\144\1\0\1\144"+
    "\5\0\1\132\2\306\1\0\5\306\1\u0123\1\306\17\0"+
    "\1\306\2\0\1\306\11\0\2\306\7\0\2\306\3\0"+
    "\2\306\1\132\3\0\1\306\14\0\2\306\1\0\1\306"+
    "\5\0\4\307\1\u0124\4\307\1\0\1\307\14\0\2\307"+
    "\1\0\2\307\1\0\1\307\1\0\1\307\1\0\1\307"+
    "\5\0\3\307\6\0\32\307\1\0\1\307\5\0\4\307"+
    "\1\u0124\4\307\1\0\1\307\1\314\5\0\1\314\5\0"+
    "\2\307\1\0\2\307\1\0\1\307\1\0\1\307\1\0"+
    "\1\307\5\0\3\307\6\0\32\307\1\0\1\307\20\0"+
    "\1\311\1\0\12\311\15\0\2\311\11\0\1\311\32\0"+
    "\1\311\1\0\2\311\2\0\15\312\1\u0125\7\312\1\u0126"+
    "\4\312\1\0\6\312\3\0\55\312\2\0\2\313\1\0"+
    "\2\313\1\0\1\136\1\137\21\0\1\313\15\0\1\136"+
    "\22\0\1\137\14\0\2\313\1\0\1\313\6\0\2\313"+
    "\2\0\1\313\24\0\1\313\55\0\2\313\1\0\1\313"+
    "\4\0\16\317\1\u0127\116\317\1\150\1\317\1\320\1\u0128"+
    "\10\150\15\317\2\150\11\317\1\150\32\317\1\150\1\317"+
    "\2\150\2\317\14\0\1\22\1\0\1\u0129\11\22\15\0"+
    "\2\22\11\0\1\22\32\0\1\22\1\0\2\22\114\0"+
    "\1\u012a\6\0\21\323\1\u012b\4\323\1\0\106\323\1\324"+
    "\1\323\3\324\1\u012c\4\324\1\22\1\324\15\323\2\324"+
    "\11\323\1\324\32\323\1\324\1\323\2\324\2\323\14\u012d"+
    "\1\u012e\1\u012d\3\u012e\1\u012f\4\u012e\1\u0130\1\u012e\15\u012d"+
    "\2\u012e\11\u012d\1\u012e\32\u012d\1\u012e\1\u012d\2\u012e\2\u012d"+
    "\1\0\4\327\1\330\4\327\1\0\1\327\14\0\2\327"+
    "\1\0\2\327\1\0\1\327\1\0\1\327\1\0\1\327"+
    "\5\0\3\327\6\0\32\327\1\0\1\327\5\0\4\327"+
    "\1\330\4\327\1\0\1\327\1\331\1\0\12\331\2\327"+
    "\1\0\2\327\1\0\1\327\1\0\1\327\1\0\1\327"+
    "\2\0\2\331\1\0\3\327\5\0\1\331\32\327\1\331"+
    "\1\327\2\331\16\0\1\331\1\0\12\331\15\0\2\331"+
    "\11\0\1\331\32\0\1\331\1\0\2\331\4\0\1\333"+
    "\3\0\1\333\16\0\1\326\5\0\1\333\1\0\1\326"+
    "\53\0\2\333\10\0\1\156\3\0\1\156\16\0\1\326"+
    "\5\0\1\156\1\0\1\326\53\0\2\156\10\0\2\u0131"+
    "\2\0\4\u0131\1\0\1\u0131\11\0\1\326\5\0\1\u0131"+
    "\1\u0132\1\326\1\u0131\11\0\2\u0131\7\0\2\u0131\3\0"+
    "\2\u0131\4\0\1\u0131\14\0\2\u0131\1\0\1\u0131\4\0"+
    "\37\337\1\u0133\61\337\14\0\1\u0134\1\0\12\22\15\0"+
    "\2\22\11\0\1\22\32\0\1\22\1\0\2\22\52\0"+
    "\1\u0135\64\0\1\u0136\32\0\1\u0137\52\0\1\343\2\0"+
    "\2\343\1\0\3\343\1\0\1\343\14\0\1\343\3\0"+
    "\1\343\1\0\1\343\1\0\1\343\7\0\3\343\6\0"+
    "\30\343\24\0\1\u0138\32\0\1\u0139\52\0\1\346\2\0"+
    "\2\346\1\0\3\346\1\0\1\346\14\0\1\346\3\0"+
    "\1\346\1\0\1\346\1\0\1\346\7\0\3\346\6\0"+
    "\30\346\11\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\14\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\3\14\1\u013a\26\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\14\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\6\14\1\u013b\23\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\14\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\7\14\1\u013c\22\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\14\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\6\14\1\u013d\23\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\14\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\20\14\1\u013e\11\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\14\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\10\14\1\u013f\21\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\14\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\14\14\1\u0140\15\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\14\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\2\14\1\u0141\27\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\14\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\6\14\1\u0142\23\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\1\14\1\u0143\1\0\1\14\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\32\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\6\14\1\u0144\23\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\5\14\1\u0145\24\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\2\14\1\u0146\27\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\6\14\1\u0147\23\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\15\14\1\u0148\14\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\6\14\1\u0149\23\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\10\14\1\u014a\21\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\21\14\1\u014b\10\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\6\14\1\u014c\23\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\4\14\1\u014d\25\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\2\14\1\u014e\27\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\22\14\1\u014f\7\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\1\u0150\31\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\7\14\1\u0151\22\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\5\14\1\u0152\24\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\4\14\1\u0153\25\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\27\14\1\u0154\2\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\3\14\1\u0155\26\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\24\14\1\u0156\5\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\7\14\1\u0157\1\u0158\21\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\7\14\1\u0159\22\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\6\14\1\u015a\23\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\7\14\1\u015b\22\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\12\14\1\u015c\17\14\1\0\1\14"+
    "\4\0\37\u0110\1\u015d\1\0\60\u0110\2\0\2\u015e\2\0"+
    "\4\u015e\1\0\1\u015e\17\0\1\u015e\2\0\1\u015e\11\0"+
    "\2\u015e\7\0\2\u015e\3\0\2\u015e\4\0\1\u015e\14\0"+
    "\2\u015e\1\0\1\u015e\5\0\4\244\1\u0113\4\244\1\0"+
    "\1\244\1\245\1\0\12\245\2\244\1\0\2\244\1\0"+
    "\1\244\1\0\1\244\1\0\1\244\2\0\2\245\1\0"+
    "\3\244\5\0\1\245\32\244\1\245\1\244\2\245\2\0"+
    "\15\246\1\u015f\7\246\1\u0115\4\246\1\0\6\246\1\0"+
    "\57\246\37\105\2\0\60\105\37\0\1\u0160\62\0\4\255"+
    "\1\u0119\4\255\1\0\1\255\1\256\1\0\12\256\2\255"+
    "\1\0\2\255\1\0\1\255\1\0\1\255\1\0\1\255"+
    "\2\0\2\256\1\0\3\255\5\0\1\256\32\255\1\256"+
    "\1\255\2\256\2\0\15\257\1\u0161\7\257\1\u011b\4\257"+
    "\1\0\6\257\1\0\57\257\14\0\1\u011d\1\0\12\u011d"+
    "\15\0\2\u011d\11\0\1\u011d\32\0\1\u011d\1\0\2\u011d"+
    "\2\0\37\117\1\u0162\1\0\60\117\32\u011f\1\0\4\u011f"+
    "\1\u0120\1\121\1\0\57\u011f\37\u0122\1\u0163\1\0\60\u0122"+
    "\1\0\1\307\2\0\2\307\1\0\3\307\1\0\1\307"+
    "\1\311\1\312\12\311\1\307\3\0\1\307\1\0\1\307"+
    "\1\0\1\307\4\0\2\311\1\0\3\307\5\0\1\311"+
    "\30\307\2\0\1\311\1\0\2\311\3\0\4\307\1\u0124"+
    "\4\307\1\0\1\307\1\311\1\0\12\311\2\307\1\0"+
    "\2\307\1\0\1\307\1\0\1\307\1\0\1\307\2\0"+
    "\2\311\1\0\3\307\5\0\1\311\32\307\1\311\1\307"+
    "\2\311\2\0\15\312\1\u0164\7\312\1\u0126\4\312\1\0"+
    "\6\312\1\0\57\312\16\317\1\u0127\1\u0165\101\317\14\u0166"+
    "\1\u0129\1\u0166\5\u0129\1\u0167\4\u0129\15\u0166\2\u0129\11\u0166"+
    "\1\u0129\32\u0166\1\u0129\1\u0166\2\u0129\2\u0166\51\0\1\u0168"+
    "\42\0\1\u0169\4\0\21\323\1\u012b\4\323\1\u016a\106\323"+
    "\1\324\1\323\3\324\1\u012c\4\324\1\u0130\1\324\15\323"+
    "\2\324\11\323\1\324\32\323\1\324\1\323\2\324\2\323"+
    "\21\u012d\1\u016b\4\u012d\1\0\106\u012d\1\u012e\1\u012d\3\u012e"+
    "\1\u012f\4\u012e\1\22\1\u012e\15\u012d\2\u012e\11\u012d\1\u012e"+
    "\32\u012d\1\u012e\1\u012d\2\u012e\16\u012d\1\u012e\1\u012d\3\u012e"+
    "\1\u012f\4\u012e\1\u016c\1\u012e\15\u012d\2\u012e\11\u012d\1\u012e"+
    "\32\u012d\1\u012e\1\u012d\2\u012e\2\u012d\2\0\2\u016d\2\0"+
    "\4\u016d\1\0\1\u016d\17\0\1\u016d\2\0\1\u016d\11\0"+
    "\2\u016d\7\0\2\u016d\3\0\2\u016d\4\0\1\u016d\14\0"+
    "\2\u016d\1\0\1\u016d\6\0\2\u0131\2\0\4\u0131\1\0"+
    "\1\u0131\17\0\1\u0131\1\u0132\1\0\1\u0131\11\0\2\u0131"+
    "\7\0\2\u0131\3\0\2\u0131\4\0\1\u0131\14\0\2\u0131"+
    "\1\0\1\u0131\4\0\37\337\1\u016e\61\337\51\0\1\u016f"+
    "\63\0\1\343\154\0\1\u0170\64\0\1\346\154\0\1\u0171"+
    "\51\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\4\14\1\u0172\25\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\4\14\1\u0173\25\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\6\14\1\u0174\23\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\3\14\1\u0175\26\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\26\14\1\u0176\3\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\4\14\1\u0177\25\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\u0178\2\14\1\0\1\14\1\131\1\14\1\u0178\1\u0179"+
    "\2\u0178\3\0\3\14\6\0\32\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\12\14\1\u017a\17\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\2\14\1\u017b\27\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\14\14\1\u017c\15\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\4\14\1\u017d\25\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\5\14\1\u017e\24\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\4\14\1\u017f\25\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\6\14\1\u0180\23\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\10\14\1\u0181\21\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\7\14\1\u0182\22\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\12\14\1\u0183\17\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\10\14\1\u0184\21\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\1\u0185\31\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\14\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\6\14\1\u0186\23\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\14\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\1\u0187\31\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\14\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\20\14\1\u0188\11\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\14\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\4\14\1\u0189\25\14\1\0\1\14\5\0\4\14\1\130"+
    "\2\14\1\u018a\1\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\32\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\14\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\14\14\1\u018b\15\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\14\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\6\14\1\u018c\23\14\1\0\1\14\4\0\37\u0110\1\u018d"+
    "\1\0\60\u0110\2\0\2\u018e\2\0\4\u018e\1\0\1\u018e"+
    "\17\0\1\u018e\2\0\1\u018e\11\0\2\u018e\7\0\2\u018e"+
    "\3\0\2\u018e\4\0\1\u018e\14\0\2\u018e\1\0\1\u018e"+
    "\43\0\1\u018f\61\0\37\u0122\1\u0190\1\0\60\u0122\23\u0166"+
    "\1\u0191\111\u0166\1\u0129\1\u0166\5\u0129\1\u0192\4\u0129\15\u0166"+
    "\2\u0129\11\u0166\1\u0129\32\u0166\1\u0129\1\u0166\2\u0129\2\u0166"+
    "\111\0\1\u0193\11\0\1\u0194\116\0\21\u012d\1\u016b\4\u012d"+
    "\1\u0195\72\u012d\2\0\2\u0196\2\0\4\u0196\1\0\1\u0196"+
    "\17\0\1\u0196\2\0\1\u0196\11\0\2\u0196\7\0\2\u0196"+
    "\3\0\2\u0196\4\0\1\u0196\14\0\2\u0196\1\0\1\u0196"+
    "\4\0\37\337\1\u0197\61\337\36\0\1\u0198\133\0\1\u0199"+
    "\120\0\1\u019a\50\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\14\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\1\u019b\31\14\1\0"+
    "\1\14\5\0\4\14\1\130\2\14\1\u019c\1\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\14\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\32\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\14\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\14\14\1\u019d\15\14\1\0"+
    "\1\14\36\0\1\u0178\6\0\4\u0178\21\0\1\u019e\2\0"+
    "\1\u019f\30\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\u0178\2\14\1\0\1\14\1\131\1\14\1\u0178"+
    "\1\u0179\2\u0178\3\0\3\14\6\0\5\14\1\u01a0\2\14"+
    "\1\u01a1\21\14\1\0\1\14\5\0\4\14\1\130\2\14"+
    "\1\u01a2\1\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\14\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\32\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\14"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\3\14"+
    "\1\u01a3\26\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\14"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\3\14"+
    "\1\u01a4\26\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\14"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\20\14"+
    "\1\u01a5\11\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\14"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\15\14"+
    "\1\u01a6\14\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\14"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\7\14"+
    "\1\u01a7\22\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\14"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\23\14"+
    "\1\u01a8\6\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\14"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\5\14"+
    "\1\u01a9\24\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\14"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\3\14"+
    "\1\u01aa\26\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\14"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\5\14"+
    "\1\u01ab\24\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\14"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\3\14"+
    "\1\u01ac\26\14\1\0\1\14\4\0\37\u0110\2\0\60\u0110"+
    "\2\0\2\u01ad\2\0\4\u01ad\1\0\1\u01ad\17\0\1\u01ad"+
    "\2\0\1\u01ad\11\0\2\u01ad\7\0\2\u01ad\3\0\2\u01ad"+
    "\4\0\1\u01ad\14\0\2\u01ad\1\0\1\u01ad\4\0\37\u0122"+
    "\2\0\60\u0122\23\u0166\1\u01ae\111\u0166\1\u0129\1\u0166\1\u01af"+
    "\4\u0129\1\u0192\4\u0129\15\u0166\2\u0129\11\u0166\1\u0129\32\u0166"+
    "\1\u0129\1\u0166\2\u0129\2\u0166\2\0\2\156\2\0\4\156"+
    "\1\0\1\156\17\0\1\156\2\0\1\156\11\0\2\156"+
    "\7\0\2\156\3\0\2\156\4\0\1\156\14\0\2\156"+
    "\1\0\1\156\43\0\1\u0197\133\0\1\u01b0\104\0\1\u01b1"+
    "\120\0\1\u01b2\63\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\14\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\5\14\1\u01b3\24\14"+
    "\1\0\1\14\74\0\1\u01b4\112\0\1\u01b5\37\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\14\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\7\14\1\u01b6\22\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\14\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\1\14\1\u01b7\30\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\14\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\2\14\1\u01b8\27\14\1\0\1\14\5\0\4\14"+
    "\1\130\2\14\1\u01b9\1\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\32\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\14\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\6\14\1\u01ba\23\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\14\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\21\14\1\u01bb\10\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\14\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\6\14\1\u01bc\23\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\14\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\3\14\1\u01bd\26\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\14\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\6\14\1\u01be\23\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\14\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\20\14\1\u01bf\11\14\1\0\1\14\4\0\16\u0166"+
    "\1\u01c0\4\u0166\1\u01ae\111\u0166\1\u0129\1\u0166\1\u0129\1\u01c1"+
    "\3\u0129\1\u0167\4\u0129\15\u0166\2\u0129\11\u0166\1\u0129\32\u0166"+
    "\1\u0129\1\u0166\2\u0129\2\u0166\36\0\1\u01c2\134\0\1\u01c3"+
    "\120\0\1\u01c4\47\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\14\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\3\14\1\u01c5\26\14"+
    "\1\0\1\14\65\0\1\u01c6\131\0\1\u01c7\27\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\14\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\1\u01c8\31\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\14\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\11\14\1\u01c9\20\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\14\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\6\14\1\u01ca\23\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\14\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\6\14\1\u01cb\23\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\14\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\3\14\1\u01cc\26\14\1\0\1\14\4\0\17\u0166\1\u01cd"+
    "\3\u0166\1\u0191\75\u0166\47\0\1\170\107\0\1\u01ce\120\0"+
    "\1\u01cf\145\0\1\u01d0\124\0\1\u01d1\32\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\14\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\2\14\1\u01d2\27\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\14\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\6\14\1\u01d3\23\14\1\0\1\14\5\0\4\14\1\130"+
    "\2\14\1\u01d4\1\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\32\14\1\0\1\14\53\0\1\343\120\0"+
    "\1\346\134\0\1\u01d5\123\0\1\u01d6\33\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\14\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\2\14\1\u01d7\27\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\14\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\5\14\1\u01d8\24\14\1\0\1\14\70\0\1\u01d5\35\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\3\14\1\u01d7\26\14\1\0\1\14\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29241];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\11\22\1\1\11\2\1\1\11\1\1\2\11"+
    "\1\1\1\11\24\1\2\11\4\1\2\11\5\1\1\11"+
    "\4\1\3\0\1\1\1\0\2\1\4\0\2\1\1\11"+
    "\1\1\2\0\2\11\1\1\1\0\3\1\1\0\1\11"+
    "\1\0\2\1\1\0\3\1\1\0\3\1\1\0\2\1"+
    "\1\0\1\1\2\11\5\1\2\0\40\1\2\0\1\11"+
    "\3\1\1\0\1\1\1\11\3\0\1\11\2\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\11\1\0\2\1\4\0"+
    "\1\1\1\0\1\11\2\0\2\1\2\0\5\1\1\0"+
    "\1\1\1\0\2\1\1\0\2\1\2\0\2\1\1\11"+
    "\3\1\3\0\2\11\1\0\1\1\1\0\1\1\1\11"+
    "\2\0\1\11\2\0\50\1\2\0\1\1\1\11\2\0"+
    "\1\1\1\11\1\1\1\11\1\0\2\1\2\0\3\1"+
    "\1\0\1\1\1\11\2\0\2\1\2\0\1\1\1\0"+
    "\3\1\3\0\1\1\5\0\43\1\2\0\4\1\1\0"+
    "\2\1\1\0\1\1\2\0\1\11\1\0\1\1\5\0"+
    "\6\1\1\0\24\1\2\0\1\1\2\0\1\1\3\11"+
    "\1\0\1\1\3\0\3\1\2\0\15\1\1\11\1\0"+
    "\1\1\3\0\1\1\2\0\12\1\1\0\1\1\3\0"+
    "\1\1\2\0\6\1\4\0\3\1\1\11\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[472];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public _ScalaCoreLexer(boolean isScala3) {
      this((java.io.Reader) null);
      this.isScala3 = isScala3;
    }

    private static abstract class InterpolatedStringLevel {
      private int value = 0;

      public final boolean isRaw;

      public InterpolatedStringLevel(boolean isRaw) {
        this.isRaw = isRaw;
      }
      public InterpolatedStringLevel(CharSequence interpolator) {
        this(StringUtil.equal(interpolator, "raw", true));
      }

      public int get() {
        return value;
      }

      public boolean isZero() {
        return value == 0;
      }

      public void increase() {
        ++value;
      }

      public void decrease() {
        --value;
      }

      public abstract int getState();
    }

    private static class RegularLevel extends InterpolatedStringLevel {
      public RegularLevel(CharSequence intepolator) {
        super(intepolator);
      }
      public int getState() {
        return INSIDE_INTERPOLATED_STRING;
      }
    }

    private static class MultilineLevel extends InterpolatedStringLevel {
      public MultilineLevel(CharSequence intepolator) {
        super(intepolator);
      }
      public int getState() {
        return INSIDE_MULTI_LINE_INTERPOLATED_STRING;
      }
    }

    private boolean isScala3;
    //to get id after $ in interpolated String
    private boolean haveIdInString = false;
    private boolean haveIdInMultilineString = false;
    // Currently opened interpolated Strings. Each int represents the number of the opened left structural braces in the String
    private Stack<InterpolatedStringLevel> nestedString = new Stack<>();
    private CharSequence lastSeenInterpolator = null;

    private boolean isInsideRawInterpolator() {
      return !nestedString.isEmpty() && nestedString.peek().isRaw;
    }

    public boolean isInterpolatedStringState() {
        return isInsideInterpolatedString() ||
               haveIdInString ||
               haveIdInMultilineString ||
               yystate() == INSIDE_INTERPOLATED_STRING ||
               yystate() == INSIDE_MULTI_LINE_INTERPOLATED_STRING;
    }

    private boolean shouldProcessBracesForInterpolated() {
      return isInsideInterpolatedString();
    }
    private boolean isInsideInterpolatedString() {
      return !nestedString.isEmpty();
    }

    @NotNull
    private IElementType processOutsideString() {
      return processOutsideString(tINTERPOLATED_STRING_END);
    }

    private IElementType processOutsideString(IElementType typ) {
      if (isInsideInterpolatedString())
        nestedString.pop();
      yybegin(COMMON_STATE);
      return process(typ);
    }

    @NotNull
    private IElementType process(@NotNull final IElementType type){
      if ((type == tIDENTIFIER || type == kTHIS)) {
        if (haveIdInString) {
          haveIdInString = false;
          yybegin(INSIDE_INTERPOLATED_STRING);
        } else if (haveIdInMultilineString) {
          haveIdInMultilineString = false;
          yybegin(INSIDE_MULTI_LINE_INTERPOLATED_STRING);
        }
      }

      if (yystate() == YYINITIAL && type != tWHITE_SPACE_IN_LINE && type != tLBRACE && type != tLPARENTHESIS) {
        yybegin(COMMON_STATE);
      }

      // see comments to tINTERPOLATED_RAW_STRING and tINTERPOLATED_MULTILINE_RAW_STRING and
      final IElementType typeAdjusted;
      if (type == tINTERPOLATED_STRING && isInsideRawInterpolator())
        typeAdjusted =  tINTERPOLATED_RAW_STRING;
      else if (type == tINTERPOLATED_MULTILINE_STRING && isInsideRawInterpolator())
        typeAdjusted = tINTERPOLATED_MULTILINE_RAW_STRING;
      else
        typeAdjusted = type;

      return typeAdjusted;
    }

    @NotNull
    private IElementType processDollarInsideString(boolean isInsideMultiline) {
        final IElementType token;

        // TODO: remove this chech, this should always be false, cause $$ is handled by INTERPOLATED_STRING_ESCAPE pattern earlier
        boolean isDollarEscape = yycharat(1) == '$';
        if (isDollarEscape) {
            yypushback(yylength() - 2);
            token = tINTERPOLATED_STRING_ESCAPE;
        }
        else {
            if (isInsideMultiline) {
                haveIdInMultilineString = true;
            } else {
                haveIdInString = true;
            }
            yybegin(INJ_COMMON_STATE);
            yypushback(yylength() - 1);
            token = tINTERPOLATED_STRING_INJECTION;
        }
        return process(token);
    }

    private IElementType processScala3(@NotNull IElementType type) {
        return process(isScala3 ? type : tIDENTIFIER);
    }


  public _ScalaCoreLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaCoreLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2706) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    
    haveIdInString = false;
    nestedString.clear();
    
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    
    haveIdInString = false;
    nestedString.clear();
    
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 82: 
          { return process(kCATCH);
          }
        case 107: break;
        case 3: 
          { return process(Integer());
          }
        case 108: break;
        case 50: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 8;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzFPos++]:zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 9;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[--zzFPos]:zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { return process(Integer());
          }
        case 109: break;
        case 105: 
          { return process(kPROTECTED);
          }
        case 110: break;
        case 49: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(COMMON_STATE);
      return process(tINTERPOLATED_STRING_INJECTION);
          }
        case 111: break;
        case 34: 
          { return process(tLOWER_BOUND);
          }
        case 112: break;
        case 48: 
          { return processDollarInsideString(true);
          }
        case 113: break;
        case 33: 
          { return process(tLINE_COMMENT);
          }
        case 114: break;
        case 55: 
          { if (shouldProcessBracesForInterpolated()) {
                                              nestedString.peek().increase();
                                            }

                                            yypushback(yylength() - 1);
                                            yybegin(YYINITIAL);
                                            return process(tLBRACE);
          }
        case 115: break;
        case 65: 
          { return process(tSH_COMMENT);
          }
        case 116: break;
        case 7: 
          { return process(tCOLON);
          }
        case 117: break;
        case 97: 
          { return process(kEXTENDS);
          }
        case 118: break;
        case 66: 
          { //for comments in interpolated strings
    return process(tBLOCK_COMMENT);
          }
        case 119: break;
        case 39: 
          { yybegin(COMMON_STATE);
                                            yypushback(yylength());
                                            return ScalaTokenTypesEx.SCALA_XML_CONTENT_START;
          }
        case 120: break;
        case 63: 
          { yybegin(INSIDE_MULTI_LINE_INTERPOLATED_STRING);
    nestedString.push(new MultilineLevel(lastSeenInterpolator));
    return process(tINTERPOLATED_MULTILINE_STRING);
          }
        case 121: break;
        case 68: 
          { return processScala3(ThenKeyword());
          }
        case 122: break;
        case 61: 
          { return process(kVAR);
          }
        case 123: break;
        case 93: 
          { return process(kRETURN);
          }
        case 124: break;
        case 25: 
          { return processOutsideString();
          }
        case 125: break;
        case 20: 
          { return process(tSEMICOLON);
          }
        case 126: break;
        case 67: 
          { return process(kTRUE);
          }
        case 127: break;
        case 77: 
          { yypushback(yylength() - 1);
    return process(tINTERPOLATED_MULTILINE_STRING);
          }
        case 128: break;
        case 10: 
          { return process(tWRONG_STRING);
          }
        case 129: break;
        case 44: 
          { return processDollarInsideString(false);
          }
        case 130: break;
        case 1: 
          { return process(tSTUB);
          }
        case 131: break;
        case 76: 
          { return process(kWITH);
          }
        case 132: break;
        case 40: 
          { return process(tUPPER_BOUND);
          }
        case 133: break;
        case 5: 
          { return process(tDOT);
          }
        case 134: break;
        case 86: 
          { return process(kMATCH);
          }
        case 135: break;
        case 21: 
          { return process(tCOMMA);
          }
        case 136: break;
        case 37: 
          { return process(tSTRING);
          }
        case 137: break;
        case 69: 
          { return process(kTHIS);
          }
        case 138: break;
        case 81: 
          { return process(kTHROW);
          }
        case 139: break;
        case 62: 
          { return process(kVAL);
          }
        case 140: break;
        case 101: 
          { return process(kPRIVATE);
          }
        case 141: break;
        case 75: 
          { return process(kNULL);
          }
        case 142: break;
        case 45: 
          { return process(tINTERPOLATED_STRING_ESCAPE);
          }
        case 143: break;
        case 29: 
          { return process(Long());
          }
        case 144: break;
        case 99: 
          { return process(kFINALLY);
          }
        case 145: break;
        case 98: 
          { return process(kFOR_SOME);
          }
        case 146: break;
        case 14: 
          { if (shouldProcessBracesForInterpolated()) {
                                              InterpolatedStringLevel level = nestedString.peek();
                                              level.decrease();

                                              if (level.isZero()) {
                                                yybegin(level.getState());
                                              }
                                            }
                                            return process(tRBRACE);
          }
        case 147: break;
        case 92: 
          { return process(kSEALED);
          }
        case 148: break;
        case 103: 
          { return process(kOVERRIDE);
          }
        case 149: break;
        case 100: 
          { return process(kPACKAGE);
          }
        case 150: break;
        case 11: 
          { return process(tLSQBRACKET);
          }
        case 151: break;
        case 94: 
          { return processScala3(ExportKeyword());
          }
        case 152: break;
        case 32: 
          { return process(kDO);
          }
        case 153: break;
        case 54: 
          { return processScala3(ImplicitFunctionArrow());
          }
        case 154: break;
        case 59: 
          { return process(kFOR);
          }
        case 155: break;
        case 30: 
          { return process(Double());
          }
        case 156: break;
        case 36: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { if (isScala3) {
    return processScala3(QuoteStart());
  }
          }
        case 157: break;
        case 84: 
          { return process(kFALSE);
          }
        case 158: break;
        case 19: 
          { return process(tCHOOSE);
          }
        case 159: break;
        case 88: 
          { return process(kYIELD);
          }
        case 160: break;
        case 56: 
          { yypushback(yylength() - 1);
                                            yybegin(YYINITIAL);
                                            return process(tLPARENTHESIS);
          }
        case 161: break;
        case 8: 
          { return process(tAT);
          }
        case 162: break;
        case 28: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 6;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzFPos++]:zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 7;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[--zzFPos]:zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(WAIT_FOR_INTERPOLATED_STRING);
  // TODO: remove this check: looks like it's a dead code,
  //  yytext() should only return text that is matched by INTERPOLATED_STRING_ID, which can't end with \"\"
  if (endsWith(yytext(), "\"\"")) yypushback(2);
  lastSeenInterpolator = yytext();
  IElementType token = haveIdInString || haveIdInMultilineString ? tIDENTIFIER : tINTERPOLATED_STRING_ID;
  return process(token);
          }
        case 163: break;
        case 57: 
          { return processScala3(TypeLambdaArrow());
          }
        case 164: break;
        case 83: 
          { return process(ClassKeyword());
          }
        case 165: break;
        case 24: 
          { //don't add new lines to string itself, add empty error
    yypushback(yylength());
    return processOutsideString(tWRONG_LINE_BREAK_IN_STRING);
          }
        case 166: break;
        case 2: 
          { return process(tIDENTIFIER);
          }
        case 167: break;
        case 16: 
          { return process(tRPARENTHESIS);
          }
        case 168: break;
        case 87: 
          { return process(kMACRO);
          }
        case 169: break;
        case 22: 
          { yypushback(yylength() - 1); // only push opening quote
    yybegin(INSIDE_INTERPOLATED_STRING);
    nestedString.push(new RegularLevel(lastSeenInterpolator));
    return process(tINTERPOLATED_STRING);
          }
        case 170: break;
        case 9: 
          { yybegin(YYINITIAL);
                                            return process(tWHITE_SPACE_IN_LINE);
          }
        case 171: break;
        case 41: 
          { return process(tVIEW);
          }
        case 172: break;
        case 89: 
          { return processScala3(GivenKeyword());
          }
        case 173: break;
        case 38: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { if (isScala3) {
    return processScala3(SpliceStart());
  }
          }
        case 174: break;
        case 104: 
          { return process(kIMPLICIT);
          }
        case 175: break;
        case 15: 
          { return process(tLPARENTHESIS);
          }
        case 176: break;
        case 27: 
          { int length = yylength();
  int number = length;
  for (int i = 1; i < length; i++) {
    if (yycharat(i) == '$') {
      number = i;
      break;
    }
  }

  yypushback(length - number);
  boolean isThis = "this".contentEquals(yytext());
  return process(isThis ? kTHIS : tIDENTIFIER);
          }
        case 177: break;
        case 12: 
          { if (shouldProcessBracesForInterpolated()) {
                                              nestedString.peek().increase();
                                            }

                                            return process(tLBRACE);
          }
        case 178: break;
        case 91: 
          { return process(tMULTILINE_STRING);
          }
        case 179: break;
        case 43: 
          { if (isInsideRawInterpolator()) {
      yypushback(1); // from "\t" push "t" back, also if we have "\" we don't want " to be captured
    }
    return process(tINTERPOLATED_STRING);
          }
        case 180: break;
        case 85: 
          { return process(kFINAL);
          }
        case 181: break;
        case 58: 
          { return process(kTRY);
          }
        case 182: break;
        case 70: 
          { return process(kTYPE);
          }
        case 183: break;
        case 6: 
          { return process(tINNER_CLASS);
          }
        case 184: break;
        case 95: 
          { return process(ObjectKeyword());
          }
        case 185: break;
        case 74: 
          { return process(kLAZY);
          }
        case 186: break;
        case 79: 
          { return process(kSUPER);
          }
        case 187: break;
        case 73: 
          { return processScala3(EnumKeyword());
          }
        case 188: break;
        case 78: 
          { //for comments in interpolated strings
    return process(ScalaDocElementTypes.SCALA_DOC_COMMENT);
          }
        case 189: break;
        case 23: 
          { return process(tINTERPOLATED_STRING);
          }
        case 190: break;
        case 106: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { return process(kCASE);
          }
        case 191: break;
        case 71: 
          { return process(kCASE);
          }
        case 192: break;
        case 4: 
          { return process(tUNDER);
          }
        case 193: break;
        case 31: 
          { return process(Float());
          }
        case 194: break;
        case 60: 
          { return process(NewKeyword());
          }
        case 195: break;
        case 35: 
          { return process(tSYMBOL);
          }
        case 196: break;
        case 46: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(COMMON_STATE);
    return process(tINTERPOLATED_STRING_INJECTION);
          }
        case 197: break;
        case 17: 
          { return process(tASSIGN);
          }
        case 198: break;
        case 26: 
          { return process(tINTERPOLATED_MULTILINE_STRING);
          }
        case 199: break;
        case 47: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return process(tINTERPOLATED_MULTILINE_STRING);
          }
        case 200: break;
        case 64: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return process(tINTERPOLATED_MULTILINE_STRING);
          }
        case 201: break;
        case 96: 
          { return process(kIMPORT);
          }
        case 202: break;
        case 102: 
          { return process(kABSTRACT);
          }
        case 203: break;
        case 42: 
          { return process(kIF);
          }
        case 204: break;
        case 52: 
          { return process(tCHAR);
          }
        case 205: break;
        case 53: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return process(tCHAR);
          }
        case 206: break;
        case 18: 
          { return process(tFUNTYPE);
          }
        case 207: break;
        case 13: 
          { return process(tRSQBRACKET);
          }
        case 208: break;
        case 90: 
          { return process(kWHILE);
          }
        case 209: break;
        case 80: 
          { return process(TraitKeyword());
          }
        case 210: break;
        case 51: 
          { return process(kDEF);
          }
        case 211: break;
        case 72: 
          { return process(kELSE);
          }
        case 212: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
