/* The following code was generated by JFlex 1.4.3 on 11/18/20, 9:55 AM */

package org.jetbrains.plugins.scala.lang.lexer.core;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypesEx;
import org.jetbrains.plugins.scala.lang.scaladoc.parser.ScalaDocElementTypes;

import static com.intellij.openapi.util.text.StringUtil.endsWith;
import static org.jetbrains.plugins.scala.lang.lexer.ScalaTokenType.*;
import static org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/18/20, 9:55 AM from the specification file
 * <tt>scala.flex</tt>
 */
public class _ScalaCoreLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int INJ_COMMON_STATE = 10;
  public static final int INSIDE_MULTI_LINE_INTERPOLATED_STRING = 8;
  public static final int WAIT_FOR_INTERPOLATED_STRING = 4;
  public static final int INSIDE_INTERPOLATED_STRING = 6;
  public static final int COMMON_STATE = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\31\1\43\1\32\1\0\1\43\1\40\16\31\4\0\1\43\1\16"+
    "\1\36\1\17\1\37\1\115\1\20\1\35\1\55\1\56\1\21\1\22"+
    "\1\117\1\14\1\12\1\26\1\2\1\111\1\110\5\6\1\3\1\113"+
    "\1\23\1\116\1\44\1\57\1\27\1\45\1\24\1\34\1\7\1\47"+
    "\1\50\1\13\1\11\5\30\1\1\6\30\1\102\1\51\3\30\1\4"+
    "\2\30\1\46\1\25\1\53\1\20\1\5\1\15\1\60\1\61\1\65"+
    "\1\10\1\66\1\73\1\103\1\72\1\100\1\71\1\107\1\67\1\75"+
    "\1\74\1\70\1\77\1\30\1\64\1\62\1\63\1\33\1\104\1\106"+
    "\1\76\1\101\1\105\1\52\1\20\1\54\1\20\6\31\1\41\32\31"+
    "\2\0\4\30\1\20\2\0\1\20\1\30\1\0\1\20\1\31\1\20"+
    "\1\0\1\20\1\20\3\0\1\30\4\0\1\30\5\0\27\30\1\20"+
    "\37\30\1\20\u01ca\30\4\0\14\30\16\0\5\30\7\0\1\30\1\0"+
    "\1\30\21\0\160\31\5\30\1\0\2\30\2\0\4\30\1\0\1\30"+
    "\6\0\1\30\1\0\3\30\1\0\1\30\1\0\24\30\1\0\123\30"+
    "\1\20\213\30\1\20\5\31\2\0\246\30\1\0\46\30\2\0\1\30"+
    "\7\0\47\30\5\0\2\20\1\30\1\0\55\31\1\0\1\31\1\0"+
    "\2\31\1\0\2\31\1\0\1\31\10\0\33\30\5\0\3\30\15\0"+
    "\6\31\3\20\2\0\1\30\2\0\2\20\13\31\1\0\1\31\3\0"+
    "\53\30\37\31\4\0\2\30\1\31\143\30\1\0\1\30\10\31\1\20"+
    "\6\31\2\30\2\31\1\20\4\31\2\30\12\31\3\30\2\20\1\30"+
    "\17\0\1\31\1\30\1\31\36\30\33\31\2\0\131\30\13\31\1\30"+
    "\16\0\12\31\41\30\11\31\2\30\1\20\3\0\1\30\5\0\26\30"+
    "\4\31\1\30\11\31\1\30\3\31\1\30\5\31\22\0\31\30\3\31"+
    "\4\0\13\30\65\0\25\30\1\0\10\30\26\0\60\31\66\30\3\31"+
    "\1\30\22\31\1\30\7\31\12\30\2\31\2\0\12\31\1\0\20\30"+
    "\3\31\1\0\10\30\2\0\2\30\2\0\26\30\1\0\7\30\1\0"+
    "\1\30\3\0\4\30\2\0\1\31\1\30\7\31\2\0\2\31\2\0"+
    "\3\31\1\30\10\0\1\31\4\0\2\30\1\0\3\30\2\31\2\0"+
    "\12\31\4\30\6\0\1\20\2\30\4\0\3\31\1\0\6\30\4\0"+
    "\2\30\2\0\26\30\1\0\7\30\1\0\2\30\1\0\2\30\1\0"+
    "\2\30\2\0\1\31\1\0\5\31\4\0\2\31\2\0\3\31\3\0"+
    "\1\31\7\0\4\30\1\0\1\30\7\0\14\31\3\30\1\31\13\0"+
    "\3\31\1\0\11\30\1\0\3\30\1\0\26\30\1\0\7\30\1\0"+
    "\2\30\1\0\5\30\2\0\1\31\1\30\10\31\1\0\3\31\1\0"+
    "\3\31\2\0\1\30\17\0\2\30\2\31\2\0\12\31\1\0\1\30"+
    "\7\0\1\30\6\31\1\0\3\31\1\0\10\30\2\0\2\30\2\0"+
    "\26\30\1\0\7\30\1\0\2\30\1\0\5\30\2\0\1\31\1\30"+
    "\7\31\2\0\2\31\2\0\3\31\10\0\2\31\4\0\2\30\1\0"+
    "\3\30\2\31\2\0\12\31\1\20\1\30\20\0\1\31\1\30\1\0"+
    "\6\30\3\0\3\30\1\0\4\30\3\0\2\30\1\0\1\30\1\0"+
    "\2\30\3\0\2\30\3\0\3\30\3\0\14\30\4\0\5\31\3\0"+
    "\3\31\1\0\4\31\2\0\1\30\6\0\1\31\16\0\12\31\3\0"+
    "\6\20\1\30\1\20\5\0\4\31\1\0\10\30\1\0\3\30\1\0"+
    "\27\30\1\0\20\30\3\0\1\30\7\31\1\0\3\31\1\0\4\31"+
    "\7\0\2\31\1\0\3\30\5\0\2\30\2\31\2\0\12\31\17\0"+
    "\1\20\1\30\3\31\1\0\10\30\1\0\3\30\1\0\27\30\1\0"+
    "\12\30\1\0\5\30\2\0\1\31\1\30\7\31\1\0\3\31\1\0"+
    "\4\31\7\0\2\31\7\0\1\30\1\0\2\30\2\31\2\0\12\31"+
    "\1\0\2\30\15\0\4\31\1\0\10\30\1\0\3\30\1\0\51\30"+
    "\2\31\1\30\7\31\1\0\3\31\1\0\4\31\1\30\1\20\4\0"+
    "\3\30\1\31\7\0\3\30\2\31\2\0\12\31\11\0\1\20\6\30"+
    "\2\0\2\31\1\0\22\30\3\0\30\30\1\0\11\30\1\0\1\30"+
    "\2\0\7\30\3\0\1\31\4\0\6\31\1\0\1\31\1\0\10\31"+
    "\6\0\12\31\2\0\2\31\15\0\60\30\1\31\2\30\7\31\4\0"+
    "\10\30\10\31\1\0\12\31\47\0\2\30\1\0\1\30\2\0\2\30"+
    "\1\0\1\30\2\0\1\30\6\0\4\30\1\0\7\30\1\0\3\30"+
    "\1\0\1\30\1\0\1\30\2\0\2\30\1\0\4\30\1\31\2\30"+
    "\6\31\1\0\2\31\1\30\2\0\5\30\1\0\1\30\1\0\6\31"+
    "\2\0\12\31\2\0\4\30\40\0\1\30\3\20\17\0\1\20\1\0"+
    "\3\20\2\31\6\20\12\31\12\0\1\20\1\31\1\20\1\31\1\20"+
    "\1\31\4\0\2\31\10\30\1\0\44\30\4\0\24\31\1\0\2\31"+
    "\5\30\13\31\1\0\44\31\1\0\10\20\1\31\6\20\1\0\2\20"+
    "\5\0\4\20\47\0\53\30\24\31\1\30\12\31\6\0\6\30\4\31"+
    "\4\30\3\31\1\30\3\31\2\30\7\31\3\30\4\31\15\30\14\31"+
    "\1\30\17\31\2\20\46\30\1\0\1\30\5\0\1\30\2\0\53\30"+
    "\1\0\u014d\30\1\0\4\30\2\0\7\30\1\0\1\30\1\0\4\30"+
    "\2\0\51\30\1\0\4\30\2\0\41\30\1\0\4\30\2\0\7\30"+
    "\1\0\1\30\1\0\4\30\2\0\17\30\1\0\71\30\1\0\4\30"+
    "\2\0\103\30\2\0\3\31\40\0\20\30\12\20\6\0\126\30\2\0"+
    "\6\30\3\0\u026c\30\2\0\21\30\1\0\32\30\5\0\113\30\3\0"+
    "\13\30\7\0\15\30\1\0\4\30\3\31\13\0\22\30\3\31\13\0"+
    "\22\30\2\31\14\0\15\30\1\0\3\30\1\0\2\31\14\0\64\30"+
    "\40\31\3\0\1\30\3\0\2\30\1\31\2\0\12\31\41\0\4\31"+
    "\1\0\12\31\6\0\130\30\10\0\5\30\2\31\42\30\1\31\1\30"+
    "\5\0\106\30\12\0\37\30\1\0\14\31\4\0\14\31\4\0\1\20"+
    "\5\0\12\31\36\30\2\0\5\30\13\0\54\30\4\0\32\30\6\0"+
    "\12\31\4\0\42\20\27\30\5\31\4\0\65\30\12\31\1\0\35\31"+
    "\2\0\13\31\6\0\12\31\15\0\1\30\10\0\16\31\102\0\5\31"+
    "\57\30\21\31\7\30\4\0\12\31\7\0\12\20\11\31\11\20\3\0"+
    "\3\31\36\30\15\31\2\30\12\31\54\30\16\31\14\0\44\30\24\31"+
    "\10\0\12\31\3\0\3\30\12\31\44\30\2\0\11\30\107\0\3\31"+
    "\1\0\25\31\4\30\1\31\4\30\3\31\2\30\3\31\6\0\300\30"+
    "\72\31\1\0\5\31\u0116\30\2\0\6\30\2\0\46\30\2\0\6\30"+
    "\2\0\10\30\1\0\1\30\1\0\1\30\1\0\1\30\1\0\37\30"+
    "\2\0\65\30\1\0\7\30\1\0\1\30\3\0\3\30\1\0\7\30"+
    "\3\0\4\30\2\0\6\30\4\0\15\30\5\0\3\30\1\0\7\30"+
    "\16\0\5\31\30\0\1\42\1\42\5\31\20\0\2\30\3\0\1\20"+
    "\15\0\1\20\1\0\1\30\13\0\5\31\1\0\12\31\1\0\1\30"+
    "\10\0\3\20\2\0\1\30\12\0\3\20\3\0\15\30\3\0\40\30"+
    "\20\0\15\31\4\0\1\31\3\0\14\31\17\0\2\20\1\30\4\20"+
    "\1\30\2\20\12\30\1\20\1\30\2\20\1\20\5\30\6\20\1\30"+
    "\1\20\1\30\1\20\1\30\1\20\4\30\1\20\13\30\2\20\4\30"+
    "\5\20\5\30\1\20\1\20\2\20\1\30\1\20\20\0\51\30\1\0"+
    "\2\20\4\0\1\114\4\20\5\20\2\20\4\20\1\20\2\20\1\20"+
    "\2\20\1\20\7\20\1\20\37\20\2\20\2\20\1\112\1\20\1\20"+
    "\37\20\u010c\20\10\20\4\0\24\20\2\20\7\20\2\0\121\20\1\20"+
    "\36\20\31\20\50\20\6\20\105\20\31\0\13\20\121\0\116\20\26\0"+
    "\267\20\1\20\11\20\1\20\66\20\10\20\157\20\1\20\44\20\1\20"+
    "\323\20\54\0\54\20\5\20\2\0\37\20\12\0\20\20\u0100\20\203\20"+
    "\26\0\77\20\4\0\40\20\2\0\u0102\20\60\20\25\20\2\20\6\20"+
    "\47\20\2\0\40\20\2\0\42\20\3\0\14\20\1\0\11\20\31\0"+
    "\4\20\20\0\57\30\1\0\57\30\1\0\205\30\6\20\4\30\3\31"+
    "\2\30\14\0\46\30\1\0\1\30\5\0\1\30\2\0\70\30\7\0"+
    "\1\30\17\0\1\31\27\30\11\0\7\30\1\0\7\30\1\0\7\30"+
    "\1\0\7\30\1\0\7\30\1\0\7\30\1\0\7\30\1\0\7\30"+
    "\1\0\40\31\57\0\1\30\120\0\32\20\1\0\131\20\14\0\326\20"+
    "\32\0\14\20\10\0\1\20\3\30\12\0\2\20\14\0\1\20\11\30"+
    "\6\31\1\0\5\30\2\20\5\30\1\0\2\20\1\0\126\30\2\0"+
    "\2\31\2\0\3\30\1\0\132\30\1\0\4\30\5\0\52\30\2\0"+
    "\136\30\1\0\2\20\4\0\12\20\33\30\5\0\44\20\14\0\20\30"+
    "\37\20\13\0\36\20\10\0\1\20\17\0\40\20\12\0\47\20\17\0"+
    "\u0140\20\u19b6\30\12\0\100\20\u51eb\30\25\0\u048d\30\3\0\67\20\11\0"+
    "\56\30\2\0\u010d\30\3\0\20\30\12\31\2\30\24\0\57\30\1\31"+
    "\4\0\12\31\1\0\37\30\2\31\120\30\2\31\45\0\11\30\2\0"+
    "\147\30\2\0\44\30\1\0\10\30\77\0\13\30\1\31\3\30\1\31"+
    "\4\30\1\31\27\30\5\31\4\20\12\0\2\20\1\30\1\20\6\0"+
    "\64\30\14\0\2\31\62\30\22\31\12\0\12\31\6\0\22\31\6\30"+
    "\3\0\1\30\1\0\1\30\2\0\12\31\34\30\10\31\2\0\27\30"+
    "\15\31\14\0\35\30\3\0\4\31\57\30\16\31\16\0\1\30\12\31"+
    "\6\0\5\30\1\31\12\30\12\31\5\30\1\0\51\30\16\31\11\0"+
    "\3\30\1\31\10\30\2\31\2\0\12\31\6\0\27\30\3\20\1\30"+
    "\3\31\62\30\1\31\1\30\3\31\2\30\2\31\5\30\2\31\1\30"+
    "\1\31\1\30\30\0\3\30\2\0\13\30\5\31\2\0\3\30\2\31"+
    "\12\0\6\30\2\0\6\30\2\0\6\30\11\0\7\30\1\0\7\30"+
    "\1\0\53\30\1\0\12\30\12\0\163\30\10\31\1\0\2\31\2\0"+
    "\12\31\6\0\u2ba4\30\14\0\27\30\4\0\61\30\u2104\0\u016e\30\2\0"+
    "\152\30\46\0\7\30\14\0\5\30\5\0\1\30\1\31\12\30\1\20"+
    "\15\30\1\0\5\30\1\0\1\30\1\0\2\30\1\0\2\30\1\0"+
    "\154\30\41\0\u016b\30\22\0\100\30\2\0\66\30\50\0\15\30\1\20"+
    "\2\0\20\31\20\0\20\31\3\0\2\30\30\0\3\30\22\0\1\20"+
    "\1\0\3\20\2\0\1\30\6\0\5\30\1\0\207\30\2\0\1\31"+
    "\4\0\1\30\6\0\1\20\4\0\12\31\2\0\3\20\2\0\32\30"+
    "\4\0\1\30\1\0\32\30\1\0\1\20\1\0\1\20\7\0\131\30"+
    "\3\0\6\30\2\0\6\30\2\0\6\30\2\0\3\30\3\0\2\30"+
    "\1\20\1\0\1\20\2\30\1\0\1\20\4\20\2\20\12\0\3\31"+
    "\2\20\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\2\3\1\4\1\2\1\5\1\2"+
    "\1\1\1\6\1\7\1\10\3\2\1\11\1\1\1\12"+
    "\1\2\1\11\2\2\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\21\2\1\22\1\23\1\24\1\25\1\2"+
    "\1\26\1\27\1\12\1\30\1\31\2\12\1\32\3\12"+
    "\2\33\1\12\14\0\1\2\1\34\1\35\1\3\2\0"+
    "\1\36\1\37\1\36\1\0\1\2\1\40\1\36\1\0"+
    "\1\2\1\0\2\2\1\0\1\2\1\41\1\42\1\0"+
    "\3\43\1\0\1\44\1\12\1\0\1\45\1\46\1\47"+
    "\1\2\1\50\1\2\1\51\1\2\2\0\1\22\27\2"+
    "\1\52\6\2\1\26\3\0\2\53\1\0\1\54\1\55"+
    "\3\0\1\56\2\57\1\0\1\54\1\60\1\33\1\0"+
    "\1\33\14\0\1\2\1\34\2\0\1\36\1\3\3\61"+
    "\1\0\1\36\1\0\1\62\1\2\1\0\2\2\2\0"+
    "\2\2\1\63\3\43\2\0\1\45\1\0\1\2\1\0"+
    "\1\64\1\65\2\0\1\66\2\0\1\67\5\2\1\70"+
    "\20\2\1\71\2\2\1\72\10\2\1\73\1\74\2\2"+
    "\1\75\2\53\2\0\1\31\1\76\2\57\1\0\1\33"+
    "\5\0\1\34\1\0\2\61\2\0\1\77\1\2\2\0"+
    "\1\2\1\0\2\2\1\100\4\0\1\47\5\0\3\2"+
    "\1\101\2\2\1\102\1\103\1\104\1\2\1\105\2\2"+
    "\1\106\1\107\2\2\1\110\5\2\1\111\12\2\1\112"+
    "\1\0\1\53\1\113\1\57\2\0\1\61\1\77\1\0"+
    "\1\2\2\0\1\100\1\0\1\114\6\0\1\2\1\115"+
    "\1\2\1\116\1\117\1\2\1\0\1\2\1\120\1\121"+
    "\4\2\1\122\1\2\1\123\1\124\1\125\5\2\1\126"+
    "\1\127\1\130\4\0\1\2\1\22\1\23\1\114\2\0"+
    "\1\131\3\0\1\2\1\132\1\133\2\0\3\2\1\134"+
    "\1\135\7\2\1\136\1\0\1\2\3\0\1\2\2\0"+
    "\2\2\1\137\1\2\1\140\1\141\1\142\1\2\1\143"+
    "\1\2\1\0\1\77\3\0\1\144\2\0\2\2\1\145"+
    "\1\2\1\146\1\77\4\0\2\2\1\147\1\150\1\0"+
    "\1\150\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\u0190\0\u01e0\0\u0230"+
    "\0\u0280\0\u02d0\0\u0320\0\u0370\0\u03c0\0\u0410\0\u0370\0\u0460"+
    "\0\u04b0\0\u0500\0\u0550\0\u05a0\0\u05f0\0\u0500\0\u0640\0\u0690"+
    "\0\u06e0\0\u0730\0\u0780\0\u07d0\0\u0820\0\u0320\0\u0870\0\u08c0"+
    "\0\u0320\0\u0910\0\u0320\0\u0320\0\u0960\0\u0320\0\u09b0\0\u0a00"+
    "\0\u0a50\0\u0aa0\0\u0af0\0\u0b40\0\u0b90\0\u0be0\0\u0c30\0\u0c80"+
    "\0\u0cd0\0\u0d20\0\u0d70\0\u0dc0\0\u0e10\0\u0e60\0\u0eb0\0\u0f00"+
    "\0\u0500\0\u0500\0\u0320\0\u0320\0\u0f50\0\u0fa0\0\u0ff0\0\u1040"+
    "\0\u0320\0\u0320\0\u1090\0\u10e0\0\u1130\0\u1180\0\u11d0\0\u0320"+
    "\0\u1220\0\u1270\0\u12c0\0\u1310\0\u1360\0\u13b0\0\u1400\0\u1450"+
    "\0\u14a0\0\u14f0\0\u1540\0\u1590\0\u15e0\0\u1630\0\u1680\0\u16d0"+
    "\0\u1720\0\u0320\0\u1770\0\u17c0\0\u1810\0\u0320\0\u0320\0\u1860"+
    "\0\u18b0\0\u1900\0\u0370\0\u1950\0\u0550\0\u0320\0\u19a0\0\u19f0"+
    "\0\u1a40\0\u1a90\0\u1ae0\0\u1b30\0\u0500\0\u1b80\0\u1bd0\0\u1c20"+
    "\0\u1c70\0\u1cc0\0\u1b80\0\u1d10\0\u1d60\0\u1db0\0\u0320\0\u0320"+
    "\0\u1e00\0\u0500\0\u1e50\0\u0500\0\u1ea0\0\u1ef0\0\u1f40\0\u1f90"+
    "\0\u1fe0\0\u2030\0\u2080\0\u20d0\0\u2120\0\u2170\0\u21c0\0\u2210"+
    "\0\u2260\0\u22b0\0\u2300\0\u2350\0\u23a0\0\u23f0\0\u2440\0\u2490"+
    "\0\u24e0\0\u2530\0\u2580\0\u25d0\0\u2620\0\u2670\0\u26c0\0\u0370"+
    "\0\u2710\0\u2760\0\u27b0\0\u2800\0\u2850\0\u28a0\0\u28f0\0\u2940"+
    "\0\u2990\0\u1040\0\u29e0\0\u2a30\0\u2a80\0\u29e0\0\u0320\0\u10e0"+
    "\0\u2ad0\0\u2b20\0\u0320\0\u2b70\0\u2bc0\0\u2c10\0\u2b70\0\u0320"+
    "\0\u2c60\0\u12c0\0\u0320\0\u2cb0\0\u2d00\0\u2d50\0\u2da0\0\u2df0"+
    "\0\u2e40\0\u2e90\0\u2ee0\0\u2f30\0\u0320\0\u2f80\0\u2fd0\0\u3020"+
    "\0\u3070\0\u30c0\0\u3110\0\u3160\0\u31b0\0\u3200\0\u3250\0\u32a0"+
    "\0\u32f0\0\u3340\0\u3390\0\u0370\0\u0550\0\u33e0\0\u3430\0\u3480"+
    "\0\u34d0\0\u3520\0\u3570\0\u35c0\0\u0320\0\u3610\0\u3660\0\u36b0"+
    "\0\u3700\0\u3750\0\u0320\0\u37a0\0\u37f0\0\u3840\0\u0500\0\u0320"+
    "\0\u3890\0\u38e0\0\u0320\0\u3930\0\u3980\0\u0500\0\u39d0\0\u3a20"+
    "\0\u3a70\0\u3ac0\0\u3b10\0\u0370\0\u3b60\0\u3bb0\0\u3c00\0\u3c50"+
    "\0\u3ca0\0\u3cf0\0\u3d40\0\u3d90\0\u3de0\0\u3e30\0\u3e80\0\u3ed0"+
    "\0\u3f20\0\u3f70\0\u3fc0\0\u4010\0\u4060\0\u40b0\0\u4100\0\u0370"+
    "\0\u4150\0\u41a0\0\u41f0\0\u4240\0\u4290\0\u42e0\0\u4330\0\u4380"+
    "\0\u0370\0\u0370\0\u43d0\0\u4420\0\u4470\0\u44c0\0\u0320\0\u4510"+
    "\0\u4560\0\u45b0\0\u0320\0\u4600\0\u0320\0\u4650\0\u12c0\0\u46a0"+
    "\0\u46f0\0\u4740\0\u14a0\0\u2f30\0\u4790\0\u47e0\0\u4830\0\u0320"+
    "\0\u4880\0\u48d0\0\u19f0\0\u4920\0\u4970\0\u49c0\0\u4a10\0\u4a60"+
    "\0\u4ab0\0\u4b00\0\u0500\0\u4b50\0\u4ba0\0\u4bf0\0\u4c40\0\u0500"+
    "\0\u4c90\0\u4ce0\0\u4d30\0\u4d80\0\u4dd0\0\u4e20\0\u4e70\0\u4ec0"+
    "\0\u0370\0\u4f10\0\u4f60\0\u0370\0\u0370\0\u0370\0\u4fb0\0\u5000"+
    "\0\u5050\0\u50a0\0\u0370\0\u0370\0\u50f0\0\u5140\0\u0370\0\u5190"+
    "\0\u51e0\0\u5230\0\u5280\0\u52d0\0\u0370\0\u5320\0\u5370\0\u53c0"+
    "\0\u5410\0\u5460\0\u54b0\0\u5500\0\u5550\0\u55a0\0\u55f0\0\u0370"+
    "\0\u5640\0\u2a80\0\u45b0\0\u2c10\0\u5690\0\u56e0\0\u32f0\0\u33e0"+
    "\0\u5730\0\u5780\0\u57d0\0\u5820\0\u0320\0\u5870\0\u0500\0\u58c0"+
    "\0\u5910\0\u5960\0\u59b0\0\u5a00\0\u5a50\0\u5aa0\0\u0370\0\u5af0"+
    "\0\u0370\0\u0370\0\u5b40\0\u5b90\0\u5be0\0\u0370\0\u0370\0\u5c30"+
    "\0\u5c80\0\u5cd0\0\u5d20\0\u0370\0\u5d70\0\u5dc0\0\u0370\0\u0370"+
    "\0\u5e10\0\u5e60\0\u5eb0\0\u5f00\0\u5f50\0\u0370\0\u0370\0\u0370"+
    "\0\u5fa0\0\u2e90\0\u5ff0\0\u6040\0\u6090\0\u0320\0\u0320\0\u0320"+
    "\0\u60e0\0\u6130\0\u6180\0\u61d0\0\u6220\0\u6270\0\u62c0\0\u0370"+
    "\0\u0370\0\u6310\0\u6360\0\u63b0\0\u6400\0\u6450\0\u0370\0\u0370"+
    "\0\u64a0\0\u64f0\0\u6540\0\u6590\0\u65e0\0\u6630\0\u6680\0\u0370"+
    "\0\u66d0\0\u6720\0\u6770\0\u67c0\0\u6810\0\u6860\0\u68b0\0\u6900"+
    "\0\u6950\0\u69a0\0\u0370\0\u69f0\0\u0370\0\u0370\0\u0370\0\u6a40"+
    "\0\u0370\0\u6a90\0\u6ae0\0\u4920\0\u6b30\0\u6b80\0\u6bd0\0\u0370"+
    "\0\u6c20\0\u6c70\0\u6cc0\0\u6d10\0\u0370\0\u6d60\0\u0370\0\u5730"+
    "\0\u6db0\0\u6e00\0\u6e50\0\u6ea0\0\u6ef0\0\u6f40\0\u0370\0\u0320"+
    "\0\u6f90\0\u0370\0\u6fe0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\15\1\16\1\14\1\17\1\16\1\14"+
    "\1\20\1\14\1\21\1\14\1\22\1\23\1\22\1\24"+
    "\3\22\1\25\1\26\1\27\1\30\1\31\1\14\1\13"+
    "\1\32\2\14\1\33\1\34\1\35\3\32\1\36\1\37"+
    "\1\40\1\41\3\14\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\14\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\2\14\1\60\1\61\1\62\1\14\1\63"+
    "\1\64\1\65\1\14\1\66\1\67\1\14\1\70\1\14"+
    "\2\16\1\71\1\16\1\72\1\22\1\73\1\74\1\13"+
    "\1\14\1\15\1\16\1\14\1\17\1\16\1\14\1\20"+
    "\1\14\1\21\1\14\1\22\1\23\1\22\1\24\3\22"+
    "\1\25\1\26\1\27\1\30\1\31\1\14\1\13\1\32"+
    "\2\14\1\33\1\34\1\35\3\32\1\36\1\75\1\40"+
    "\1\41\3\14\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\14\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\2\14\1\60\1\61\1\62\1\14\1\63\1\64"+
    "\1\65\1\14\1\66\1\67\1\14\1\70\1\14\2\16"+
    "\1\71\1\16\1\72\1\22\1\73\1\74\36\0\1\76"+
    "\61\0\25\77\1\100\4\77\1\101\3\77\1\102\1\103"+
    "\1\104\57\77\36\105\1\106\1\107\60\105\1\110\1\111"+
    "\2\110\2\111\1\110\3\111\1\110\1\111\1\112\1\113"+
    "\12\112\1\111\2\110\2\111\2\110\1\111\4\110\2\112"+
    "\1\110\3\111\5\110\1\112\30\111\2\110\1\112\1\110"+
    "\2\112\2\110\1\0\1\114\2\0\2\114\1\0\3\114"+
    "\1\0\1\114\14\0\1\114\2\0\2\114\2\0\1\114"+
    "\7\0\3\114\6\0\30\114\10\0\25\115\1\116\4\115"+
    "\1\117\3\115\1\120\1\121\1\117\57\115\2\0\1\122"+
    "\1\123\2\0\1\123\101\0\2\123\1\0\1\123\5\0"+
    "\1\124\2\125\2\124\1\125\3\124\1\0\1\124\1\126"+
    "\1\127\12\126\1\124\1\125\1\0\2\124\2\0\1\124"+
    "\1\0\1\125\2\0\2\126\1\0\3\124\5\0\1\126"+
    "\30\124\2\125\1\126\1\125\2\126\123\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\32\14"+
    "\1\0\1\14\5\0\1\132\1\133\1\134\1\135\2\133"+
    "\1\0\1\136\1\137\1\140\1\141\34\0\1\136\15\0"+
    "\1\141\1\132\3\0\1\137\2\0\1\135\11\0\2\133"+
    "\1\0\1\134\5\0\1\132\2\16\1\0\2\16\1\0"+
    "\1\136\1\137\1\140\1\141\34\0\1\136\15\0\1\141"+
    "\1\132\3\0\1\137\14\0\2\16\1\0\1\16\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\6\14\1\142\1\14\1\143\21\14\1\0\1\14"+
    "\6\0\2\144\2\0\1\144\101\0\2\144\1\0\1\144"+
    "\20\0\1\22\1\0\12\22\14\0\2\22\11\0\1\22"+
    "\32\0\1\22\1\0\2\22\2\0\15\145\1\146\7\145"+
    "\1\147\4\145\1\0\5\145\3\0\55\145\14\0\1\22"+
    "\1\0\1\150\11\22\14\0\2\22\11\0\1\22\32\0"+
    "\1\22\1\0\2\22\16\0\1\22\1\0\5\22\1\151"+
    "\4\22\14\0\2\22\11\0\1\22\32\0\1\22\1\0"+
    "\2\22\16\0\1\22\1\0\12\22\3\0\1\152\10\0"+
    "\2\22\11\0\1\22\32\0\1\22\1\0\2\22\16\0"+
    "\1\22\1\0\3\22\1\153\4\22\1\154\1\22\14\0"+
    "\2\22\11\0\1\22\32\0\1\22\1\0\2\22\16\0"+
    "\1\22\1\0\5\22\1\155\4\22\14\0\2\22\11\0"+
    "\1\22\32\0\1\22\1\0\2\22\34\0\1\32\5\0"+
    "\4\32\54\0\1\156\1\157\2\156\2\157\1\156\3\157"+
    "\1\156\1\157\1\160\1\156\7\160\1\161\2\160\1\157"+
    "\1\156\1\0\2\157\1\162\1\156\1\157\1\0\3\156"+
    "\2\160\1\163\3\157\1\163\4\156\1\160\30\157\2\156"+
    "\1\160\1\156\2\160\2\156\25\164\1\165\4\164\1\0"+
    "\3\164\1\166\1\164\1\0\57\164\1\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\1\167\5\0"+
    "\32\14\1\0\1\14\5\0\1\170\2\0\2\170\1\0"+
    "\3\170\1\0\1\170\1\72\1\0\1\171\4\22\1\172"+
    "\4\22\1\170\2\0\2\170\2\0\1\170\4\0\1\22"+
    "\1\173\1\0\3\170\5\0\1\22\30\170\2\0\1\22"+
    "\1\0\1\22\1\174\16\0\1\22\1\0\12\22\14\0"+
    "\2\22\11\0\1\175\32\0\1\22\1\0\2\22\46\0"+
    "\1\176\117\0\1\177\67\0\1\22\1\0\11\22\1\200"+
    "\14\0\2\22\11\0\1\22\32\0\1\22\1\0\2\22"+
    "\3\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\1\14\1\201\30\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\1\202\1\14\1\0\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\6\14\1\203\23\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\4\14\1\204\5\14\1\205\6\14\1\206\10\14"+
    "\1\0\1\14\5\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\6\14\1\207\23\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\1\210\6\14\1\211\22\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\7\14\1\212\4\14\1\213\1\14"+
    "\1\214\13\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\1\215\31\14"+
    "\1\0\1\14\5\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\1\14\1\216\22\14\1\217"+
    "\5\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\1\220\7\14\1\221"+
    "\7\14\1\222\11\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\1\223\1\14"+
    "\1\0\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\6\14\1\224\23\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\1\225"+
    "\31\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\1\226\3\14\1\227"+
    "\25\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\13\14\1\230\1\14"+
    "\1\231\14\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\20\14\1\232"+
    "\11\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\20\14\1\233\11\14"+
    "\1\0\1\14\5\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\1\234\31\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\12\14\1\235\5\14\1\236\11\14\1\0"+
    "\1\14\20\0\1\72\1\0\5\22\1\172\4\22\14\0"+
    "\2\22\11\0\1\22\32\0\1\22\1\0\1\22\1\174"+
    "\2\0\25\237\1\240\4\237\1\0\3\237\1\241\2\0"+
    "\57\237\25\77\1\242\4\77\1\0\3\77\3\0\111\77"+
    "\1\0\5\77\1\0\57\77\1\0\1\243\2\0\2\243"+
    "\1\0\3\243\1\0\1\243\1\244\1\245\12\244\1\243"+
    "\2\0\2\243\2\0\1\246\4\0\2\244\1\0\3\243"+
    "\1\247\4\0\1\244\30\243\2\0\1\244\1\0\2\244"+
    "\34\0\1\101\5\0\1\250\57\0\36\105\1\251\1\0"+
    "\116\105\1\252\1\253\60\105\1\0\1\254\2\0\2\254"+
    "\1\0\3\254\1\0\1\254\1\255\1\256\12\255\1\254"+
    "\2\0\2\254\2\0\1\257\4\0\2\255\1\0\3\254"+
    "\1\260\4\0\1\255\30\254\2\0\1\255\1\0\2\255"+
    "\3\0\4\111\1\261\4\111\1\0\1\111\14\0\2\111"+
    "\1\0\2\111\2\0\1\111\1\0\1\111\5\0\3\111"+
    "\6\0\32\111\1\0\1\111\20\0\1\112\1\0\12\112"+
    "\14\0\2\112\11\0\1\112\32\0\1\112\1\0\2\112"+
    "\2\0\15\262\1\263\7\262\1\264\4\262\1\0\5\262"+
    "\3\0\55\262\1\0\4\114\1\265\4\114\1\0\1\114"+
    "\14\0\2\114\1\0\2\114\2\0\1\114\1\0\1\114"+
    "\5\0\3\114\6\0\32\114\1\0\1\114\4\0\32\115"+
    "\1\117\3\115\1\266\1\121\1\117\57\115\25\117\1\267"+
    "\10\117\1\270\1\0\116\117\1\270\1\0\60\117\25\0"+
    "\1\271\10\0\1\272\106\0\1\271\74\0\1\273\1\0"+
    "\1\274\2\273\67\0\1\274\11\0\2\273\10\0\2\123"+
    "\1\0\2\123\101\0\2\123\1\0\1\123\5\0\1\124"+
    "\2\125\2\124\1\125\3\124\1\275\1\124\14\0\1\124"+
    "\1\125\1\0\2\124\2\0\1\124\1\0\1\125\5\0"+
    "\3\124\6\0\30\124\2\125\1\0\1\125\5\0\1\124"+
    "\2\125\2\124\1\125\3\124\1\0\1\124\14\0\1\124"+
    "\1\125\1\0\2\124\2\0\1\124\1\0\1\125\5\0"+
    "\3\124\6\0\30\124\2\125\1\0\1\125\11\0\1\125"+
    "\4\0\1\275\1\0\1\126\1\0\12\126\14\0\2\126"+
    "\11\0\1\126\32\0\1\126\1\0\2\126\2\0\15\127"+
    "\1\276\14\127\1\0\5\127\1\0\2\277\55\127\1\0"+
    "\4\14\1\130\4\14\1\0\1\14\1\300\1\0\12\300"+
    "\2\14\1\0\2\14\1\0\1\131\1\14\1\0\1\14"+
    "\2\0\2\300\1\0\3\14\5\0\1\300\32\14\1\300"+
    "\1\14\2\300\2\0\25\301\1\302\4\301\1\0\3\301"+
    "\1\303\2\0\57\301\1\0\1\132\1\133\1\134\1\0"+
    "\2\133\1\0\1\136\1\137\1\140\1\141\34\0\1\136"+
    "\15\0\1\141\1\132\3\0\1\137\14\0\2\133\1\0"+
    "\1\134\6\0\2\134\1\0\2\134\1\0\1\136\1\137"+
    "\1\304\1\141\34\0\1\136\15\0\1\141\4\0\1\137"+
    "\14\0\2\134\1\0\1\134\6\0\2\305\1\0\5\305"+
    "\1\0\1\305\20\0\1\305\12\0\2\305\7\0\2\305"+
    "\3\0\2\305\4\0\1\305\14\0\2\305\1\0\1\305"+
    "\5\0\1\306\2\144\2\306\1\144\3\306\1\0\1\307"+
    "\1\310\1\311\12\310\1\306\2\0\2\306\2\0\1\306"+
    "\4\0\2\310\1\0\3\306\5\0\1\310\6\306\1\307"+
    "\21\306\2\144\1\310\1\144\2\310\4\0\2\312\2\0"+
    "\1\312\5\0\1\313\5\0\1\313\65\0\2\312\1\0"+
    "\1\312\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\13\14\1\314\16\14\1\0\1\14"+
    "\6\0\2\144\1\0\2\144\1\0\1\136\1\137\1\0"+
    "\1\141\34\0\1\136\15\0\1\141\4\0\1\137\14\0"+
    "\2\144\1\0\1\144\4\0\15\145\1\315\7\145\1\147"+
    "\4\145\1\0\5\145\1\0\57\145\14\316\1\150\1\316"+
    "\1\317\11\150\14\316\2\150\11\316\1\150\32\316\1\150"+
    "\1\316\2\150\2\316\14\0\1\22\1\0\1\22\1\320"+
    "\10\22\14\0\2\22\11\0\1\22\32\0\1\22\1\0"+
    "\2\22\112\0\1\321\7\0\14\322\1\323\1\322\3\323"+
    "\1\324\4\323\1\22\1\323\14\322\2\323\11\322\1\323"+
    "\32\322\1\323\1\322\2\323\2\322\32\154\1\0\5\154"+
    "\1\0\57\154\25\0\1\325\7\0\1\325\63\0\4\326"+
    "\1\327\4\326\1\0\1\326\11\0\1\325\2\0\2\326"+
    "\1\0\2\326\1\325\1\0\1\326\1\0\1\326\5\0"+
    "\3\326\6\0\32\326\1\0\1\326\20\0\1\330\1\0"+
    "\12\330\5\0\1\325\6\0\2\330\11\0\1\330\32\0"+
    "\1\330\1\0\2\330\2\0\2\156\1\331\3\156\1\331"+
    "\5\156\1\160\1\156\12\160\2\156\1\0\1\332\4\156"+
    "\1\0\3\156\2\160\11\156\1\160\30\156\2\331\1\160"+
    "\1\156\2\160\2\156\35\0\1\325\62\0\25\164\1\165"+
    "\4\164\1\0\3\164\1\333\1\164\1\0\111\164\1\0"+
    "\5\164\1\0\57\164\36\0\1\334\75\0\1\335\1\0"+
    "\12\22\14\0\2\22\1\336\10\0\1\22\32\0\1\22"+
    "\1\0\2\22\3\0\1\170\2\0\2\170\1\0\3\170"+
    "\1\0\1\170\1\22\1\0\12\22\1\170\2\0\2\170"+
    "\2\0\1\170\4\0\2\22\1\0\3\170\5\0\1\22"+
    "\30\170\2\0\1\22\1\0\2\22\16\0\1\22\1\0"+
    "\11\22\1\337\14\0\2\22\11\0\1\22\32\0\1\22"+
    "\1\0\2\22\3\0\1\340\2\0\2\340\1\0\3\340"+
    "\1\0\1\340\2\0\1\341\11\0\1\340\2\0\2\340"+
    "\2\0\1\340\5\0\1\342\1\0\3\340\6\0\30\340"+
    "\11\0\1\343\2\0\2\343\1\0\3\343\1\0\1\343"+
    "\2\0\1\344\11\0\1\343\2\0\2\343\2\0\1\343"+
    "\5\0\1\345\1\0\3\343\6\0\30\343\24\0\1\22"+
    "\1\0\11\22\1\346\14\0\2\22\11\0\1\22\32\0"+
    "\1\22\1\0\2\22\3\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\2\14\1\347\27\14"+
    "\1\0\1\14\5\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\17\14\1\350\12\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\1\351\31\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\1\352\1\14\1\0\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\1\353\20\14\1\354\10\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\4\14\1\355\1\14\1\356\11\14\1\357"+
    "\11\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\17\14\1\360\12\14"+
    "\1\0\1\14\5\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\3\14\1\361\26\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\2\14\1\362\1\363\26\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\1\364\31\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\2\14\1\365\27\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\1\366"+
    "\1\14\1\0\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\32\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\3\14\1\367"+
    "\13\14\1\370\12\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\25\14"+
    "\1\371\4\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\11\14\1\372"+
    "\20\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\6\14\1\373\23\14"+
    "\1\0\1\14\5\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\7\14\1\374\22\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\4\14\1\375\25\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\14\14\1\376\15\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\7\14\1\377\22\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\26\14\1\u0100\3\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\3\14"+
    "\1\u0101\1\14\1\u0102\24\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\5\14\1\u0103\24\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\10\14"+
    "\1\u0104\7\14\1\u0105\11\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\17\14\1\u0106\12\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\6\14"+
    "\1\u0107\23\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\24\14\1\u0108"+
    "\5\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\4\14\1\u0109\2\14"+
    "\1\u010a\22\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\20\14\1\u010b"+
    "\11\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\3\14\1\u010c\26\14"+
    "\1\0\1\14\4\0\25\237\1\240\4\237\1\0\3\237"+
    "\3\0\111\237\1\0\5\237\1\0\57\237\36\0\1\u010d"+
    "\62\0\4\243\1\u010e\4\243\1\0\1\243\14\0\2\243"+
    "\1\0\2\243\2\0\1\243\1\0\1\243\5\0\3\243"+
    "\6\0\32\243\1\0\1\243\20\0\1\244\1\0\12\244"+
    "\14\0\2\244\11\0\1\244\32\0\1\244\1\0\2\244"+
    "\2\0\15\245\1\u010f\7\245\1\u0110\4\245\1\0\5\245"+
    "\3\0\55\245\36\105\1\u0111\1\0\116\105\1\u0112\1\u0113"+
    "\60\105\1\0\4\254\1\u0114\4\254\1\0\1\254\14\0"+
    "\2\254\1\0\2\254\2\0\1\254\1\0\1\254\5\0"+
    "\3\254\6\0\32\254\1\0\1\254\20\0\1\255\1\0"+
    "\12\255\14\0\2\255\11\0\1\255\32\0\1\255\1\0"+
    "\2\255\2\0\15\256\1\u0115\7\256\1\u0116\4\256\1\0"+
    "\5\256\3\0\55\256\1\0\4\111\1\261\4\111\1\0"+
    "\1\111\1\112\1\0\12\112\2\111\1\0\2\111\2\0"+
    "\1\111\1\0\1\111\2\0\2\112\1\0\3\111\5\0"+
    "\1\112\32\111\1\112\1\111\2\112\2\0\15\262\1\u0117"+
    "\7\262\1\264\4\262\1\0\5\262\1\0\57\262\1\0"+
    "\4\114\1\265\4\114\1\0\1\114\1\u0118\1\0\12\u0118"+
    "\2\114\1\0\2\114\2\0\1\114\1\0\1\114\2\0"+
    "\2\u0118\1\0\3\114\5\0\1\u0118\32\114\1\u0118\1\114"+
    "\2\u0118\2\0\25\117\1\267\10\117\1\u0119\1\0\60\117"+
    "\25\115\1\116\4\115\1\117\3\115\1\266\1\121\1\117"+
    "\57\115\36\117\1\u0119\1\0\60\117\25\u011a\1\121\4\u011a"+
    "\1\0\3\u011a\1\u011b\1\121\1\0\57\u011a\36\0\1\275"+
    "\63\0\1\273\2\0\2\273\101\0\2\273\10\0\2\u011c"+
    "\1\0\5\u011c\1\0\1\u011c\20\0\1\u011c\12\0\2\u011c"+
    "\7\0\2\u011c\3\0\2\u011c\4\0\1\u011c\14\0\2\u011c"+
    "\1\0\1\u011c\16\0\1\275\12\0\1\127\117\0\1\127"+
    "\106\0\1\300\1\0\12\300\6\0\1\131\5\0\2\300"+
    "\11\0\1\300\32\0\1\300\1\0\2\300\2\0\25\301"+
    "\1\302\4\301\1\0\3\301\3\0\111\301\1\0\5\301"+
    "\1\0\57\301\36\0\1\u011d\63\0\2\144\2\0\1\144"+
    "\1\0\1\136\1\137\1\0\1\141\34\0\1\136\15\0"+
    "\1\141\4\0\1\137\14\0\2\144\1\0\1\144\5\0"+
    "\1\132\2\305\1\0\5\305\1\u011e\1\305\20\0\1\305"+
    "\12\0\2\305\7\0\2\305\3\0\2\305\1\132\3\0"+
    "\1\305\14\0\2\305\1\0\1\305\5\0\4\306\1\u011f"+
    "\4\306\1\0\1\306\14\0\2\306\1\0\2\306\2\0"+
    "\1\306\1\0\1\306\5\0\3\306\6\0\32\306\1\0"+
    "\1\306\5\0\4\306\1\u011f\4\306\1\0\1\306\1\313"+
    "\5\0\1\313\5\0\2\306\1\0\2\306\2\0\1\306"+
    "\1\0\1\306\5\0\3\306\6\0\32\306\1\0\1\306"+
    "\20\0\1\310\1\0\12\310\14\0\2\310\11\0\1\310"+
    "\32\0\1\310\1\0\2\310\2\0\15\311\1\u0120\7\311"+
    "\1\u0121\4\311\1\0\5\311\3\0\55\311\2\0\2\312"+
    "\1\0\2\312\1\0\1\136\1\137\36\0\1\136\22\0"+
    "\1\137\14\0\2\312\1\0\1\312\6\0\2\312\2\0"+
    "\1\312\101\0\2\312\1\0\1\312\4\0\16\316\1\u0122"+
    "\115\316\1\150\1\316\1\317\1\u0123\10\150\14\316\2\150"+
    "\11\316\1\150\32\316\1\150\1\316\2\150\2\316\14\0"+
    "\1\22\1\0\1\u0124\11\22\14\0\2\22\11\0\1\22"+
    "\32\0\1\22\1\0\2\22\113\0\1\u0125\6\0\21\322"+
    "\1\u0126\4\322\1\0\105\322\1\323\1\322\3\323\1\u0127"+
    "\4\323\1\22\1\323\14\322\2\323\11\322\1\323\32\322"+
    "\1\323\1\322\2\323\2\322\14\u0128\1\u0129\1\u0128\3\u0129"+
    "\1\u012a\4\u0129\1\u012b\1\u0129\14\u0128\2\u0129\11\u0128\1\u0129"+
    "\32\u0128\1\u0129\1\u0128\2\u0129\2\u0128\1\0\4\326\1\327"+
    "\4\326\1\0\1\326\14\0\2\326\1\0\2\326\2\0"+
    "\1\326\1\0\1\326\5\0\3\326\6\0\32\326\1\0"+
    "\1\326\5\0\4\326\1\327\4\326\1\0\1\326\1\330"+
    "\1\0\12\330\2\326\1\0\2\326\2\0\1\326\1\0"+
    "\1\326\2\0\2\330\1\0\3\326\5\0\1\330\32\326"+
    "\1\330\1\326\2\330\16\0\1\330\1\0\12\330\14\0"+
    "\2\330\11\0\1\330\32\0\1\330\1\0\2\330\4\0"+
    "\1\u012c\3\0\1\u012c\16\0\1\325\7\0\1\325\52\0"+
    "\2\u012c\10\0\1\u012d\1\u012e\2\0\4\u012e\1\0\1\u012e"+
    "\11\0\1\325\6\0\1\u012e\1\325\11\0\2\u012e\7\0"+
    "\2\u012e\3\0\2\u012e\4\0\1\u012e\14\0\2\u012e\1\0"+
    "\1\u012e\4\0\36\334\1\u012f\61\334\14\0\1\u0130\1\0"+
    "\12\22\14\0\2\22\11\0\1\22\32\0\1\22\1\0"+
    "\2\22\51\0\1\u0131\64\0\1\u0132\31\0\1\u0133\52\0"+
    "\1\340\2\0\2\340\1\0\3\340\1\0\1\340\14\0"+
    "\1\340\2\0\2\340\2\0\1\340\7\0\3\340\6\0"+
    "\30\340\24\0\1\u0134\31\0\1\u0135\52\0\1\343\2\0"+
    "\2\343\1\0\3\343\1\0\1\343\14\0\1\343\2\0"+
    "\2\343\2\0\1\343\7\0\3\343\6\0\30\343\11\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\3\14\1\u0136\26\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\6\14\1\u0137\23\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\7\14"+
    "\1\u0138\22\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\6\14\1\u0139"+
    "\23\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\20\14\1\u013a\11\14"+
    "\1\0\1\14\5\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\10\14\1\u013b\21\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\14\14\1\u013c\15\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\2\14\1\u013d\27\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\6\14\1\u013e\23\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\1\u013f"+
    "\1\14\1\0\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\32\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\6\14\1\u0140"+
    "\23\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\5\14\1\u0141\24\14"+
    "\1\0\1\14\5\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\2\14\1\u0142\27\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\6\14\1\u0143\23\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\15\14\1\u0144\14\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\6\14\1\u0145\23\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\10\14\1\u0146\21\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\21\14"+
    "\1\u0147\10\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\6\14\1\u0148"+
    "\23\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\4\14\1\u0149\25\14"+
    "\1\0\1\14\5\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\2\14\1\u014a\27\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\22\14\1\u014b\7\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\1\u014c\31\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\7\14\1\u014d\22\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\5\14"+
    "\1\u014e\24\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\4\14\1\u014f"+
    "\25\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\27\14\1\u0150\2\14"+
    "\1\0\1\14\5\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\3\14\1\u0151\26\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\24\14\1\u0152\5\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\7\14\1\u0153\1\u0154\21\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\7\14\1\u0155\22\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\6\14\1\u0156\23\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\7\14\1\u0157\22\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\12\14"+
    "\1\u0158\17\14\1\0\1\14\4\0\36\u010d\1\u0159\1\0"+
    "\60\u010d\1\0\4\243\1\u010e\4\243\1\0\1\243\1\244"+
    "\1\0\12\244\2\243\1\0\2\243\2\0\1\243\1\0"+
    "\1\243\2\0\2\244\1\0\3\243\5\0\1\244\32\243"+
    "\1\244\1\243\2\244\2\0\15\245\1\u015a\7\245\1\u0110"+
    "\4\245\1\0\5\245\1\0\57\245\36\105\2\0\60\105"+
    "\36\0\1\u015b\62\0\4\254\1\u0114\4\254\1\0\1\254"+
    "\1\255\1\0\12\255\2\254\1\0\2\254\2\0\1\254"+
    "\1\0\1\254\2\0\2\255\1\0\3\254\5\0\1\255"+
    "\32\254\1\255\1\254\2\255\2\0\15\256\1\u015c\7\256"+
    "\1\u0116\4\256\1\0\5\256\1\0\57\256\14\0\1\u0118"+
    "\1\0\12\u0118\14\0\2\u0118\11\0\1\u0118\32\0\1\u0118"+
    "\1\0\2\u0118\2\0\36\117\1\u015d\1\0\60\117\32\u011a"+
    "\1\0\3\u011a\1\u011b\1\121\1\0\57\u011a\36\u011d\1\u015e"+
    "\1\0\60\u011d\1\0\1\306\2\0\2\306\1\0\3\306"+
    "\1\0\1\306\1\310\1\311\12\310\1\306\2\0\2\306"+
    "\2\0\1\306\4\0\2\310\1\0\3\306\5\0\1\310"+
    "\30\306\2\0\1\310\1\0\2\310\3\0\4\306\1\u011f"+
    "\4\306\1\0\1\306\1\310\1\0\12\310\2\306\1\0"+
    "\2\306\2\0\1\306\1\0\1\306\2\0\2\310\1\0"+
    "\3\306\5\0\1\310\32\306\1\310\1\306\2\310\2\0"+
    "\15\311\1\u015f\7\311\1\u0121\4\311\1\0\5\311\1\0"+
    "\57\311\16\316\1\u0122\1\u0160\100\316\14\u0161\1\u0124\1\u0161"+
    "\5\u0124\1\u0162\4\u0124\14\u0161\2\u0124\11\u0161\1\u0124\32\u0161"+
    "\1\u0124\1\u0161\2\u0124\2\u0161\50\0\1\u0163\42\0\1\u0164"+
    "\4\0\21\322\1\u0126\4\322\1\u0165\105\322\1\323\1\322"+
    "\3\323\1\u0127\4\323\1\u012b\1\323\14\322\2\323\11\322"+
    "\1\323\32\322\1\323\1\322\2\323\2\322\21\u0128\1\u0166"+
    "\4\u0128\1\0\105\u0128\1\u0129\1\u0128\3\u0129\1\u012a\4\u0129"+
    "\1\22\1\u0129\14\u0128\2\u0129\11\u0128\1\u0129\32\u0128\1\u0129"+
    "\1\u0128\2\u0129\16\u0128\1\u0129\1\u0128\3\u0129\1\u012a\4\u0129"+
    "\1\u0167\1\u0129\14\u0128\2\u0129\11\u0128\1\u0129\32\u0128\1\u0129"+
    "\1\u0128\2\u0129\2\u0128\2\0\1\156\3\0\1\156\16\0"+
    "\1\325\7\0\1\325\52\0\2\156\10\0\1\u0168\1\u0169"+
    "\2\0\4\u0169\1\0\1\u0169\20\0\1\u0169\12\0\2\u0169"+
    "\7\0\2\u0169\3\0\2\u0169\4\0\1\u0169\14\0\2\u0169"+
    "\1\0\1\u0169\6\0\2\u0169\2\0\4\u0169\1\0\1\u0169"+
    "\20\0\1\u0169\12\0\2\u0169\7\0\2\u0169\3\0\2\u0169"+
    "\4\0\1\u0169\14\0\2\u0169\1\0\1\u0169\4\0\36\334"+
    "\1\u016a\61\334\50\0\1\u016b\63\0\1\340\152\0\1\u016c"+
    "\64\0\1\343\152\0\1\u016d\51\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\4\14\1\u016e"+
    "\25\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\4\14\1\u016f\25\14"+
    "\1\0\1\14\5\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\6\14\1\u0170\23\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\3\14\1\u0171\26\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\26\14\1\u0172\3\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\4\14\1\u0173\25\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\u0174\2\14"+
    "\1\0\1\131\1\14\1\u0174\1\u0175\2\u0174\3\0\3\14"+
    "\6\0\32\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\12\14\1\u0176"+
    "\17\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\2\14\1\u0177\27\14"+
    "\1\0\1\14\5\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\14\14\1\u0178\15\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\4\14\1\u0179\25\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\5\14\1\u017a\24\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\4\14\1\u017b\25\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\6\14\1\u017c\23\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\10\14"+
    "\1\u017d\21\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\7\14\1\u017e"+
    "\22\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\12\14\1\u017f\17\14"+
    "\1\0\1\14\5\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\10\14\1\u0180\21\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\1\u0181\31\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\6\14\1\u0182\23\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\1\u0183\31\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\20\14\1\u0184"+
    "\11\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\4\14\1\u0185\25\14"+
    "\1\0\1\14\5\0\4\14\1\130\2\14\1\u0186\1\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\32\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\14\14\1\u0187\15\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\6\14\1\u0188\23\14\1\0\1\14\4\0"+
    "\36\u010d\1\u0189\1\0\60\u010d\36\0\1\u018a\61\0\36\u011d"+
    "\1\u018b\1\0\60\u011d\23\u0161\1\u018c\110\u0161\1\u0124\1\u0161"+
    "\5\u0124\1\u018d\4\u0124\14\u0161\2\u0124\11\u0161\1\u0124\32\u0161"+
    "\1\u0124\1\u0161\2\u0124\2\u0161\110\0\1\u018e\11\0\1\u018f"+
    "\115\0\21\u0128\1\u0166\4\u0128\1\u0190\71\u0128\2\0\1\u0191"+
    "\1\u0192\2\0\4\u0192\1\0\1\u0192\20\0\1\u0192\12\0"+
    "\2\u0192\7\0\2\u0192\3\0\2\u0192\4\0\1\u0192\14\0"+
    "\2\u0192\1\0\1\u0192\6\0\2\u0192\2\0\4\u0192\1\0"+
    "\1\u0192\20\0\1\u0192\12\0\2\u0192\7\0\2\u0192\3\0"+
    "\2\u0192\4\0\1\u0192\14\0\2\u0192\1\0\1\u0192\4\0"+
    "\36\334\1\u0193\61\334\34\0\1\u0194\133\0\1\u0195\117\0"+
    "\1\u0196\50\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\1\u0197\31\14\1\0\1\14\5\0"+
    "\4\14\1\130\2\14\1\u0198\1\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\32\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\14\14\1\u0199\15\14\1\0\1\14\36\0\1\u0174\5\0"+
    "\4\u0174\21\0\1\u019a\2\0\1\u019b\30\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\u0174\2\14\1\0"+
    "\1\131\1\14\1\u0174\1\u0175\2\u0174\3\0\3\14\6\0"+
    "\5\14\1\u019c\2\14\1\u019d\21\14\1\0\1\14\5\0"+
    "\4\14\1\130\2\14\1\u019e\1\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\32\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\3\14\1\u019f\26\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\3\14"+
    "\1\u01a0\26\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\20\14\1\u01a1"+
    "\11\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\15\14\1\u01a2\14\14"+
    "\1\0\1\14\5\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\7\14\1\u01a3\22\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\23\14\1\u01a4\6\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\5\14\1\u01a5\24\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\3\14\1\u01a6\26\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\5\14\1\u01a7\24\14\1\0\1\14\5\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\3\14"+
    "\1\u01a8\26\14\1\0\1\14\4\0\36\u010d\2\0\60\u010d"+
    "\36\u011d\2\0\60\u011d\23\u0161\1\u01a9\110\u0161\1\u0124\1\u0161"+
    "\1\u01aa\4\u0124\1\u018d\4\u0124\14\u0161\2\u0124\11\u0161\1\u0124"+
    "\32\u0161\1\u0124\1\u0161\2\u0124\2\u0161\2\0\2\156\2\0"+
    "\4\156\1\0\1\156\20\0\1\162\12\0\2\156\7\0"+
    "\2\156\3\0\2\156\4\0\1\156\14\0\2\156\1\0"+
    "\1\156\6\0\2\156\2\0\4\156\1\0\1\156\20\0"+
    "\1\156\12\0\2\156\7\0\2\156\3\0\2\156\4\0"+
    "\1\156\14\0\2\156\1\0\1\156\42\0\1\u0193\132\0"+
    "\1\u01ab\102\0\1\u01ac\117\0\1\u01ad\64\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\5\14"+
    "\1\u01ae\24\14\1\0\1\14\73\0\1\u01af\111\0\1\u01b0"+
    "\37\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\7\14\1\u01b1\22\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\1\14\1\u01b2\30\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\2\14\1\u01b3\27\14\1\0\1\14\5\0\4\14\1\130"+
    "\2\14\1\u01b4\1\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\32\14\1\0\1\14\5\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\6\14\1\u01b5"+
    "\23\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\21\14\1\u01b6\10\14"+
    "\1\0\1\14\5\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\6\14\1\u01b7\23\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\3\14\1\u01b8\26\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\6\14\1\u01b9\23\14\1\0\1\14\5\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\20\14\1\u01ba\11\14\1\0\1\14\4\0\16\u0161"+
    "\1\u01bb\4\u0161\1\u01a9\110\u0161\1\u0124\1\u0161\1\u0124\1\u01bc"+
    "\3\u0124\1\u0162\4\u0124\14\u0161\2\u0124\11\u0161\1\u0124\32\u0161"+
    "\1\u0124\1\u0161\2\u0124\2\u0161\34\0\1\u01bd\134\0\1\u01be"+
    "\117\0\1\u01bf\47\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\3\14\1\u01c0\26\14\1\0"+
    "\1\14\64\0\1\u01c1\130\0\1\u01c2\27\0\4\14\1\130"+
    "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0"+
    "\1\131\1\14\1\0\1\14\5\0\3\14\6\0\1\u01c3"+
    "\31\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\11\14\1\u01c4\20\14"+
    "\1\0\1\14\5\0\4\14\1\130\4\14\1\0\1\14"+
    "\14\0\2\14\1\0\2\14\1\0\1\131\1\14\1\0"+
    "\1\14\5\0\3\14\6\0\6\14\1\u01c5\23\14\1\0"+
    "\1\14\5\0\4\14\1\130\4\14\1\0\1\14\14\0"+
    "\2\14\1\0\2\14\1\0\1\131\1\14\1\0\1\14"+
    "\5\0\3\14\6\0\6\14\1\u01c6\23\14\1\0\1\14"+
    "\5\0\4\14\1\130\4\14\1\0\1\14\14\0\2\14"+
    "\1\0\2\14\1\0\1\131\1\14\1\0\1\14\5\0"+
    "\3\14\6\0\3\14\1\u01c7\26\14\1\0\1\14\4\0"+
    "\17\u0161\1\u01c8\3\u0161\1\u018c\74\u0161\46\0\1\170\105\0"+
    "\1\u01c9\117\0\1\u01ca\145\0\1\u01cb\123\0\1\u01cc\32\0"+
    "\4\14\1\130\4\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\2\14\1\u01cd\27\14\1\0\1\14\5\0\4\14"+
    "\1\130\4\14\1\0\1\14\14\0\2\14\1\0\2\14"+
    "\1\0\1\131\1\14\1\0\1\14\5\0\3\14\6\0"+
    "\6\14\1\u01ce\23\14\1\0\1\14\5\0\4\14\1\130"+
    "\2\14\1\u01cf\1\14\1\0\1\14\14\0\2\14\1\0"+
    "\2\14\1\0\1\131\1\14\1\0\1\14\5\0\3\14"+
    "\6\0\32\14\1\0\1\14\52\0\1\340\117\0\1\343"+
    "\133\0\1\u01d0\122\0\1\u01d1\33\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\2\14\1\u01d2"+
    "\27\14\1\0\1\14\5\0\4\14\1\130\4\14\1\0"+
    "\1\14\14\0\2\14\1\0\2\14\1\0\1\131\1\14"+
    "\1\0\1\14\5\0\3\14\6\0\5\14\1\u01d3\24\14"+
    "\1\0\1\14\67\0\1\u01d0\35\0\4\14\1\130\4\14"+
    "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\131"+
    "\1\14\1\0\1\14\5\0\3\14\6\0\3\14\1\u01d2"+
    "\26\14\1\0\1\14\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28720];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\11\22\1\1\11\2\1\1\11\1\1\2\11"+
    "\1\1\1\11\24\1\2\11\4\1\2\11\5\1\1\11"+
    "\4\1\3\0\1\1\1\0\2\1\4\0\2\1\1\11"+
    "\1\1\2\0\2\11\1\1\1\0\3\1\1\0\1\11"+
    "\1\0\2\1\1\0\3\1\1\0\3\1\1\0\2\1"+
    "\1\0\1\1\2\11\5\1\2\0\40\1\3\0\2\1"+
    "\1\0\1\1\1\11\3\0\1\11\2\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\11\1\0\2\1\4\0\1\1"+
    "\1\0\1\11\2\0\2\1\2\0\5\1\1\0\1\1"+
    "\1\0\2\1\1\0\2\1\2\0\2\1\1\11\3\1"+
    "\2\0\1\11\1\0\1\1\1\0\1\1\1\11\2\0"+
    "\1\11\2\0\51\1\1\11\2\0\1\1\1\11\1\1"+
    "\1\11\1\0\2\1\2\0\3\1\1\0\1\1\1\11"+
    "\2\0\2\1\2\0\1\1\1\0\3\1\4\0\1\1"+
    "\5\0\43\1\1\0\4\1\1\0\2\1\1\0\1\1"+
    "\2\0\1\11\1\0\1\1\6\0\6\1\1\0\24\1"+
    "\1\0\1\1\2\0\1\1\3\11\2\0\1\1\3\0"+
    "\3\1\2\0\15\1\1\0\1\1\3\0\1\1\2\0"+
    "\12\1\1\0\1\1\3\0\1\1\2\0\6\1\4\0"+
    "\3\1\1\11\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public _ScalaCoreLexer(boolean isScala3) {
      this((java.io.Reader) null);
      this.isScala3 = isScala3;
    }

    private static abstract class InterpolatedStringLevel {
      private int value = 0;

      public int get() {
        return value;
      }

      public boolean isZero() {
        return value == 0;
      }

      public void increase() {
        ++value;
      }

      public void decrease() {
        --value;
      }

      public abstract int getState();
    }

    private static class RegularLevel extends InterpolatedStringLevel {
      public int getState() {
        return INSIDE_INTERPOLATED_STRING;
      }
    }

    private static class MultilineLevel extends InterpolatedStringLevel {
      public int getState() {
        return INSIDE_MULTI_LINE_INTERPOLATED_STRING;
      }
    }

    private boolean isScala3;
    //to get id after $ in interpolated String
    private boolean haveIdInString = false;
    private boolean haveIdInMultilineString = false;
    // Currently opened interpolated Strings. Each int represents the number of the opened left structural braces in the String
    private Stack<InterpolatedStringLevel> nestedString = new Stack<>();

    public boolean isInterpolatedStringState() {
        return shouldProcessBracesForInterpolated() ||
               haveIdInString ||
               haveIdInMultilineString ||
               yystate() == INSIDE_INTERPOLATED_STRING ||
               yystate() == INSIDE_MULTI_LINE_INTERPOLATED_STRING;
    }

    private boolean shouldProcessBracesForInterpolated() {
      return !nestedString.isEmpty();
    }

    @NotNull
    private IElementType processOutsideString() {
      if (shouldProcessBracesForInterpolated()) nestedString.pop();
      yybegin(COMMON_STATE);
      return process(tINTERPOLATED_STRING_END);
    }

    @NotNull
    private IElementType process(@NotNull IElementType type){
      if ((type == tIDENTIFIER || type == kTHIS)) {
        if (haveIdInString) {
          haveIdInString = false;
          yybegin(INSIDE_INTERPOLATED_STRING);
        } else if (haveIdInMultilineString) {
          haveIdInMultilineString = false;
          yybegin(INSIDE_MULTI_LINE_INTERPOLATED_STRING);
        }
      }

      if (yystate() == YYINITIAL && type != tWHITE_SPACE_IN_LINE && type != tLBRACE && type != tLPARENTHESIS) {
        yybegin(COMMON_STATE);
      }

      return type;
    }

    @NotNull
    private IElementType processInsideString(boolean isInsideMultiline) {
        boolean isEscape = yycharat(1) == '$';
        if (!isEscape) {
            if (isInsideMultiline) {
                haveIdInMultilineString = true;
            } else {
                haveIdInString = true;
            }
            yybegin(INJ_COMMON_STATE);
        }

        yypushback(yylength() - 1 - (isEscape ? 1 : 0));
        return process(isEscape ? tINTERPOLATED_STRING_ESCAPE : tINTERPOLATED_STRING_INJECTION);
    }

    private IElementType processScala3(@NotNull IElementType type) {
        return process(isScala3 ? type : tIDENTIFIER);
    }


  public _ScalaCoreLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaCoreLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2704) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    
    haveIdInString = false;
    nestedString.clear();
    
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    
    haveIdInString = false;
    nestedString.clear();
    
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 80: 
          { return process(kCATCH);
          }
        case 105: break;
        case 3: 
          { return process(Integer());
          }
        case 106: break;
        case 49: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 8;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzFPos++]:zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 9;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[--zzFPos]:zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { return process(Integer());
          }
        case 107: break;
        case 103: 
          { return process(kPROTECTED);
          }
        case 108: break;
        case 48: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(COMMON_STATE);
      return process(tINTERPOLATED_STRING_INJECTION);
          }
        case 109: break;
        case 34: 
          { return process(tLOWER_BOUND);
          }
        case 110: break;
        case 33: 
          { return process(tLINE_COMMENT);
          }
        case 111: break;
        case 24: 
          { // Process new lines as string ending, but mark them as errors in the parser
    return processOutsideString();
          }
        case 112: break;
        case 53: 
          { if (shouldProcessBracesForInterpolated()) {
                                              nestedString.peek().increase();
                                            }

                                            yypushback(yylength() - 1);
                                            yybegin(YYINITIAL);
                                            return process(tLBRACE);
          }
        case 113: break;
        case 63: 
          { return process(tSH_COMMENT);
          }
        case 114: break;
        case 7: 
          { return process(tCOLON);
          }
        case 115: break;
        case 95: 
          { return process(kEXTENDS);
          }
        case 116: break;
        case 64: 
          { //for comments in interpolated strings
    return process(tBLOCK_COMMENT);
          }
        case 117: break;
        case 39: 
          { yybegin(COMMON_STATE);
                                            yypushback(yylength());
                                            return ScalaTokenTypesEx.SCALA_XML_CONTENT_START;
          }
        case 118: break;
        case 66: 
          { return processScala3(ThenKeyword());
          }
        case 119: break;
        case 59: 
          { return process(kVAR);
          }
        case 120: break;
        case 61: 
          { yybegin(INSIDE_MULTI_LINE_INTERPOLATED_STRING);
    nestedString.push(new MultilineLevel());
    return process(tINTERPOLATED_MULTILINE_STRING);
          }
        case 121: break;
        case 91: 
          { return process(kRETURN);
          }
        case 122: break;
        case 25: 
          { return processOutsideString();
          }
        case 123: break;
        case 20: 
          { return process(tSEMICOLON);
          }
        case 124: break;
        case 65: 
          { return process(kTRUE);
          }
        case 125: break;
        case 75: 
          { yypushback(yylength() - 1);
    return process(tINTERPOLATED_MULTILINE_STRING);
          }
        case 126: break;
        case 10: 
          { return process(tWRONG_STRING);
          }
        case 127: break;
        case 1: 
          { return process(tSTUB);
          }
        case 128: break;
        case 74: 
          { return process(kWITH);
          }
        case 129: break;
        case 40: 
          { return process(tUPPER_BOUND);
          }
        case 130: break;
        case 5: 
          { return process(tDOT);
          }
        case 131: break;
        case 84: 
          { return process(kMATCH);
          }
        case 132: break;
        case 21: 
          { return process(tCOMMA);
          }
        case 133: break;
        case 37: 
          { return process(tSTRING);
          }
        case 134: break;
        case 67: 
          { return process(kTHIS);
          }
        case 135: break;
        case 79: 
          { return process(kTHROW);
          }
        case 136: break;
        case 60: 
          { return process(kVAL);
          }
        case 137: break;
        case 99: 
          { return process(kPRIVATE);
          }
        case 138: break;
        case 73: 
          { return process(kNULL);
          }
        case 139: break;
        case 44: 
          { return process(tINTERPOLATED_STRING_ESCAPE);
          }
        case 140: break;
        case 29: 
          { return process(Long());
          }
        case 141: break;
        case 97: 
          { return process(kFINALLY);
          }
        case 142: break;
        case 96: 
          { return process(kFOR_SOME);
          }
        case 143: break;
        case 14: 
          { if (shouldProcessBracesForInterpolated()) {
                                              InterpolatedStringLevel level = nestedString.peek();
                                              level.decrease();

                                              if (level.isZero()) {
                                                yybegin(level.getState());
                                              }
                                            }
                                            return process(tRBRACE);
          }
        case 144: break;
        case 90: 
          { return process(kSEALED);
          }
        case 145: break;
        case 43: 
          { return processInsideString(false);
          }
        case 146: break;
        case 101: 
          { return process(kOVERRIDE);
          }
        case 147: break;
        case 98: 
          { return process(kPACKAGE);
          }
        case 148: break;
        case 11: 
          { return process(tLSQBRACKET);
          }
        case 149: break;
        case 92: 
          { return processScala3(ExportKeyword());
          }
        case 150: break;
        case 32: 
          { return process(kDO);
          }
        case 151: break;
        case 52: 
          { return processScala3(ImplicitFunctionArrow());
          }
        case 152: break;
        case 57: 
          { return process(kFOR);
          }
        case 153: break;
        case 30: 
          { return process(Double());
          }
        case 154: break;
        case 36: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { if (isScala3) {
    return processScala3(QuoteStart());
  }
          }
        case 155: break;
        case 82: 
          { return process(kFALSE);
          }
        case 156: break;
        case 19: 
          { return process(tCHOOSE);
          }
        case 157: break;
        case 86: 
          { return process(kYIELD);
          }
        case 158: break;
        case 54: 
          { yypushback(yylength() - 1);
                                            yybegin(YYINITIAL);
                                            return process(tLPARENTHESIS);
          }
        case 159: break;
        case 8: 
          { return process(tAT);
          }
        case 160: break;
        case 22: 
          { yybegin(INSIDE_INTERPOLATED_STRING);
    nestedString.push(new RegularLevel());
    return process(tINTERPOLATED_STRING);
          }
        case 161: break;
        case 55: 
          { return processScala3(TypeLambdaArrow());
          }
        case 162: break;
        case 81: 
          { return process(ClassKeyword());
          }
        case 163: break;
        case 2: 
          { return process(tIDENTIFIER);
          }
        case 164: break;
        case 16: 
          { return process(tRPARENTHESIS);
          }
        case 165: break;
        case 85: 
          { return process(kMACRO);
          }
        case 166: break;
        case 9: 
          { yybegin(YYINITIAL);
                                            return process(tWHITE_SPACE_IN_LINE);
          }
        case 167: break;
        case 41: 
          { return process(tVIEW);
          }
        case 168: break;
        case 87: 
          { return processScala3(GivenKeyword());
          }
        case 169: break;
        case 38: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { if (isScala3) {
    return processScala3(SpliceStart());
  }
          }
        case 170: break;
        case 102: 
          { return process(kIMPLICIT);
          }
        case 171: break;
        case 15: 
          { return process(tLPARENTHESIS);
          }
        case 172: break;
        case 27: 
          { int length = yylength();
  int number = length;
  for (int i = 1; i < length; i++) {
    if (yycharat(i) == '$') {
      number = i;
      break;
    }
  }

  yypushback(length - number);
  boolean isThis = "this".contentEquals(yytext());
  return process(isThis ? kTHIS : tIDENTIFIER);
          }
        case 173: break;
        case 12: 
          { if (shouldProcessBracesForInterpolated()) {
                                              nestedString.peek().increase();
                                            }

                                            return process(tLBRACE);
          }
        case 174: break;
        case 47: 
          { return processInsideString(true);
          }
        case 175: break;
        case 89: 
          { return process(tMULTILINE_STRING);
          }
        case 176: break;
        case 83: 
          { return process(kFINAL);
          }
        case 177: break;
        case 56: 
          { return process(kTRY);
          }
        case 178: break;
        case 68: 
          { return process(kTYPE);
          }
        case 179: break;
        case 6: 
          { return process(tINNER_CLASS);
          }
        case 180: break;
        case 93: 
          { return process(ObjectKeyword());
          }
        case 181: break;
        case 72: 
          { return process(kLAZY);
          }
        case 182: break;
        case 77: 
          { return process(kSUPER);
          }
        case 183: break;
        case 71: 
          { return processScala3(EnumKeyword());
          }
        case 184: break;
        case 76: 
          { //for comments in interpolated strings
    return process(ScalaDocElementTypes.SCALA_DOC_COMMENT);
          }
        case 185: break;
        case 23: 
          { return process(tINTERPOLATED_STRING);
          }
        case 186: break;
        case 104: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { return process(kCASE);
          }
        case 187: break;
        case 69: 
          { return process(kCASE);
          }
        case 188: break;
        case 4: 
          { return process(tUNDER);
          }
        case 189: break;
        case 31: 
          { return process(Float());
          }
        case 190: break;
        case 58: 
          { return process(NewKeyword());
          }
        case 191: break;
        case 35: 
          { return process(tSYMBOL);
          }
        case 192: break;
        case 45: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(COMMON_STATE);
    return process(tINTERPOLATED_STRING_INJECTION);
          }
        case 193: break;
        case 17: 
          { return process(tASSIGN);
          }
        case 194: break;
        case 26: 
          { return process(tINTERPOLATED_MULTILINE_STRING);
          }
        case 195: break;
        case 46: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return process(tINTERPOLATED_MULTILINE_STRING);
          }
        case 196: break;
        case 62: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return process(tINTERPOLATED_MULTILINE_STRING);
          }
        case 197: break;
        case 94: 
          { return process(kIMPORT);
          }
        case 198: break;
        case 28: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 6;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzFPos++]:zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 7;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[--zzFPos]:zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(WAIT_FOR_INTERPOLATED_STRING);
  if (endsWith(yytext(), "\"\"")) yypushback(2);
  return process(haveIdInString || haveIdInMultilineString ? tIDENTIFIER : tINTERPOLATED_STRING_ID);
          }
        case 199: break;
        case 100: 
          { return process(kABSTRACT);
          }
        case 200: break;
        case 42: 
          { return process(kIF);
          }
        case 201: break;
        case 51: 
          { return process(tCHAR);
          }
        case 202: break;
        case 18: 
          { return process(tFUNTYPE);
          }
        case 203: break;
        case 13: 
          { return process(tRSQBRACKET);
          }
        case 204: break;
        case 88: 
          { return process(kWHILE);
          }
        case 205: break;
        case 78: 
          { return process(TraitKeyword());
          }
        case 206: break;
        case 50: 
          { return process(kDEF);
          }
        case 207: break;
        case 70: 
          { return process(kELSE);
          }
        case 208: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
