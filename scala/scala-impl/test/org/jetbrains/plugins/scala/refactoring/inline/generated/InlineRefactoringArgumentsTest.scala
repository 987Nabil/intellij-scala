package org.jetbrains.plugins.scala.refactoring.inline.generated

import org.jetbrains.plugins.scala.refactoring.inline.InlineRefactoringTestBase

class InlineRefactoringArgumentsTest extends InlineRefactoringTestBase {
  //This class was generated by build script, please don't change this
  override def folderPath: String = super.folderPath + "arguments/"

  def testBodySingleExpressionBlock(): Unit = doTest()

  def testMemberWithArguments(): Unit = doTest()

  def testMethodWithArgumentInfixAssociation(): Unit = doTest()

  def testMethodWithArgumentReferencedInStringInterpolation(): Unit = doTest()

  def testMethodWithArgumentsInfixMultiplication(): Unit = doTest()

  def testMethodWithArgumentsInfixReference(): Unit = doTest()

  def testMethodWithArgumentsWithDefaultValues(): Unit = doTest()

  def testMethodWithFunctionCallAsParameter(): Unit = doTest()

  def testMethodWithIfStmt(): Unit = doTest()

  def testMethodWithMultipleArgumentsWithMultipleReferenes(): Unit = doTest()

  def testMethodWithMultipleLines(): Unit = doTest()

  def testMethodWithMultipleNamedArguments(): Unit = doTest()

  def testMethodWithOneArgument(): Unit = doTest()

  def testMethodWithOneArgument1(): Unit = doTest()

  def testMethodWithOneArgumentMultipleCalls(): Unit = doTest()

  def testMethodWithOneArgumentUnaryOperatorSpacing(): Unit = doTest()

  def testMethodWithOneNamedArgument(): Unit = doTest()

  def testMethodWithTwoArguments(): Unit = doTest()

  def testMethodWithTwoNamedArguments(): Unit = doTest()

  def testStringInterpolationBody(): Unit = doTest()

  def testStringInterpolationBody2(): Unit = doTest()

  def testStringInterpolationBody_Complex_Multiline(): Unit = doTest()

  def testStringInterpolationBody_Complex_Multiline_AlsoWithUsagesOutsideStringLiteral(): Unit = doTest()

  def testStringInterpolationBody_Complex_Multiline_RequiresParenthesesAround(): Unit = doTest()
}