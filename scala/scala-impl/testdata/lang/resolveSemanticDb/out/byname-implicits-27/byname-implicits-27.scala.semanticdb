
¾I#tests/pos/byname-implicits-27.scala*
_empty_/Test.
 *Test€*%
_empty_/Test.Generic#*Generic€*2
 _empty_/Test.Generic#`<init>`(). €@*<init>€*"
_empty_/Test.Generic#[T]	*T€*'
_empty_/Test.Generic#Repr#*Repr€*'
_empty_/Test.Generic.
 *Generic€*%
_empty_/Test.Generic.Aux#*Aux€*&
_empty_/Test.Generic.Aux#[T]	*T€*&
_empty_/Test.Generic.Aux#[R]	*R€*
local0*Repr€*
_empty_/Test.GNil#*GNil€*/
_empty_/Test.GNil#`<init>`(). €@*<init>€*
_empty_/Test.Foo#*Foo€*.
_empty_/Test.Foo#`<init>`(). €@*<init>€*
_empty_/Test.Foo#[T]	*T€*
_empty_/Test.Foo.
 *Foo€*,
_empty_/Test.Foo.fooUnit.  *fooUnit€**
_empty_/Test.Foo.fooInt.  *fooInt€*0
_empty_/Test.Foo.fooString.  *	fooString€*2
_empty_/Test.Foo.fooBoolean.  *
fooBoolean€*-
_empty_/Test.Foo.fooPair().  *fooPair€*(
_empty_/Test.Foo.fooPair().[T]	*T€*(
_empty_/Test.Foo.fooPair().[U]	*U€*0
!_empty_/Test.Foo.fooPair().(fooT)  *fooT€*0
!_empty_/Test.Foo.fooPair().(fooU)  *fooU€*+
_empty_/Test.Foo.fooGen().  *fooGen€*'
_empty_/Test.Foo.fooGen().[T]	*T€*'
_empty_/Test.Foo.fooGen().[R]	*R€*-
_empty_/Test.Foo.fooGen().(gen)  *gen€*+
_empty_/Test.Foo.fooGen().(fr)  *fr€*
_empty_/Test.A# €*A€*,
_empty_/Test.A#`<init>`(). €@*<init>€**
_empty_/Test.A#`<init>`().(b) €*b€**
_empty_/Test.A#`<init>`().(i) €*i€*
_empty_/Test.A#b. €*b€*
_empty_/Test.A#i. €*i€*#
_empty_/Test.A#copy().*copy€*#
_empty_/Test.A#copy().(b)*b€*#
_empty_/Test.A#copy().(i)*i€*7
 _empty_/Test.A#copy$default$1().*copy$default$1€*7
 _empty_/Test.A#copy$default$2().*copy$default$2€*
_empty_/Test.A#_1().*_1€*
_empty_/Test.A#_2().*_2€*
_empty_/Test.A.
 *A€*%
_empty_/Test.A.apply().*apply€*$
_empty_/Test.A.apply().(b)*b€*$
_empty_/Test.A.apply().(i)*i€*)
_empty_/Test.A.unapply().*unapply€**
_empty_/Test.A.unapply().(x$1)*x$1€*+
_empty_/Test.A.toString().*toString€*$
_empty_/Test.A.genA.  *genA€*
local1*Repr€*
_empty_/Test.B# €*B€*,
_empty_/Test.B#`<init>`(). €@*<init>€**
_empty_/Test.B#`<init>`().(c) €*c€**
_empty_/Test.B#`<init>`().(i) €*i€**
_empty_/Test.B#`<init>`().(b) €*b€*
_empty_/Test.B#c. €*c€*
_empty_/Test.B#i. €*i€*
_empty_/Test.B#b. €*b€*#
_empty_/Test.B#copy().*copy€*#
_empty_/Test.B#copy().(c)*c€*#
_empty_/Test.B#copy().(i)*i€*#
_empty_/Test.B#copy().(b)*b€*7
 _empty_/Test.B#copy$default$1().*copy$default$1€*7
 _empty_/Test.B#copy$default$2().*copy$default$2€*7
 _empty_/Test.B#copy$default$3().*copy$default$3€*
_empty_/Test.B#_1().*_1€*
_empty_/Test.B#_2().*_2€*
_empty_/Test.B#_3().*_3€*
_empty_/Test.B.
 *B€*%
_empty_/Test.B.apply().*apply€*$
_empty_/Test.B.apply().(c)*c€*$
_empty_/Test.B.apply().(i)*i€*$
_empty_/Test.B.apply().(b)*b€*)
_empty_/Test.B.unapply().*unapply€**
_empty_/Test.B.unapply().(x$1)*x$1€*+
_empty_/Test.B.toString().*toString€*$
_empty_/Test.B.genB.  *genB€*
local2*Repr€*
_empty_/Test.C# €*C€*,
_empty_/Test.C#`<init>`(). €@*<init>€**
_empty_/Test.C#`<init>`().(i) €*i€**
_empty_/Test.C#`<init>`().(s) €*s€**
_empty_/Test.C#`<init>`().(b) €*b€*
_empty_/Test.C#i. €*i€*
_empty_/Test.C#s. €*s€*
_empty_/Test.C#b. €*b€*#
_empty_/Test.C#copy().*copy€*#
_empty_/Test.C#copy().(i)*i€*#
_empty_/Test.C#copy().(s)*s€*#
_empty_/Test.C#copy().(b)*b€*7
 _empty_/Test.C#copy$default$1().*copy$default$1€*7
 _empty_/Test.C#copy$default$2().*copy$default$2€*7
 _empty_/Test.C#copy$default$3().*copy$default$3€*
_empty_/Test.C#_1().*_1€*
_empty_/Test.C#_2().*_2€*
_empty_/Test.C#_3().*_3€*
_empty_/Test.C.
 *C€*%
_empty_/Test.C.apply().*apply€*$
_empty_/Test.C.apply().(i)*i€*$
_empty_/Test.C.apply().(s)*s€*$
_empty_/Test.C.apply().(b)*b€*)
_empty_/Test.C.unapply().*unapply€**
_empty_/Test.C.unapply().(x$1)*x$1€*+
_empty_/Test.C.toString().*toString€*$
_empty_/Test.C.genC.  *genC€*
local3*Repr€2
 _empty_/Test.2#
 _empty_/Test.Generic#2.
  _empty_/Test.Generic#`<init>`().2&
 _empty_/Test.Generic#[T]2(
	 _empty_/Test.Generic#Repr#2#
	 _empty_/Test.Generic.2'
	 _empty_/Test.Generic.Aux#2*
 _empty_/Test.Generic.Aux#[T]2*
 _empty_/Test.Generic.Aux#[R]2#
 _empty_/Test.Generic#2*
 _empty_/Test.Generic.Aux#[T]2
' +local02*
. /_empty_/Test.Generic.Aux#[R]2 
 _empty_/Test.GNil#2+
 _empty_/Test.GNil#`<init>`().2


 _empty_/Test.Foo#2*


 _empty_/Test.Foo#`<init>`().2"


 _empty_/Test.Foo#[T]2
	 _empty_/Test.Foo.2'
 _empty_/Test.Foo.fooUnit.2
 _empty_/Test.Foo#2
 "scala/Unit#2#
& )scala/Predef.`???`().2&
 _empty_/Test.Foo.fooInt.2
 _empty_/Test.Foo#2
  
scala/Int#2#
$ 'scala/Predef.`???`().2)
 _empty_/Test.Foo.fooString.2
 _empty_/Test.Foo#2"
  &scala/Predef.String#2#
* -scala/Predef.`???`().2*
 _empty_/Test.Foo.fooBoolean.2
  _empty_/Test.Foo#2
! (scala/Boolean#2#
, /scala/Predef.`???`().2)
 _empty_/Test.Foo.fooPair().2,
 _empty_/Test.Foo.fooPair().[T]2,
 _empty_/Test.Foo.fooPair().[U]2/
( ,!_empty_/Test.Foo.fooPair().(fooT)2
. 1_empty_/Test.Foo#2,
2 3_empty_/Test.Foo.fooPair().[T]2/
6 :!_empty_/Test.Foo.fooPair().(fooU)2
< ?_empty_/Test.Foo#2,
@ A_empty_/Test.Foo.fooPair().[U]2
E H_empty_/Test.Foo#2,
J K_empty_/Test.Foo.fooPair().[T]2,
M N_empty_/Test.Foo.fooPair().[U]2#
S Vscala/Predef.`???`().2(
 _empty_/Test.Foo.fooGen().2+
 _empty_/Test.Foo.fooGen().[T]2+
 _empty_/Test.Foo.fooGen().[R]2-
' *_empty_/Test.Foo.fooGen().(gen)2'
4 7_empty_/Test.Generic.Aux#2#
, 3_empty_/Test.Generic.2+
8 9_empty_/Test.Foo.fooGen().[T]2+
; <_empty_/Test.Foo.fooGen().[R]2,
? A_empty_/Test.Foo.fooGen().(fr)2
C F_empty_/Test.Foo#2+
G H_empty_/Test.Foo.fooGen().[R]2
L O_empty_/Test.Foo#2+
P Q_empty_/Test.Foo.fooGen().[T]2#
U Xscala/Predef.`???`().2
 _empty_/Test.A#2(
 _empty_/Test.A#`<init>`().2
 _empty_/Test.B#2
 
scala/Int#2
 _empty_/Test.A#b.2
 _empty_/Test.A#i.2$
 _empty_/Test.A#copy().2"
 _empty_/Test.A#_1().2"
 _empty_/Test.A#_2().2
	 
_empty_/Test.A.2%
 _empty_/Test.A.apply().2"
 _empty_/Test.A.genA.2#
 _empty_/Test.Generic#2
  _empty_/Test.A#2
) -local12
1 2_empty_/Test.B#2
5 8
scala/Int#2
: >scala/Unit#2#
E Hscala/Predef.`???`().2
 _empty_/Test.B#2(
 _empty_/Test.B#`<init>`().2
 _empty_/Test.C#2
 
scala/Int#2
  'scala/Boolean#2
 _empty_/Test.B#c.2
 _empty_/Test.B#i.2
 _empty_/Test.B#b.2$
 _empty_/Test.B#copy().2"
 _empty_/Test.B#_1().2"
 _empty_/Test.B#_2().2"
   _empty_/Test.B#_3().2
	 
_empty_/Test.B.2%
 _empty_/Test.B.apply().2"
 _empty_/Test.B.genB.2#
 _empty_/Test.Generic#2
  _empty_/Test.B#2
) -local22
1 2_empty_/Test.C#2
5 8
scala/Int#2
; Bscala/Boolean#2
D Hscala/Unit#2#
P Sscala/Predef.`???`().2
 _empty_/Test.C#2(
 _empty_/Test.C#`<init>`().2
 
scala/Int#2"
  scala/Predef.String#2
% ,scala/Boolean#2
 _empty_/Test.C#i.2
 _empty_/Test.C#s.2
" #_empty_/Test.C#b.2$
 _empty_/Test.C#copy().2"
 _empty_/Test.C#_1().2"
 _empty_/Test.C#_2().2"
% %_empty_/Test.C#_3().2
	 
_empty_/Test.C.2%
 _empty_/Test.C.apply().2"
   _empty_/Test.C.genC.2#
   _empty_/Test.Generic#2
    _empty_/Test.C#2
 )  -local32
 1  4
scala/Int#2"
 7  =scala/Predef.String#2
 @  Gscala/Boolean#2
 I  Mscala/Unit#2#
 U  Xscala/Predef.`???`().2(
## scala/Predef.implicitly().2
## _empty_/Test.Foo#2
## _empty_/Test.A#2(
## _empty_/Test.Foo.fooGen().2"
## _empty_/Test.A.genA.2)
## _empty_/Test.Foo.fooPair().2"
## _empty_/Test.B.genB.2"
## _empty_/Test.C.genC.2&
## _empty_/Test.Foo.fooInt.2)
## _empty_/Test.Foo.fooString.2*
## _empty_/Test.Foo.fooBoolean.2'
## _empty_/Test.Foo.fooUnit.PZ E6E1659F64E660C264DEDE9610754CE3