
ìutests/pos/i94-nada.scala*
_empty_/Base#*Base€**
_empty_/Base#`<init>`(). €@*<init>€*
_empty_/Base#Rep#*Rep€*
_empty_/Base#Rep#[T]	*T€* 
_empty_/BaseExp#*BaseExp€*-
_empty_/BaseExp#`<init>`(). €@*<init>€* 
_empty_/BaseExp#Rep#*Rep€*!
_empty_/BaseExp#Rep#[T]	*T€*#
_empty_/BaseExp#Exp# €*Exp€*1
_empty_/BaseExp#Exp#`<init>`(). €@*<init>€*/
"_empty_/BaseExp#Exp#`<init>`().(v) €*v€*!
_empty_/BaseExp#Exp#[T]	*T€*#
_empty_/BaseExp#Exp#v. €*v€*(
_empty_/BaseExp#Exp#copy().*copy€*(
_empty_/BaseExp#Exp#copy().[T]	*T€*(
_empty_/BaseExp#Exp#copy().(v)*v€*<
%_empty_/BaseExp#Exp#copy$default$1().*copy$default$1€*2
(_empty_/BaseExp#Exp#copy$default$1().[T]	*T€*$
_empty_/BaseExp#Exp#_1().*_1€*"
_empty_/BaseExp#Exp.
 *Exp€**
_empty_/BaseExp#Exp.apply().*apply€*)
_empty_/BaseExp#Exp.apply().[T]	*T€*)
_empty_/BaseExp#Exp.apply().(v)*v€*.
_empty_/BaseExp#Exp.unapply().*unapply€*+
!_empty_/BaseExp#Exp.unapply().[T]	*T€*/
#_empty_/BaseExp#Exp.unapply().(x$1)*x$1€*0
_empty_/BaseExp#Exp.toString().*toString€* 
_empty_/BaseStr#*BaseStr€*-
_empty_/BaseStr#`<init>`(). €@*<init>€* 
_empty_/BaseStr#Rep#*Rep€*!
_empty_/BaseStr#Rep#[T]	*T€*&
_empty_/BaseDirect#*
BaseDirect€*0
_empty_/BaseDirect#`<init>`(). €@*<init>€*#
_empty_/BaseDirect#Rep#*Rep€*$
_empty_/BaseDirect#Rep#[T]	*T€*
_empty_/Test1#*Test1€*+
_empty_/Test1#`<init>`(). €@*<init>€*"
_empty_/Test1#Monad#*Monad€*1
_empty_/Test1#Monad#`<init>`(). €@*<init>€*!
_empty_/Test1#Monad#[X]	*X€*$
_empty_/Test1#Monad#x(). *x€*&
_empty_/Test1#Either# *Either€*2
 _empty_/Test1#Either#`<init>`(). €@*<init>€*"
_empty_/Test1#Either#[A]	*A€*"
_empty_/Test1#Either#[B]	*B€*#
_empty_/Test1#Left# €*Left€*0
_empty_/Test1#Left#`<init>`(). €@*<init>€*.
!_empty_/Test1#Left#`<init>`().(x) €*x€* 
_empty_/Test1#Left#[A]	*A€* 
_empty_/Test1#Left#[B]	*B€*"
_empty_/Test1#Left#x. €*x€*'
_empty_/Test1#Left#copy().*copy€*'
_empty_/Test1#Left#copy().[A]	*A€*'
_empty_/Test1#Left#copy().[B]	*B€*'
_empty_/Test1#Left#copy().(x)*x€*;
$_empty_/Test1#Left#copy$default$1().*copy$default$1€*1
'_empty_/Test1#Left#copy$default$1().[A]	*A€*1
'_empty_/Test1#Left#copy$default$1().[B]	*B€*#
_empty_/Test1#Left#_1().*_1€*"
_empty_/Test1#Left.
 *Left€*)
_empty_/Test1#Left.apply().*apply€*(
_empty_/Test1#Left.apply().[A]	*A€*(
_empty_/Test1#Left.apply().[B]	*B€*(
_empty_/Test1#Left.apply().(x)*x€*-
_empty_/Test1#Left.unapply().*unapply€**
 _empty_/Test1#Left.unapply().[A]	*A€**
 _empty_/Test1#Left.unapply().[B]	*B€*.
"_empty_/Test1#Left.unapply().(x$1)*x$1€*/
_empty_/Test1#Left.toString().*toString€*%
_empty_/Test1#Right# €*Right€*1
_empty_/Test1#Right#`<init>`(). €@*<init>€*/
"_empty_/Test1#Right#`<init>`().(x) €*x€*!
_empty_/Test1#Right#[A]	*A€*!
_empty_/Test1#Right#[B]	*B€*#
_empty_/Test1#Right#x. €*x€*(
_empty_/Test1#Right#copy().*copy€*(
_empty_/Test1#Right#copy().[A]	*A€*(
_empty_/Test1#Right#copy().[B]	*B€*(
_empty_/Test1#Right#copy().(x)*x€*<
%_empty_/Test1#Right#copy$default$1().*copy$default$1€*2
(_empty_/Test1#Right#copy$default$1().[A]	*A€*2
(_empty_/Test1#Right#copy$default$1().[B]	*B€*$
_empty_/Test1#Right#_1().*_1€*$
_empty_/Test1#Right.
 *Right€**
_empty_/Test1#Right.apply().*apply€*)
_empty_/Test1#Right.apply().[A]	*A€*)
_empty_/Test1#Right.apply().[B]	*B€*)
_empty_/Test1#Right.apply().(x)*x€*.
_empty_/Test1#Right.unapply().*unapply€*+
!_empty_/Test1#Right.unapply().[A]	*A€*+
!_empty_/Test1#Right.unapply().[B]	*B€*/
#_empty_/Test1#Right.unapply().(x$1)*x$1€*0
_empty_/Test1#Right.toString().*toString€*(
_empty_/Test1#flatMap().*flatMap€*%
_empty_/Test1#flatMap().[X]	*X€*%
_empty_/Test1#flatMap().[Y]	*Y€*%
_empty_/Test1#flatMap().[M]	*M€*%
_empty_/Test1#flatMap().(m)*m€*%
_empty_/Test1#flatMap().(f)*f€*
local0*x€*
_empty_/Test2#*Test2€*+
_empty_/Test2#`<init>`(). €@*<init>€*"
_empty_/Test2#Monad#*Monad€*1
_empty_/Test2#Monad#`<init>`(). €@*<init>€*!
_empty_/Test2#Monad#[X]	*X€*$
_empty_/Test2#Monad#x(). *x€*&
_empty_/Test2#Either# *Either€*2
 _empty_/Test2#Either#`<init>`(). €@*<init>€*"
_empty_/Test2#Either#[A]	*A€*"
_empty_/Test2#Either#[B]	*B€*#
_empty_/Test2#Left# €*Left€*0
_empty_/Test2#Left#`<init>`(). €@*<init>€*.
!_empty_/Test2#Left#`<init>`().(x) €*x€* 
_empty_/Test2#Left#[A]	*A€* 
_empty_/Test2#Left#[B]	*B€*"
_empty_/Test2#Left#x. €*x€*'
_empty_/Test2#Left#copy().*copy€*'
_empty_/Test2#Left#copy().[A]	*A€*'
_empty_/Test2#Left#copy().[B]	*B€*'
_empty_/Test2#Left#copy().(x)*x€*;
$_empty_/Test2#Left#copy$default$1().*copy$default$1€*1
'_empty_/Test2#Left#copy$default$1().[A]	*A€*1
'_empty_/Test2#Left#copy$default$1().[B]	*B€*#
_empty_/Test2#Left#_1().*_1€*"
_empty_/Test2#Left.
 *Left€*)
_empty_/Test2#Left.apply().*apply€*(
_empty_/Test2#Left.apply().[A]	*A€*(
_empty_/Test2#Left.apply().[B]	*B€*(
_empty_/Test2#Left.apply().(x)*x€*-
_empty_/Test2#Left.unapply().*unapply€**
 _empty_/Test2#Left.unapply().[A]	*A€**
 _empty_/Test2#Left.unapply().[B]	*B€*.
"_empty_/Test2#Left.unapply().(x$1)*x$1€*/
_empty_/Test2#Left.toString().*toString€*%
_empty_/Test2#Right# €*Right€*1
_empty_/Test2#Right#`<init>`(). €@*<init>€*/
"_empty_/Test2#Right#`<init>`().(x) €*x€*!
_empty_/Test2#Right#[A]	*A€*!
_empty_/Test2#Right#[B]	*B€*#
_empty_/Test2#Right#x. €*x€*(
_empty_/Test2#Right#copy().*copy€*(
_empty_/Test2#Right#copy().[A]	*A€*(
_empty_/Test2#Right#copy().[B]	*B€*(
_empty_/Test2#Right#copy().(x)*x€*<
%_empty_/Test2#Right#copy$default$1().*copy$default$1€*2
(_empty_/Test2#Right#copy$default$1().[A]	*A€*2
(_empty_/Test2#Right#copy$default$1().[B]	*B€*$
_empty_/Test2#Right#_1().*_1€*$
_empty_/Test2#Right.
 *Right€**
_empty_/Test2#Right.apply().*apply€*)
_empty_/Test2#Right.apply().[A]	*A€*)
_empty_/Test2#Right.apply().[B]	*B€*)
_empty_/Test2#Right.apply().(x)*x€*.
_empty_/Test2#Right.unapply().*unapply€*+
!_empty_/Test2#Right.unapply().[A]	*A€*+
!_empty_/Test2#Right.unapply().[B]	*B€*/
#_empty_/Test2#Right.unapply().(x$1)*x$1€*0
_empty_/Test2#Right.toString().*toString€**
_empty_/Test2#flatMap(). *flatMap€*%
_empty_/Test2#flatMap().[X]	*X€*%
_empty_/Test2#flatMap().[Y]	*Y€*%
_empty_/Test2#flatMap().[M]	*M€*%
_empty_/Test2#flatMap().(m)*m€*%
_empty_/Test2#flatMap().(f)*f€*
local1*x€*
_empty_/Test3#*Test3€*+
_empty_/Test3#`<init>`(). €@*<init>€**
_empty_/Test3#flatMap(). *flatMap€*%
_empty_/Test3#flatMap().[X]	*X€*%
_empty_/Test3#flatMap().[Y]	*Y€*%
_empty_/Test3#flatMap().[M]	*M€*%
_empty_/Test3#flatMap().(m)*m€*%
_empty_/Test3#flatMap().(f)*f€*
local2*x€2%
 !scala/language.higherKinds.2
 scala/language.2
 scala/2
 
_empty_/Base#2&
 _empty_/Base#`<init>`().2
 
_empty_/Base#Rep#2"
 _empty_/Base#Rep#[T]2
 _empty_/BaseExp#2)
 _empty_/BaseExp#`<init>`().2
 _empty_/Base#2"
 
_empty_/BaseExp#Rep#2%
 _empty_/BaseExp#Rep#[T]2"
 _empty_/BaseExp#Exp#2%
 _empty_/BaseExp#Rep#[T]2"
 _empty_/BaseExp#Exp#2-
 _empty_/BaseExp#Exp#`<init>`().2%
 _empty_/BaseExp#Exp#[T]2%
 _empty_/BaseExp#Exp#[T]2$
 _empty_/BaseExp#Exp#v.2)
 _empty_/BaseExp#Exp#copy().2'
 _empty_/BaseExp#Exp#_1().2"
 _empty_/BaseExp#Exp.2*
 _empty_/BaseExp#Exp.apply().2,
 _empty_/BaseExp#Exp.unapply().2
 _empty_/BaseStr#2)
 _empty_/BaseStr#`<init>`().2
 _empty_/Base#2"
 
_empty_/BaseStr#Rep#2%
 _empty_/BaseStr#Rep#[T]2"
 scala/Predef.String#2!
 _empty_/BaseDirect#2,
 _empty_/BaseDirect#`<init>`().2
 _empty_/Base#2%
 
_empty_/BaseDirect#Rep#2(
 _empty_/BaseDirect#Rep#[T]2(
 _empty_/BaseDirect#Rep#[T]2
 _empty_/Test1#2'
 _empty_/Test1#`<init>`().2"
 _empty_/Test1#Monad#2-
 _empty_/Test1#Monad#`<init>`().2%
 _empty_/Test1#Monad#[X]2&
 	_empty_/Test1#Monad#x().2%
 _empty_/Test1#Monad#[X]2#
 _empty_/Test1#Either#2.
  _empty_/Test1#Either#`<init>`().2&
  _empty_/Test1#Either#[A]2&
! "_empty_/Test1#Either#[B]2!
 _empty_/Test1#Left#2,
 _empty_/Test1#Left#`<init>`().2$
 _empty_/Test1#Left#[A]2.
0 0 _empty_/Test1#Either#`<init>`().2#
% +_empty_/Test1#Either#2$
, -_empty_/Test1#Left#[A]2$
. /_empty_/Test1#Left#[B]2"
6 ;_empty_/Test1#Monad#2$
< =_empty_/Test1#Left#[A]2$
 _empty_/Test1#Left#[A]2$
 _empty_/Test1#Left#[B]2#
 _empty_/Test1#Left#x.2(
 _empty_/Test1#Left#copy().2&
 _empty_/Test1#Left#_1().2!
 _empty_/Test1#Left.2)
 _empty_/Test1#Left.apply().2+
 _empty_/Test1#Left.unapply().2"
 _empty_/Test1#Right#2-
 _empty_/Test1#Right#`<init>`().2%
 _empty_/Test1#Right#[B]2.
1 1 _empty_/Test1#Either#`<init>`().2#
& ,_empty_/Test1#Either#2%
- ._empty_/Test1#Right#[A]2%
/ 0_empty_/Test1#Right#[B]2"
7 <_empty_/Test1#Monad#2%
= >_empty_/Test1#Right#[B]2%
 _empty_/Test1#Right#[A]2%
 _empty_/Test1#Right#[B]2$
 _empty_/Test1#Right#x.2)
 _empty_/Test1#Right#copy().2'
 _empty_/Test1#Right#_1().2"
 _empty_/Test1#Right.2*
 _empty_/Test1#Right.apply().2,
 _empty_/Test1#Right.unapply().2&
 _empty_/Test1#flatMap().2)
 _empty_/Test1#flatMap().[X]2)
 _empty_/Test1#flatMap().[Y]2)
 _empty_/Test1#flatMap().[M]2)
" #_empty_/Test1#flatMap().(m)2)
% &_empty_/Test1#flatMap().[M]2)
' (_empty_/Test1#flatMap().[X]2)
+ ,_empty_/Test1#flatMap().(f)2)
. /_empty_/Test1#flatMap().[X]2)
3 4_empty_/Test1#flatMap().[M]2)
5 6_empty_/Test1#flatMap().[Y]2)
: ;_empty_/Test1#flatMap().[M]2)
< =_empty_/Test1#flatMap().[Y]2&
B Bscala/Function1#apply().2)
A B_empty_/Test1#flatMap().(f)2&
E F_empty_/Test1#Monad#x().2)
C D_empty_/Test1#flatMap().(m)2'
 	scala/Predef.println(+1).2&

 _empty_/Test1#flatMap().2*
 _empty_/Test1#Right.apply().2"
 _empty_/Test1#Right.2
 local02
! $
scala/Int#2*
. ._empty_/Test1#Right.apply().2"
) ._empty_/Test1#Right.2
/ 0local02
 _empty_/Test2#2'
 _empty_/Test2#`<init>`().2"
 _empty_/Test2#Monad#2-
 _empty_/Test2#Monad#`<init>`().2%
 _empty_/Test2#Monad#[X]2&
 	_empty_/Test2#Monad#x().2%
 _empty_/Test2#Monad#[X]2#
!! _empty_/Test2#Either#2.
!!  _empty_/Test2#Either#`<init>`().2&
!!  _empty_/Test2#Either#[A]2&
!!! "_empty_/Test2#Either#[B]2!
"" _empty_/Test2#Left#2,
"" _empty_/Test2#Left#`<init>`().2$
"" _empty_/Test2#Left#[A]2.
"0" 0 _empty_/Test2#Either#`<init>`().2#
"%" +_empty_/Test2#Either#2$
"," -_empty_/Test2#Left#[A]2$
"." /_empty_/Test2#Left#[B]2"
"6" ;_empty_/Test2#Monad#2$
"<" =_empty_/Test2#Left#[A]2$
"" _empty_/Test2#Left#[A]2$
"" _empty_/Test2#Left#[B]2#
"" _empty_/Test2#Left#x.2(
"" _empty_/Test2#Left#copy().2&
"" _empty_/Test2#Left#_1().2!
"" _empty_/Test2#Left.2)
"" _empty_/Test2#Left.apply().2+
"" _empty_/Test2#Left.unapply().2"
## _empty_/Test2#Right#2-
## _empty_/Test2#Right#`<init>`().2%
## _empty_/Test2#Right#[B]2.
#1# 1 _empty_/Test2#Either#`<init>`().2#
#&# ,_empty_/Test2#Either#2%
#-# ._empty_/Test2#Right#[A]2%
#/# 0_empty_/Test2#Right#[B]2"
#7# <_empty_/Test2#Monad#2%
#=# >_empty_/Test2#Right#[B]2%
## _empty_/Test2#Right#[A]2%
## _empty_/Test2#Right#[B]2$
## _empty_/Test2#Right#x.2)
## _empty_/Test2#Right#copy().2'
## _empty_/Test2#Right#_1().2"
## _empty_/Test2#Right.2*
## _empty_/Test2#Right.apply().2,
## _empty_/Test2#Right.unapply().2&
$$ _empty_/Test2#flatMap().2)
$$ _empty_/Test2#flatMap().[X]2)
$$ _empty_/Test2#flatMap().[Y]2)
$$ _empty_/Test2#flatMap().[M]2)
$$ _empty_/Test2#flatMap().(m)2)
$$ _empty_/Test2#flatMap().[M]2)
$$ _empty_/Test2#flatMap().[X]2)
$!$ "_empty_/Test2#flatMap().(f)2)
$$$ %_empty_/Test2#flatMap().[X]2)
$)$ *_empty_/Test2#flatMap().[M]2)
$+$ ,_empty_/Test2#flatMap().[Y]2)
$0$ 1_empty_/Test2#flatMap().[M]2)
$2$ 3_empty_/Test2#flatMap().[Y]2'
%% 	scala/Predef.println(+1).2&
%
% _empty_/Test2#flatMap().2)
%% _empty_/Test2#Left.apply().2!
%% _empty_/Test2#Left.2
%% local12
% % #
scala/Int#2)
%,% ,_empty_/Test2#Left.apply().2!
%(% ,_empty_/Test2#Left.2
%-% .local12
'' _empty_/Test3#2'
(( _empty_/Test3#`<init>`().2&
(( _empty_/Test3#flatMap().2)
(( _empty_/Test3#flatMap().[X]2)
(( _empty_/Test3#flatMap().[Y]2)
(( _empty_/Test3#flatMap().[M]2)
(( _empty_/Test3#flatMap().(m)2)
(( _empty_/Test3#flatMap().[M]2)
(( _empty_/Test3#flatMap().[X]2)
(!( "_empty_/Test3#flatMap().(f)2)
($( %_empty_/Test3#flatMap().[X]2)
()( *_empty_/Test3#flatMap().[M]2)
(+( ,_empty_/Test3#flatMap().[Y]2)
(0( 1_empty_/Test3#flatMap().[M]2)
(2( 3_empty_/Test3#flatMap().[Y]2'
)) 	scala/Predef.println(+1).2&
)
) _empty_/Test3#flatMap().2!
)) scala/Some.apply().2
)) scala/Some.2
)) local22
) ) #
scala/Int#2!
),) ,scala/Some.apply().2
)() ,scala/Some.2
)-) .local2PZ 6CBBB5162E9A140CE71BEB4E4F3B854E