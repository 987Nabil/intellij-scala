
º2tests/pos/spec-cyclic.scala*
_empty_/AbsFun#*AbsFun€*,
_empty_/AbsFun#`<init>`(). €@*<init>€*
_empty_/AbsFun#[A]	 €*A€*
_empty_/AbsFun#[B]	 €*B€*'
_empty_/AbsFun#apply(). *apply€*$
_empty_/AbsFun#apply().(x)*x€*4
_empty_/MyPartialFunction#*MyPartialFunction€*7
%_empty_/MyPartialFunction#`<init>`(). €@*<init>€**
_empty_/MyPartialFunction#[A]	 €*A€**
_empty_/MyPartialFunction#[B]	 €*B€*
_empty_/ColMap#*ColMap€*,
_empty_/ColMap#`<init>`(). €@*<init>€*
_empty_/ColMap#[A]	*A€*
_empty_/ColMap#[B]	 €*B€*$
_empty_/ColSorted#*	ColSorted€*/
_empty_/ColSorted#`<init>`(). €@*<init>€*
_empty_/ColSorted#[K]	*K€*"
_empty_/ColSorted#[A]	 €*A€**
_empty_/ColSortedMap#*ColSortedMap€*2
 _empty_/ColSortedMap#`<init>`(). €@*<init>€*"
_empty_/ColSortedMap#[K]	*K€*%
_empty_/ColSortedMap#[E]	 €*E€*
_empty_/MutMap#*MutMap€*,
_empty_/MutMap#`<init>`(). €@*<init>€*
_empty_/MutMap#[A]	*A€*
_empty_/MutMap#[B]	*B€*$
_empty_/ColRanged#*	ColRanged€*/
_empty_/ColRanged#`<init>`(). €@*<init>€*
_empty_/ColRanged#[K]	*K€*"
_empty_/ColRanged#[A]	 €*A€*$
_empty_/JclRanged#*	JclRanged€*/
_empty_/JclRanged#`<init>`(). €@*<init>€*
_empty_/JclRanged#[K]	*K€*
_empty_/JclRanged#[A]	*A€*
_empty_/JclMap#*JclMap€*,
_empty_/JclMap#`<init>`(). €@*<init>€*
_empty_/JclMap#[K]	*K€*
_empty_/JclMap#[E]	*E€*$
_empty_/JclSorted#*	JclSorted€*/
_empty_/JclSorted#`<init>`(). €@*<init>€*
_empty_/JclSorted#[K]	*K€*
_empty_/JclSorted#[A]	*A€**
_empty_/JclSortedMap#*JclSortedMap€*2
 _empty_/JclSortedMap#`<init>`(). €@*<init>€*"
_empty_/JclSortedMap#[K]	*K€*"
_empty_/JclSortedMap#[E]	*E€*
_empty_/Foo#*Foo€*)
_empty_/Foo#`<init>`(). €@*<init>€*
_empty_/Foo#[A]	*A€*
_empty_/Foo#[B]	*B€*"
_empty_/Foo#apply().*apply€*!
_empty_/Foo#apply().(x)*x€*
_empty_/Bar#*Bar€*)
_empty_/Bar#`<init>`(). €@*<init>€*
_empty_/Bar#x. €*x€2
 _empty_/AbsFun#2$
 _empty_/AbsFun#`<init>`().2
 scala/specialized#2
 _empty_/AbsFun#[A]2
 *scala/specialized#2
, -_empty_/AbsFun#[B]2%
 _empty_/AbsFun#apply().2(
 _empty_/AbsFun#apply().(x)2 
 _empty_/AbsFun#[A]2 
 _empty_/AbsFun#[B]2(
 _empty_/MyPartialFunction#23
 %_empty_/MyPartialFunction#`<init>`().2
( .scala/AnyRef#2
4 :_empty_/AbsFun#2+
; <_empty_/MyPartialFunction#[A]2+
> ?_empty_/MyPartialFunction#[B]2+
 _empty_/MyPartialFunction#[A]2+
 _empty_/MyPartialFunction#[B]2
 _empty_/ColMap#2(
 _empty_/ColMap#`<init>`().2(
 -_empty_/MyPartialFunction#2 
. /_empty_/ColMap#[A]2 
1 2_empty_/ColMap#[B]2 
 _empty_/ColMap#[A]2 
 _empty_/ColMap#[B]2 
 _empty_/ColSorted#2+
 _empty_/ColSorted#`<init>`().2 
 '_empty_/ColRanged#2#
( )_empty_/ColSorted#[K]2#
* +_empty_/ColSorted#[A]2#
 _empty_/ColSorted#[K]2#
 _empty_/ColSorted#[A]2#


 _empty_/ColSortedMap#2.


  _empty_/ColSortedMap#`<init>`().2

!
 '_empty_/ColMap#2&

(
 )_empty_/ColSortedMap#[K]2&

*
 +_empty_/ColSortedMap#[E]2 

2
 ;_empty_/ColSorted#2&

<
 =_empty_/ColSortedMap#[K]2

>
 Dscala/Tuple2#2&

E
 F_empty_/ColSortedMap#[K]2&

G
 H_empty_/ColSortedMap#[E]2&


 _empty_/ColSortedMap#[K]2&


 _empty_/ColSortedMap#[E]2
 _empty_/MutMap#2(
 _empty_/MutMap#`<init>`().2
 !scala/AnyRef#2
 _empty_/ColMap#2 
 _empty_/MutMap#[A]2 
 _empty_/MutMap#[B]2 
 _empty_/MutMap#[A]2 
 _empty_/MutMap#[B]2 
 _empty_/ColRanged#2+
 _empty_/ColRanged#`<init>`().2#
 _empty_/ColRanged#[K]2#
 _empty_/ColRanged#[A]2 
 _empty_/JclRanged#2+
 _empty_/JclRanged#`<init>`().2 
 &_empty_/ColRanged#2#
' (_empty_/JclRanged#[K]2#
) *_empty_/JclRanged#[A]2#
 _empty_/JclRanged#[K]2#
 _empty_/JclRanged#[A]2
 _empty_/JclMap#2(
 _empty_/JclMap#`<init>`().2
O U_empty_/MutMap#2 
V W_empty_/JclMap#[K]2 
X Y_empty_/JclMap#[E]2 
 _empty_/JclMap#[K]2 
 _empty_/JclMap#[E]2 
 _empty_/JclSorted#2+
 _empty_/JclSorted#`<init>`().2 
 &_empty_/ColSorted#2#
' (_empty_/JclSorted#[K]2#
) *_empty_/JclSorted#[A]2 
1 :_empty_/JclRanged#2#
; <_empty_/JclSorted#[K]2#
= >_empty_/JclSorted#[A]2#
 _empty_/JclSorted#[K]2#
 _empty_/JclSorted#[A]2#
 _empty_/JclSortedMap#2.
  _empty_/JclSortedMap#`<init>`().2#
  ,_empty_/ColSortedMap#2&
- ._empty_/JclSortedMap#[K]2&
/ 0_empty_/JclSortedMap#[E]2
7 =_empty_/JclMap#2&
> ?_empty_/JclSortedMap#[K]2&
@ A_empty_/JclSortedMap#[E]2 
H Q_empty_/JclSorted#2&
R S_empty_/JclSortedMap#[K]2
T Zscala/Tuple2#2&
[ \_empty_/JclSortedMap#[K]2&
] ^_empty_/JclSortedMap#[E]2&
 _empty_/JclSortedMap#[K]2&
 _empty_/JclSortedMap#[E]2
 	_empty_/Foo#2%
	 	_empty_/Foo#`<init>`().2#
 $_empty_/JclSortedMap#2
% &_empty_/Foo#[A]2
( )_empty_/Foo#[B]2

 _empty_/Foo#[A]2
 _empty_/Foo#[B]2"
 _empty_/Foo#apply().2%
 _empty_/Foo#apply().(x)2
 _empty_/Foo#[A]2
 _empty_/Foo#[B]2(
  scala/sys/package.error().2
 
scala/sys/2
 	_empty_/Bar#2%
 _empty_/Bar#`<init>`().2
 _empty_/Bar#x.2
	 _empty_/Foo#2
 
scala/Int#2
 
scala/Int#2%
* *_empty_/Foo#`<init>`().2
  _empty_/Foo#2
! $
scala/Int#2
& )
scala/Int#2"
 	_empty_/Foo#apply().2
 _empty_/Bar#x.PZ F8EB6AF1ACC60C8E18AC12D420CED9EA