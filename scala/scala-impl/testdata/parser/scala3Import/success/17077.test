class MyProduct extends Product:
    def foo = ???
    override def productArity: Int = 1
    override def productElement(n: Int): Any = 42
    override def canEqual(that: Any): Boolean = that.isInstanceOf[MyProduct]
    def _1 = 42

object MyProductUnapply:
    def unapply(x: Int): MyProduct = MyProduct()

@main def test =
  val v: String | Int = "Blop"
  val res =
    v match
      case MyProductUnapply(y) => y // works: a product of arity 1 is accepted as the return type of unapply
                                    // see UnapplyInvalidReturnType in messages.scala
                                    // and https://docs.scala-lang.org/scala3/reference/changed-features/pattern-matching.html#fixed-arity-extractors
      case _ => 42
  println(res)

-----
ScalaFile
  ScClass: MyProduct
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MyProduct')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: Product
            CodeReferenceElement: Product
              PsiElement(identifier)('Product')
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n    ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n    ')
        ScFunctionDefinition: productArity
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('productArity')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('1')
        PsiWhiteSpace('\n    ')
        ScFunctionDefinition: productElement
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('productElement')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: n
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('n')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Any
            CodeReferenceElement: Any
              PsiElement(identifier)('Any')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('42')
        PsiWhiteSpace('\n    ')
        ScFunctionDefinition: canEqual
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('canEqual')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: that
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('that')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Any
                    CodeReferenceElement: Any
                      PsiElement(identifier)('Any')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Boolean
            CodeReferenceElement: Boolean
              PsiElement(identifier)('Boolean')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          GenericCall
            ReferenceExpression: that.isInstanceOf
              ReferenceExpression: that
                PsiElement(identifier)('that')
              PsiElement(.)('.')
              PsiElement(identifier)('isInstanceOf')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: MyProduct
                CodeReferenceElement: MyProduct
                  PsiElement(identifier)('MyProduct')
              PsiElement(])(']')
        PsiWhiteSpace('\n    ')
        ScFunctionDefinition: _1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('_1')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('42')
  PsiWhiteSpace('\n\n')
  ScObject: MyProductUnapply
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MyProductUnapply')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n    ')
        ScFunctionDefinition: unapply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('unapply')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: MyProduct
            CodeReferenceElement: MyProduct
              PsiElement(identifier)('MyProduct')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: MyProduct
              PsiElement(identifier)('MyProduct')
            ArgumentList
              PsiElement(()('(')
              PsiElement())(')')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: test
    AnnotationsList
      Annotation
        PsiElement(@)('@')
        AnnotationExpression
          ConstructorInvocation
            SimpleType: main
              CodeReferenceElement: main
                PsiElement(identifier)('main')
    Modifiers
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    BlockExpression
      PsiWhiteSpace('\n  ')
      ScPatternDefinition: v
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: v
            PsiElement(identifier)('v')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        InfixType: String | Int
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiWhiteSpace(' ')
          CodeReferenceElement: |
            PsiElement(identifier)('|')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        StringLiteral
          PsiElement(string content)('"Blop"')
      PsiWhiteSpace('\n  ')
      ScPatternDefinition: res
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: res
            PsiElement(identifier)('res')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace('\n    ')
        MatchStatement
          ReferenceExpression: v
            PsiElement(identifier)('v')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace('\n      ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: MyProductUnapply
                  PsiElement(identifier)('MyProductUnapply')
                Pattern Argument List
                  PsiElement(()('(')
                  ReferencePattern: y
                    PsiElement(identifier)('y')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                ReferenceExpression: y
                  PsiElement(identifier)('y')
            PsiWhiteSpace(' ')
            PsiComment(comment)('// works: a product of arity 1 is accepted as the return type of unapply')
            PsiWhiteSpace('\n                                    ')
            PsiComment(comment)('// see UnapplyInvalidReturnType in messages.scala')
            PsiWhiteSpace('\n                                    ')
            PsiComment(comment)('// and https://docs.scala-lang.org/scala3/reference/changed-features/pattern-matching.html#fixed-arity-extractors')
            PsiWhiteSpace('\n      ')
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              WildcardPattern
                PsiElement(_)('_')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                IntegerLiteral
                  PsiElement(integer)('42')
      PsiWhiteSpace('\n  ')
      MethodCall
        ReferenceExpression: println
          PsiElement(identifier)('println')
        ArgumentList
          PsiElement(()('(')
          ReferenceExpression: res
            PsiElement(identifier)('res')
          PsiElement())(')')
