//> using options -Yno-experimental

package dotty.tools
object test {

  val x = caps.cap

}
-----
ScalaFile
  PsiElement(SCALA_DIRECTIVE)
    ScDirectiveToken(tDIRECTIVE_PREFIX)('//>')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_COMMAND)('using')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_KEY)('options')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-Yno-experimental')
  PsiWhiteSpace('\n\n')
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: dotty.tools
      CodeReferenceElement: dotty
        PsiElement(identifier)('dotty')
      PsiElement(.)('.')
      PsiElement(identifier)('tools')
    PsiWhiteSpace('\n')
    ScObject: test
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('test')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n\n  ')
          ScPatternDefinition: x
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: x
                PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: caps.cap
              ReferenceExpression: caps
                PsiElement(identifier)('caps')
              PsiElement(.)('.')
              PsiElement(identifier)('cap')
          PsiWhiteSpace('\n\n')
          PsiElement(})('}')
