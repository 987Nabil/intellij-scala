//> using options -language:experimental.erasedDefinitions

trait Foo

trait PF[A, +B] {
  def apply(x: A): B
}

object Test {
  def orElse2[A1, B1 >: Foo](that: PF[A1, B1]): PF[A1, B1] = ???

  def identity[E]: PF[E, E] = ???

  def foo: PF[Foo, Foo] = ???

  def bla(foo: Foo) = orElse2(identity).apply(foo)
}
-----
ScalaFile
  PsiElement(SCALA_DIRECTIVE)
    ScDirectiveToken(tDIRECTIVE_PREFIX)('//>')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_COMMAND)('using')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_KEY)('options')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-language:experimental.erasedDefinitions')
  PsiWhiteSpace('\n\n')
  ScTrait: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScTrait: PF
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('PF')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('+')
        PsiElement(identifier)('B')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: apply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('apply')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: B
            CodeReferenceElement: B
              PsiElement(identifier)('B')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: orElse2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('orElse2')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A1
              PsiElement(identifier)('A1')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: B1
              PsiElement(identifier)('B1')
              PsiWhiteSpace(' ')
              PsiElement(>:)('>:')
              PsiWhiteSpace(' ')
              SimpleType: Foo
                CodeReferenceElement: Foo
                  PsiElement(identifier)('Foo')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: that
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('that')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: PF[A1, B1]
                    SimpleType: PF
                      CodeReferenceElement: PF
                        PsiElement(identifier)('PF')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: A1
                        CodeReferenceElement: A1
                          PsiElement(identifier)('A1')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: B1
                        CodeReferenceElement: B1
                          PsiElement(identifier)('B1')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: PF[A1, B1]
            SimpleType: PF
              CodeReferenceElement: PF
                PsiElement(identifier)('PF')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A1
                CodeReferenceElement: A1
                  PsiElement(identifier)('A1')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: B1
                CodeReferenceElement: B1
                  PsiElement(identifier)('B1')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: identity
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('identity')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: E
              PsiElement(identifier)('E')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: PF[E, E]
            SimpleType: PF
              CodeReferenceElement: PF
                PsiElement(identifier)('PF')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: E
                CodeReferenceElement: E
                  PsiElement(identifier)('E')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: E
                CodeReferenceElement: E
                  PsiElement(identifier)('E')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: PF[Foo, Foo]
            SimpleType: PF
              CodeReferenceElement: PF
                PsiElement(identifier)('PF')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Foo
                CodeReferenceElement: Foo
                  PsiElement(identifier)('Foo')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: Foo
                CodeReferenceElement: Foo
                  PsiElement(identifier)('Foo')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: bla
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('bla')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: foo
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('foo')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Foo
                    CodeReferenceElement: Foo
                      PsiElement(identifier)('Foo')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: orElse2(identity).apply
              MethodCall
                ReferenceExpression: orElse2
                  PsiElement(identifier)('orElse2')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: identity
                    PsiElement(identifier)('identity')
                  PsiElement())(')')
              PsiElement(.)('.')
              PsiElement(identifier)('apply')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: foo
                PsiElement(identifier)('foo')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
