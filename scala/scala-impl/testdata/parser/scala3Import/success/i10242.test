// https://github.com/lampepfl/dotty/issues/10242  
type Foo[A, B <: A] = A

type Bar[A] = A match {
  case Foo[String, x] => Unit
}

import scala.compiletime.ops.int.*

sealed trait HList
final case class HCons[H <: Int & Singleton, T <: HList](head: H, tail: T)
    extends HList
sealed trait HNil extends HList
case object HNil extends HNil

sealed trait Tensor[T, S <: HList]

object tf:
  def zeros[S <: HList](shape: S): Tensor[Float, S] = ???

  type NumElements[X <: HList] <: Int = X match
    case HNil              => 1
    case HCons[head, tail] => head * NumElements[tail]

  def reshape[T, From <: HList, To <: HList](
      tensor: Tensor[T, From],
      shape: To
  )(using NumElements[From] =:= NumElements[To]): Tensor[T, To] = ???

object test:
  val x = HCons(1, HCons(2, HNil))
  val y = tf.reshape(tf.zeros(x), HCons(2, HCons(1, HNil)))
-----
ScalaFile
  ScTypeAliasDefinition: Foo
    PsiComment(comment)('// https://github.com/lampepfl/dotty/issues/10242  ')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('B')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleType: A
          CodeReferenceElement: A
            PsiElement(identifier)('A')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    SimpleType: A
      CodeReferenceElement: A
        PsiElement(identifier)('A')
  PsiWhiteSpace('\n\n')
  ScTypeAliasDefinition: Bar
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bar')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchType: A match {
  case Foo[String, x] => Unit
}
      SimpleType: A
        CodeReferenceElement: A
          PsiElement(identifier)('A')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace(' ')
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      ScMatchTypeCasesImpl(match type cases)
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          ParametrizedType: Foo[String, x]
            SimpleType: Foo
              CodeReferenceElement: Foo
                PsiElement(identifier)('Foo')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              TypeVariable: x
                PsiElement(identifier)('x')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.compiletime.ops.int
        CodeReferenceElement: scala.compiletime.ops
          CodeReferenceElement: scala.compiletime
            CodeReferenceElement: scala
              PsiElement(identifier)('scala')
            PsiElement(.)('.')
            PsiElement(identifier)('compiletime')
          PsiElement(.)('.')
          PsiElement(identifier)('ops')
        PsiElement(.)('.')
        PsiElement(identifier)('int')
      PsiElement(.)('.')
      PsiElement(*)('*')
  PsiWhiteSpace('\n\n')
  ScTrait: HList
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HList')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: HCons
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(final)('final')
      PsiWhiteSpace(' ')
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HCons')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: H
        PsiElement(identifier)('H')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        InfixType: Int & Singleton
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          CodeReferenceElement: &
            PsiElement(identifier)('&')
          PsiWhiteSpace(' ')
          SimpleType: Singleton
            CodeReferenceElement: Singleton
              PsiElement(identifier)('Singleton')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: T
        PsiElement(identifier)('T')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleType: HList
          CodeReferenceElement: HList
            PsiElement(identifier)('HList')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: head
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('head')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: H
                CodeReferenceElement: H
                  PsiElement(identifier)('H')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          ClassParameter: tail
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('tail')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
          PsiElement())(')')
    PsiWhiteSpace('\n    ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: HList
            CodeReferenceElement: HList
              PsiElement(identifier)('HList')
  PsiWhiteSpace('\n')
  ScTrait: HNil
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HNil')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: HList
            CodeReferenceElement: HList
              PsiElement(identifier)('HList')
  PsiWhiteSpace('\n')
  ScObject: HNil
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HNil')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: HNil
            CodeReferenceElement: HNil
              PsiElement(identifier)('HNil')
  PsiWhiteSpace('\n\n')
  ScTrait: Tensor
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Tensor')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: S
        PsiElement(identifier)('S')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleType: HList
          CodeReferenceElement: HList
            PsiElement(identifier)('HList')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScObject: tf
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('tf')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: zeros
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('zeros')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: S
              PsiElement(identifier)('S')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: HList
                CodeReferenceElement: HList
                  PsiElement(identifier)('HList')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: shape
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('shape')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: S
                    CodeReferenceElement: S
                      PsiElement(identifier)('S')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Tensor[Float, S]
            SimpleType: Tensor
              CodeReferenceElement: Tensor
                PsiElement(identifier)('Tensor')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Float
                CodeReferenceElement: Float
                  PsiElement(identifier)('Float')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: S
                CodeReferenceElement: S
                  PsiElement(identifier)('S')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: NumElements
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('NumElements')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: X
              PsiElement(identifier)('X')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: HList
                CodeReferenceElement: HList
                  PsiElement(identifier)('HList')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(<:)('<:')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchType: X match
    case HNil              => 1
    case HCons[head, tail] => head * NumElements[tail]
            SimpleType: X
              CodeReferenceElement: X
                PsiElement(identifier)('X')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace('\n    ')
            ScMatchTypeCasesImpl(match type cases)
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                SimpleType: HNil
                  CodeReferenceElement: HNil
                    PsiElement(identifier)('HNil')
                PsiWhiteSpace('              ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                LiteralType: 1
                  IntegerLiteral
                    PsiElement(integer)('1')
              PsiWhiteSpace('\n    ')
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ParametrizedType: HCons[head, tail]
                  SimpleType: HCons
                    CodeReferenceElement: HCons
                      PsiElement(identifier)('HCons')
                  TypeArgumentsList
                    PsiElement([)('[')
                    TypeVariable: head
                      PsiElement(identifier)('head')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    TypeVariable: tail
                      PsiElement(identifier)('tail')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                InfixType: head * NumElements[tail]
                  SimpleType: head
                    CodeReferenceElement: head
                      PsiElement(identifier)('head')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: *
                    PsiElement(identifier)('*')
                  PsiWhiteSpace(' ')
                  ParametrizedType: NumElements[tail]
                    SimpleType: NumElements
                      CodeReferenceElement: NumElements
                        PsiElement(identifier)('NumElements')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: tail
                        CodeReferenceElement: tail
                          PsiElement(identifier)('tail')
                      PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: reshape
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('reshape')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: From
              PsiElement(identifier)('From')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: HList
                CodeReferenceElement: HList
                  PsiElement(identifier)('HList')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: To
              PsiElement(identifier)('To')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: HList
                CodeReferenceElement: HList
                  PsiElement(identifier)('HList')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiWhiteSpace('\n      ')
              Parameter: tensor
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('tensor')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Tensor[T, From]
                    SimpleType: Tensor
                      CodeReferenceElement: Tensor
                        PsiElement(identifier)('Tensor')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: From
                        CodeReferenceElement: From
                          PsiElement(identifier)('From')
                      PsiElement(])(']')
              PsiElement(,)(',')
              PsiWhiteSpace('\n      ')
              Parameter: shape
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('shape')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: To
                    CodeReferenceElement: To
                      PsiElement(identifier)('To')
              PsiWhiteSpace('\n  ')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: <anonymous>
                ParameterType
                  InfixType: NumElements[From] =:= NumElements[To]
                    ParametrizedType: NumElements[From]
                      SimpleType: NumElements
                        CodeReferenceElement: NumElements
                          PsiElement(identifier)('NumElements')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: From
                          CodeReferenceElement: From
                            PsiElement(identifier)('From')
                        PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: =:=
                      PsiElement(identifier)('=:=')
                    PsiWhiteSpace(' ')
                    ParametrizedType: NumElements[To]
                      SimpleType: NumElements
                        CodeReferenceElement: NumElements
                          PsiElement(identifier)('NumElements')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: To
                          CodeReferenceElement: To
                            PsiElement(identifier)('To')
                        PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Tensor[T, To]
            SimpleType: Tensor
              CodeReferenceElement: Tensor
                PsiElement(identifier)('Tensor')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: To
                CodeReferenceElement: To
                  PsiElement(identifier)('To')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
  PsiWhiteSpace('\n\n')
  ScObject: test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: HCons
              PsiElement(identifier)('HCons')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: HCons
                  PsiElement(identifier)('HCons')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('2')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: HNil
                    PsiElement(identifier)('HNil')
                  PsiElement())(')')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: y
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: y
              PsiElement(identifier)('y')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: tf.reshape
              ReferenceExpression: tf
                PsiElement(identifier)('tf')
              PsiElement(.)('.')
              PsiElement(identifier)('reshape')
            ArgumentList
              PsiElement(()('(')
              MethodCall
                ReferenceExpression: tf.zeros
                  ReferenceExpression: tf
                    PsiElement(identifier)('tf')
                  PsiElement(.)('.')
                  PsiElement(identifier)('zeros')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement())(')')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: HCons
                  PsiElement(identifier)('HCons')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('2')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: HCons
                      PsiElement(identifier)('HCons')
                    ArgumentList
                      PsiElement(()('(')
                      IntegerLiteral
                        PsiElement(integer)('1')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: HNil
                        PsiElement(identifier)('HNil')
                      PsiElement())(')')
                  PsiElement())(')')
              PsiElement())(')')
