type Upgrade[T] = T match
  case Int => Double
  case Char => String
  case Boolean => Boolean

val upgrade: [t] => t => Upgrade[t] = new PolyFunction:
  def apply[T](x: T): Upgrade[T] = x match
    case x: Int => x.toDouble
    case x: Char => x.toString
    case x: Boolean => !x

val upgrade2: [t] => t => Upgrade[t] = [t] => (x: t) => x match
  case x: Int => x.toDouble
  case x: Char => x.toString
  case x: Boolean => !x
-----
ScalaFile
  ScTypeAliasDefinition: Upgrade
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Upgrade')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchType: T match
  case Int => Double
  case Char => String
  case Boolean => Boolean
      SimpleType: T
        CodeReferenceElement: T
          PsiElement(identifier)('T')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace('\n  ')
      ScMatchTypeCasesImpl(match type cases)
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: Double
            CodeReferenceElement: Double
              PsiElement(identifier)('Double')
        PsiWhiteSpace('\n  ')
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          SimpleType: Char
            CodeReferenceElement: Char
              PsiElement(identifier)('Char')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
        PsiWhiteSpace('\n  ')
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          SimpleType: Boolean
            CodeReferenceElement: Boolean
              PsiElement(identifier)('Boolean')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: Boolean
            CodeReferenceElement: Boolean
              PsiElement(identifier)('Boolean')
  PsiWhiteSpace('\n\n')
  ScPatternDefinition: upgrade
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: upgrade
        PsiElement(identifier)('upgrade')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    PolymorhicFunctionType: [t] => t => Upgrade[t]
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: t
          PsiElement(identifier)('t')
        PsiElement(])(']')
      PsiWhiteSpace(' ')
      PsiElement(=>)('=>')
      PsiWhiteSpace(' ')
      FunctionalType: t => Upgrade[t]
        SimpleType: t
          CodeReferenceElement: t
            PsiElement(identifier)('t')
        PsiWhiteSpace(' ')
        PsiElement(=>)('=>')
        PsiWhiteSpace(' ')
        ParametrizedType: Upgrade[t]
          SimpleType: Upgrade
            CodeReferenceElement: Upgrade
              PsiElement(identifier)('Upgrade')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: t
              CodeReferenceElement: t
                PsiElement(identifier)('t')
            PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ScNewTemplateDefinition: <anonymous>
      PsiElement(new)('new')
      PsiWhiteSpace(' ')
      ExtendsBlock
        TemplateParents
          ConstructorInvocation
            SimpleType: PolyFunction
              CodeReferenceElement: PolyFunction
                PsiElement(identifier)('PolyFunction')
        ScTemplateBody
          PsiElement(:)(':')
          PsiWhiteSpace('\n  ')
          ScFunctionDefinition: apply
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('apply')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: T
                PsiElement(identifier)('T')
              PsiElement(])(']')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParametrizedType: Upgrade[T]
              SimpleType: Upgrade
                CodeReferenceElement: Upgrade
                  PsiElement(identifier)('Upgrade')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: T
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MatchStatement
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              PsiElement(match)('match')
              PsiWhiteSpace('\n    ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  Scala3 TypedPattern
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    TypePattern
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    ReferenceExpression: x.toDouble
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiElement(.)('.')
                      PsiElement(identifier)('toDouble')
                PsiWhiteSpace('\n    ')
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  Scala3 TypedPattern
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    TypePattern
                      SimpleType: Char
                        CodeReferenceElement: Char
                          PsiElement(identifier)('Char')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    ReferenceExpression: x.toString
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiElement(.)('.')
                      PsiElement(identifier)('toString')
                PsiWhiteSpace('\n    ')
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  Scala3 TypedPattern
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    TypePattern
                      SimpleType: Boolean
                        CodeReferenceElement: Boolean
                          PsiElement(identifier)('Boolean')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    PrefixExpression
                      ReferenceExpression: !
                        PsiElement(identifier)('!')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
  PsiWhiteSpace('\n\n')
  ScPatternDefinition: upgrade2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: upgrade2
        PsiElement(identifier)('upgrade2')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    PolymorhicFunctionType: [t] => t => Upgrade[t]
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: t
          PsiElement(identifier)('t')
        PsiElement(])(']')
      PsiWhiteSpace(' ')
      PsiElement(=>)('=>')
      PsiWhiteSpace(' ')
      FunctionalType: t => Upgrade[t]
        SimpleType: t
          CodeReferenceElement: t
            PsiElement(identifier)('t')
        PsiWhiteSpace(' ')
        PsiElement(=>)('=>')
        PsiWhiteSpace(' ')
        ParametrizedType: Upgrade[t]
          SimpleType: Upgrade
            CodeReferenceElement: Upgrade
              PsiElement(identifier)('Upgrade')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: t
              CodeReferenceElement: t
                PsiElement(identifier)('t')
            PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    PolyFunctionExpression
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: t
          PsiElement(identifier)('t')
        PsiElement(])(']')
      PsiWhiteSpace(' ')
      PsiElement(=>)('=>')
      PsiWhiteSpace(' ')
      FunctionExpression
        Parameters
          ParametersClause
            PsiElement(()('(')
            Parameter: x
              AnnotationsList
                <empty list>
              PsiElement(identifier)('x')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                SimpleType: t
                  CodeReferenceElement: t
                    PsiElement(identifier)('t')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiElement(=>)('=>')
        PsiWhiteSpace(' ')
        MatchStatement
          ReferenceExpression: x
            PsiElement(identifier)('x')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace('\n  ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              Scala3 TypedPattern
                ReferencePattern: x
                  PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                TypePattern
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                ReferenceExpression: x.toDouble
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement(.)('.')
                  PsiElement(identifier)('toDouble')
            PsiWhiteSpace('\n  ')
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              Scala3 TypedPattern
                ReferencePattern: x
                  PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                TypePattern
                  SimpleType: Char
                    CodeReferenceElement: Char
                      PsiElement(identifier)('Char')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                ReferenceExpression: x.toString
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement(.)('.')
                  PsiElement(identifier)('toString')
            PsiWhiteSpace('\n  ')
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              Scala3 TypedPattern
                ReferencePattern: x
                  PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                TypePattern
                  SimpleType: Boolean
                    CodeReferenceElement: Boolean
                      PsiElement(identifier)('Boolean')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                PrefixExpression
                  ReferenceExpression: !
                    PsiElement(identifier)('!')
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
