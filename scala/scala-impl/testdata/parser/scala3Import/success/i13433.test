//> using options -Xfatal-warnings -deprecation -feature

import scala.reflect.TypeTest

type Matcher[A] = A match { case String => String }

def patternMatch[A](a: Any)(using tt: TypeTest[Any, Matcher[A]]): Option[Matcher[A]] = {
  // type T = RDF.Triple[Rdf]
  a match {
    case res: Matcher[A] => Some(res)
    case _ => None
  }
}

def patternMatchWithAlias[A](a: Any)(using tt: TypeTest[Any, Matcher[A]]): Option[Matcher[A]] = {
  type T = Matcher[A]
  a match {
    case res: T => Some(res)
    case _ => None
  }
}


@main def main = {
  println(patternMatch[String]("abc"))
  println(patternMatchWithAlias[String]("abc"))
  println(patternMatch[String]("abc")(using (s: Any) => {
    if s.isInstanceOf[Matcher[String]] then Some[s.type & Matcher[String]](s.asInstanceOf[s.type & Matcher[String]]) else None }))
  println(patternMatchWithAlias[String]("abc")(using (s: Any) => {
    if s.isInstanceOf[Matcher[String]] then Some[s.type & Matcher[String]](s.asInstanceOf[s.type & Matcher[String]]) else None }))

  println(patternMatch[String](1))
  println(patternMatchWithAlias[String](1))
}
-----
ScalaFile
  PsiElement(SCALA_DIRECTIVE)
    ScDirectiveToken(tDIRECTIVE_PREFIX)('//>')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_COMMAND)('using')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_KEY)('options')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-Xfatal-warnings')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-deprecation')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-feature')
  PsiWhiteSpace('\n\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.reflect.TypeTest
        CodeReferenceElement: scala.reflect
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('reflect')
        PsiElement(.)('.')
        PsiElement(identifier)('TypeTest')
  PsiWhiteSpace('\n\n')
  ScTypeAliasDefinition: Matcher
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Matcher')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchType: A match { case String => String }
      SimpleType: A
        CodeReferenceElement: A
          PsiElement(identifier)('A')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace(' ')
      PsiElement({)('{')
      PsiWhiteSpace(' ')
      ScMatchTypeCasesImpl(match type cases)
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
      PsiWhiteSpace(' ')
      PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: patternMatch
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('patternMatch')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('a')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
        PsiElement())(')')
      ParametersClause
        PsiElement(()('(')
        PsiElement(using)('using')
        PsiWhiteSpace(' ')
        Parameter: tt
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('tt')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            ParametrizedType: TypeTest[Any, Matcher[A]]
              SimpleType: TypeTest
                CodeReferenceElement: TypeTest
                  PsiElement(identifier)('TypeTest')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Any
                  CodeReferenceElement: Any
                    PsiElement(identifier)('Any')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ParametrizedType: Matcher[A]
                  SimpleType: Matcher
                    CodeReferenceElement: Matcher
                      PsiElement(identifier)('Matcher')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiElement(])(']')
                PsiElement(])(']')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: Option[Matcher[A]]
      SimpleType: Option
        CodeReferenceElement: Option
          PsiElement(identifier)('Option')
      TypeArgumentsList
        PsiElement([)('[')
        ParametrizedType: Matcher[A]
          SimpleType: Matcher
            CodeReferenceElement: Matcher
              PsiElement(identifier)('Matcher')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
            PsiElement(])(']')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    BlockExpression
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      PsiComment(comment)('// type T = RDF.Triple[Rdf]')
      PsiWhiteSpace('\n  ')
      MatchStatement
        ReferenceExpression: a
          PsiElement(identifier)('a')
        PsiWhiteSpace(' ')
        PsiElement(match)('match')
        PsiWhiteSpace(' ')
        PsiElement({)('{')
        PsiWhiteSpace('\n    ')
        CaseClauses
          CaseClause
            PsiElement(case)('case')
            PsiWhiteSpace(' ')
            Scala3 TypedPattern
              ReferencePattern: res
                PsiElement(identifier)('res')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              TypePattern
                ParametrizedType: Matcher[A]
                  SimpleType: Matcher
                    CodeReferenceElement: Matcher
                      PsiElement(identifier)('Matcher')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            BlockOfExpressions
              MethodCall
                ReferenceExpression: Some
                  PsiElement(identifier)('Some')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: res
                    PsiElement(identifier)('res')
                  PsiElement())(')')
          PsiWhiteSpace('\n    ')
          CaseClause
            PsiElement(case)('case')
            PsiWhiteSpace(' ')
            WildcardPattern
              PsiElement(_)('_')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            BlockOfExpressions
              ReferenceExpression: None
                PsiElement(identifier)('None')
        PsiWhiteSpace('\n  ')
        PsiElement(})('}')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: patternMatchWithAlias
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('patternMatchWithAlias')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('a')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
        PsiElement())(')')
      ParametersClause
        PsiElement(()('(')
        PsiElement(using)('using')
        PsiWhiteSpace(' ')
        Parameter: tt
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('tt')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            ParametrizedType: TypeTest[Any, Matcher[A]]
              SimpleType: TypeTest
                CodeReferenceElement: TypeTest
                  PsiElement(identifier)('TypeTest')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Any
                  CodeReferenceElement: Any
                    PsiElement(identifier)('Any')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ParametrizedType: Matcher[A]
                  SimpleType: Matcher
                    CodeReferenceElement: Matcher
                      PsiElement(identifier)('Matcher')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiElement(])(']')
                PsiElement(])(']')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: Option[Matcher[A]]
      SimpleType: Option
        CodeReferenceElement: Option
          PsiElement(identifier)('Option')
      TypeArgumentsList
        PsiElement([)('[')
        ParametrizedType: Matcher[A]
          SimpleType: Matcher
            CodeReferenceElement: Matcher
              PsiElement(identifier)('Matcher')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
            PsiElement(])(']')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    BlockExpression
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      ScTypeAliasDefinition: T
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(type)('type')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('T')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ParametrizedType: Matcher[A]
          SimpleType: Matcher
            CodeReferenceElement: Matcher
              PsiElement(identifier)('Matcher')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
            PsiElement(])(']')
      PsiWhiteSpace('\n  ')
      MatchStatement
        ReferenceExpression: a
          PsiElement(identifier)('a')
        PsiWhiteSpace(' ')
        PsiElement(match)('match')
        PsiWhiteSpace(' ')
        PsiElement({)('{')
        PsiWhiteSpace('\n    ')
        CaseClauses
          CaseClause
            PsiElement(case)('case')
            PsiWhiteSpace(' ')
            Scala3 TypedPattern
              ReferencePattern: res
                PsiElement(identifier)('res')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              TypePattern
                SimpleType: T
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            BlockOfExpressions
              MethodCall
                ReferenceExpression: Some
                  PsiElement(identifier)('Some')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: res
                    PsiElement(identifier)('res')
                  PsiElement())(')')
          PsiWhiteSpace('\n    ')
          CaseClause
            PsiElement(case)('case')
            PsiWhiteSpace(' ')
            WildcardPattern
              PsiElement(_)('_')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            BlockOfExpressions
              ReferenceExpression: None
                PsiElement(identifier)('None')
        PsiWhiteSpace('\n  ')
        PsiElement(})('}')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
  PsiWhiteSpace('\n\n\n')
  ScFunctionDefinition: main
    AnnotationsList
      Annotation
        PsiElement(@)('@')
        AnnotationExpression
          ConstructorInvocation
            SimpleType: main
              CodeReferenceElement: main
                PsiElement(identifier)('main')
    Modifiers
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('main')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    BlockExpression
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      MethodCall
        ReferenceExpression: println
          PsiElement(identifier)('println')
        ArgumentList
          PsiElement(()('(')
          MethodCall
            GenericCall
              ReferenceExpression: patternMatch
                PsiElement(identifier)('patternMatch')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
                PsiElement(])(']')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"abc"')
              PsiElement())(')')
          PsiElement())(')')
      PsiWhiteSpace('\n  ')
      MethodCall
        ReferenceExpression: println
          PsiElement(identifier)('println')
        ArgumentList
          PsiElement(()('(')
          MethodCall
            GenericCall
              ReferenceExpression: patternMatchWithAlias
                PsiElement(identifier)('patternMatchWithAlias')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
                PsiElement(])(']')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"abc"')
              PsiElement())(')')
          PsiElement())(')')
      PsiWhiteSpace('\n  ')
      MethodCall
        ReferenceExpression: println
          PsiElement(identifier)('println')
        ArgumentList
          PsiElement(()('(')
          MethodCall
            MethodCall
              GenericCall
                ReferenceExpression: patternMatch
                  PsiElement(identifier)('patternMatch')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
                  PsiElement(])(']')
              ArgumentList
                PsiElement(()('(')
                StringLiteral
                  PsiElement(string content)('"abc"')
                PsiElement())(')')
            ArgumentList
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              FunctionExpression
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: s
                      AnnotationsList
                        <empty list>
                      PsiElement(identifier)('s')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Any
                          CodeReferenceElement: Any
                            PsiElement(identifier)('Any')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n    ')
                  IfStatement
                    PsiElement(if)('if')
                    PsiWhiteSpace(' ')
                    GenericCall
                      ReferenceExpression: s.isInstanceOf
                        ReferenceExpression: s
                          PsiElement(identifier)('s')
                        PsiElement(.)('.')
                        PsiElement(identifier)('isInstanceOf')
                      TypeArgumentsList
                        PsiElement([)('[')
                        ParametrizedType: Matcher[String]
                          SimpleType: Matcher
                            CodeReferenceElement: Matcher
                              PsiElement(identifier)('Matcher')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: String
                              CodeReferenceElement: String
                                PsiElement(identifier)('String')
                            PsiElement(])(']')
                        PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    PsiElement(then)('then')
                    PsiWhiteSpace(' ')
                    MethodCall
                      GenericCall
                        ReferenceExpression: Some
                          PsiElement(identifier)('Some')
                        TypeArgumentsList
                          PsiElement([)('[')
                          InfixType: s.type & Matcher[String]
                            SimpleType: s.type
                              CodeReferenceElement: s
                                PsiElement(identifier)('s')
                              PsiElement(.)('.')
                              PsiElement(type)('type')
                            PsiWhiteSpace(' ')
                            CodeReferenceElement: &
                              PsiElement(identifier)('&')
                            PsiWhiteSpace(' ')
                            ParametrizedType: Matcher[String]
                              SimpleType: Matcher
                                CodeReferenceElement: Matcher
                                  PsiElement(identifier)('Matcher')
                              TypeArgumentsList
                                PsiElement([)('[')
                                SimpleType: String
                                  CodeReferenceElement: String
                                    PsiElement(identifier)('String')
                                PsiElement(])(']')
                          PsiElement(])(']')
                      ArgumentList
                        PsiElement(()('(')
                        GenericCall
                          ReferenceExpression: s.asInstanceOf
                            ReferenceExpression: s
                              PsiElement(identifier)('s')
                            PsiElement(.)('.')
                            PsiElement(identifier)('asInstanceOf')
                          TypeArgumentsList
                            PsiElement([)('[')
                            InfixType: s.type & Matcher[String]
                              SimpleType: s.type
                                CodeReferenceElement: s
                                  PsiElement(identifier)('s')
                                PsiElement(.)('.')
                                PsiElement(type)('type')
                              PsiWhiteSpace(' ')
                              CodeReferenceElement: &
                                PsiElement(identifier)('&')
                              PsiWhiteSpace(' ')
                              ParametrizedType: Matcher[String]
                                SimpleType: Matcher
                                  CodeReferenceElement: Matcher
                                    PsiElement(identifier)('Matcher')
                                TypeArgumentsList
                                  PsiElement([)('[')
                                  SimpleType: String
                                    CodeReferenceElement: String
                                      PsiElement(identifier)('String')
                                  PsiElement(])(']')
                            PsiElement(])(']')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(else)('else')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: None
                      PsiElement(identifier)('None')
                  PsiWhiteSpace(' ')
                  PsiElement(})('}')
              PsiElement())(')')
          PsiElement())(')')
      PsiWhiteSpace('\n  ')
      MethodCall
        ReferenceExpression: println
          PsiElement(identifier)('println')
        ArgumentList
          PsiElement(()('(')
          MethodCall
            MethodCall
              GenericCall
                ReferenceExpression: patternMatchWithAlias
                  PsiElement(identifier)('patternMatchWithAlias')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
                  PsiElement(])(']')
              ArgumentList
                PsiElement(()('(')
                StringLiteral
                  PsiElement(string content)('"abc"')
                PsiElement())(')')
            ArgumentList
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              FunctionExpression
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: s
                      AnnotationsList
                        <empty list>
                      PsiElement(identifier)('s')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Any
                          CodeReferenceElement: Any
                            PsiElement(identifier)('Any')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n    ')
                  IfStatement
                    PsiElement(if)('if')
                    PsiWhiteSpace(' ')
                    GenericCall
                      ReferenceExpression: s.isInstanceOf
                        ReferenceExpression: s
                          PsiElement(identifier)('s')
                        PsiElement(.)('.')
                        PsiElement(identifier)('isInstanceOf')
                      TypeArgumentsList
                        PsiElement([)('[')
                        ParametrizedType: Matcher[String]
                          SimpleType: Matcher
                            CodeReferenceElement: Matcher
                              PsiElement(identifier)('Matcher')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: String
                              CodeReferenceElement: String
                                PsiElement(identifier)('String')
                            PsiElement(])(']')
                        PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    PsiElement(then)('then')
                    PsiWhiteSpace(' ')
                    MethodCall
                      GenericCall
                        ReferenceExpression: Some
                          PsiElement(identifier)('Some')
                        TypeArgumentsList
                          PsiElement([)('[')
                          InfixType: s.type & Matcher[String]
                            SimpleType: s.type
                              CodeReferenceElement: s
                                PsiElement(identifier)('s')
                              PsiElement(.)('.')
                              PsiElement(type)('type')
                            PsiWhiteSpace(' ')
                            CodeReferenceElement: &
                              PsiElement(identifier)('&')
                            PsiWhiteSpace(' ')
                            ParametrizedType: Matcher[String]
                              SimpleType: Matcher
                                CodeReferenceElement: Matcher
                                  PsiElement(identifier)('Matcher')
                              TypeArgumentsList
                                PsiElement([)('[')
                                SimpleType: String
                                  CodeReferenceElement: String
                                    PsiElement(identifier)('String')
                                PsiElement(])(']')
                          PsiElement(])(']')
                      ArgumentList
                        PsiElement(()('(')
                        GenericCall
                          ReferenceExpression: s.asInstanceOf
                            ReferenceExpression: s
                              PsiElement(identifier)('s')
                            PsiElement(.)('.')
                            PsiElement(identifier)('asInstanceOf')
                          TypeArgumentsList
                            PsiElement([)('[')
                            InfixType: s.type & Matcher[String]
                              SimpleType: s.type
                                CodeReferenceElement: s
                                  PsiElement(identifier)('s')
                                PsiElement(.)('.')
                                PsiElement(type)('type')
                              PsiWhiteSpace(' ')
                              CodeReferenceElement: &
                                PsiElement(identifier)('&')
                              PsiWhiteSpace(' ')
                              ParametrizedType: Matcher[String]
                                SimpleType: Matcher
                                  CodeReferenceElement: Matcher
                                    PsiElement(identifier)('Matcher')
                                TypeArgumentsList
                                  PsiElement([)('[')
                                  SimpleType: String
                                    CodeReferenceElement: String
                                      PsiElement(identifier)('String')
                                  PsiElement(])(']')
                            PsiElement(])(']')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(else)('else')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: None
                      PsiElement(identifier)('None')
                  PsiWhiteSpace(' ')
                  PsiElement(})('}')
              PsiElement())(')')
          PsiElement())(')')
      PsiWhiteSpace('\n\n  ')
      MethodCall
        ReferenceExpression: println
          PsiElement(identifier)('println')
        ArgumentList
          PsiElement(()('(')
          MethodCall
            GenericCall
              ReferenceExpression: patternMatch
                PsiElement(identifier)('patternMatch')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
                PsiElement(])(']')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement())(')')
          PsiElement())(')')
      PsiWhiteSpace('\n  ')
      MethodCall
        ReferenceExpression: println
          PsiElement(identifier)('println')
        ArgumentList
          PsiElement(()('(')
          MethodCall
            GenericCall
              ReferenceExpression: patternMatchWithAlias
                PsiElement(identifier)('patternMatchWithAlias')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
                PsiElement(])(']')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement())(')')
          PsiElement())(')')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
