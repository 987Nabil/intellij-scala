//> using options -Yno-experimental

import annotation.experimental

@main
@experimental
def run(): Unit = f

@experimental
def f = 2
-----
ScalaFile
  PsiElement(SCALA_DIRECTIVE)
    ScDirectiveToken(tDIRECTIVE_PREFIX)('//>')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_COMMAND)('using')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_KEY)('options')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-Yno-experimental')
  PsiWhiteSpace('\n\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: annotation.experimental
        CodeReferenceElement: annotation
          PsiElement(identifier)('annotation')
        PsiElement(.)('.')
        PsiElement(identifier)('experimental')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: run
    AnnotationsList
      Annotation
        PsiElement(@)('@')
        AnnotationExpression
          ConstructorInvocation
            SimpleType: main
              CodeReferenceElement: main
                PsiElement(identifier)('main')
      PsiWhiteSpace('\n')
      Annotation
        PsiElement(@)('@')
        AnnotationExpression
          ConstructorInvocation
            SimpleType: experimental
              CodeReferenceElement: experimental
                PsiElement(identifier)('experimental')
    Modifiers
      <empty list>
    PsiWhiteSpace('\n')
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('run')
    Parameters
      ParametersClause
        PsiElement(()('(')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Unit
      CodeReferenceElement: Unit
        PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: f
      PsiElement(identifier)('f')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: f
    AnnotationsList
      Annotation
        PsiElement(@)('@')
        AnnotationExpression
          ConstructorInvocation
            SimpleType: experimental
              CodeReferenceElement: experimental
                PsiElement(identifier)('experimental')
    Modifiers
      <empty list>
    PsiWhiteSpace('\n')
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('f')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    IntegerLiteral
      PsiElement(integer)('2')
