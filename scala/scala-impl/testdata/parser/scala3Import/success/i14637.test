//> using options -Xfatal-warnings -deprecation -feature

class C

object Givens:
  given cOrdering: Ordering[C] with
    override def compare(c0: C, c1: C) = 0
  val greeting = "we love Givens"
-----
ScalaFile
  PsiElement(SCALA_DIRECTIVE)
    ScDirectiveToken(tDIRECTIVE_PREFIX)('//>')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_COMMAND)('using')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_KEY)('options')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-Xfatal-warnings')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-deprecation')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-feature')
  PsiWhiteSpace('\n\n')
  ScClass: C
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('C')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScObject: Givens
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Givens')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScGivenDefinition: cOrdering
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(given)('given')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('cOrdering')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ExtendsBlock
            TemplateParents
              ConstructorInvocation
                ParametrizedType: Ordering[C]
                  SimpleType: Ordering
                    CodeReferenceElement: Ordering
                      PsiElement(identifier)('Ordering')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: C
                      CodeReferenceElement: C
                        PsiElement(identifier)('C')
                    PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(with)('with')
            PsiWhiteSpace('\n    ')
            ScTemplateBody
              ScFunctionDefinition: compare
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(override)('override')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('compare')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: c0
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('c0')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: C
                          CodeReferenceElement: C
                            PsiElement(identifier)('C')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    Parameter: c1
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('c1')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: C
                          CodeReferenceElement: C
                            PsiElement(identifier)('C')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('0')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: greeting
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: greeting
              PsiElement(identifier)('greeting')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          StringLiteral
            PsiElement(string content)('"we love Givens"')
