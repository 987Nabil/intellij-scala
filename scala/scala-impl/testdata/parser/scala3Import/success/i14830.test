
// https://github.com/lampepfl/dotty/issues/14830
val a: Comparable[String] = "Fred"
val b: { def length: Int } = "Fred"
val c: Comparable[String] & { def length: Int } = "Fred"
val d: Comparable[String] & { def length(): Int } = "Fred"
-----
ScalaFile
  ScPatternDefinition: a
    PsiComment(comment)('// https://github.com/lampepfl/dotty/issues/14830')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: a
        PsiElement(identifier)('a')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: Comparable[String]
      SimpleType: Comparable
        CodeReferenceElement: Comparable
          PsiElement(identifier)('Comparable')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: String
          CodeReferenceElement: String
            PsiElement(identifier)('String')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    StringLiteral
      PsiElement(string content)('"Fred"')
  PsiWhiteSpace('\n')
  ScPatternDefinition: b
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: b
        PsiElement(identifier)('b')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    CompoundType: { def length: Int }
      Refinement
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScFunctionDeclaration: length
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('length')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    StringLiteral
      PsiElement(string content)('"Fred"')
  PsiWhiteSpace('\n')
  ScPatternDefinition: c
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: c
        PsiElement(identifier)('c')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    InfixType: Comparable[String] & { def length: Int }
      ParametrizedType: Comparable[String]
        SimpleType: Comparable
          CodeReferenceElement: Comparable
            PsiElement(identifier)('Comparable')
        TypeArgumentsList
          PsiElement([)('[')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiElement(])(']')
      PsiWhiteSpace(' ')
      CodeReferenceElement: &
        PsiElement(identifier)('&')
      PsiWhiteSpace(' ')
      CompoundType: { def length: Int }
        Refinement
          PsiElement({)('{')
          PsiWhiteSpace(' ')
          ScFunctionDeclaration: length
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('length')
            Parameters
              <empty list>
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(})('}')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    StringLiteral
      PsiElement(string content)('"Fred"')
  PsiWhiteSpace('\n')
  ScPatternDefinition: d
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: d
        PsiElement(identifier)('d')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    InfixType: Comparable[String] & { def length(): Int }
      ParametrizedType: Comparable[String]
        SimpleType: Comparable
          CodeReferenceElement: Comparable
            PsiElement(identifier)('Comparable')
        TypeArgumentsList
          PsiElement([)('[')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiElement(])(']')
      PsiWhiteSpace(' ')
      CodeReferenceElement: &
        PsiElement(identifier)('&')
      PsiWhiteSpace(' ')
      CompoundType: { def length(): Int }
        Refinement
          PsiElement({)('{')
          PsiWhiteSpace(' ')
          ScFunctionDeclaration: length
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('length')
            Parameters
              ParametersClause
                PsiElement(()('(')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(})('}')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    StringLiteral
      PsiElement(string content)('"Fred"')
