import pkg._

object Test {
  implicitly[Foo2[Qux]]
  implicitly[Foo1[Qux]]
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: pkg
        PsiElement(identifier)('pkg')
      PsiElement(.)('.')
      PsiElement(_)('_')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: implicitly
            PsiElement(identifier)('implicitly')
          TypeArgumentsList
            PsiElement([)('[')
            ParametrizedType: Foo2[Qux]
              SimpleType: Foo2
                CodeReferenceElement: Foo2
                  PsiElement(identifier)('Foo2')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Qux
                  CodeReferenceElement: Qux
                    PsiElement(identifier)('Qux')
                PsiElement(])(']')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: implicitly
            PsiElement(identifier)('implicitly')
          TypeArgumentsList
            PsiElement([)('[')
            ParametrizedType: Foo1[Qux]
              SimpleType: Foo1
                CodeReferenceElement: Foo1
                  PsiElement(identifier)('Foo1')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Qux
                  CodeReferenceElement: Qux
                    PsiElement(identifier)('Qux')
                PsiElement(])(']')
            PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
