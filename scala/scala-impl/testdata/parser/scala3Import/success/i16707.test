import scala.deriving.Mirror
import scala.reflect.ClassTag

transparent inline given derived[A](
      using m: Mirror.ProductOf[A],
      idClassTag: ClassTag[Tuple.Union[m.MirroredElemTypes]]
  ): Unit = ???

case class Foo(a: Int)

val instance = derived[Foo] // error
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.deriving.Mirror
        CodeReferenceElement: scala.deriving
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('deriving')
        PsiElement(.)('.')
        PsiElement(identifier)('Mirror')
  PsiWhiteSpace('\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.reflect.ClassTag
        CodeReferenceElement: scala.reflect
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('reflect')
        PsiElement(.)('.')
        PsiElement(identifier)('ClassTag')
  PsiWhiteSpace('\n\n')
  ScGivenAliasDefinition: derived
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(transparent)('transparent')
      PsiWhiteSpace(' ')
      PsiElement(inline)('inline')
    PsiWhiteSpace(' ')
    PsiElement(given)('given')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('derived')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        PsiWhiteSpace('\n      ')
        PsiElement(using)('using')
        PsiWhiteSpace(' ')
        Parameter: m
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('m')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            ParametrizedType: Mirror.ProductOf[A]
              SimpleType: Mirror.ProductOf
                CodeReferenceElement: Mirror.ProductOf
                  CodeReferenceElement: Mirror
                    PsiElement(identifier)('Mirror')
                  PsiElement(.)('.')
                  PsiElement(identifier)('ProductOf')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
                PsiElement(])(']')
        PsiElement(,)(',')
        PsiWhiteSpace('\n      ')
        Parameter: idClassTag
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('idClassTag')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            ParametrizedType: ClassTag[Tuple.Union[m.MirroredElemTypes]]
              SimpleType: ClassTag
                CodeReferenceElement: ClassTag
                  PsiElement(identifier)('ClassTag')
              TypeArgumentsList
                PsiElement([)('[')
                ParametrizedType: Tuple.Union[m.MirroredElemTypes]
                  SimpleType: Tuple.Union
                    CodeReferenceElement: Tuple.Union
                      CodeReferenceElement: Tuple
                        PsiElement(identifier)('Tuple')
                      PsiElement(.)('.')
                      PsiElement(identifier)('Union')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: m.MirroredElemTypes
                      CodeReferenceElement: m.MirroredElemTypes
                        CodeReferenceElement: m
                          PsiElement(identifier)('m')
                        PsiElement(.)('.')
                        PsiElement(identifier)('MirroredElemTypes')
                    PsiElement(])(']')
                PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Unit
      CodeReferenceElement: Unit
        PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: ???
      PsiElement(identifier)('???')
  PsiWhiteSpace('\n\n')
  ScClass: Foo
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: a
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('a')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScPatternDefinition: instance
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: instance
        PsiElement(identifier)('instance')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    GenericCall
      ReferenceExpression: derived
        PsiElement(identifier)('derived')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: Foo
          CodeReferenceElement: Foo
            PsiElement(identifier)('Foo')
        PsiElement(])(']')
  PsiWhiteSpace(' ')
  PsiComment(comment)('// error')
