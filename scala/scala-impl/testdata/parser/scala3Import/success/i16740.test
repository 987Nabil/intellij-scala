class Enclosing:
  object Tags:
    opaque type Ref[T, S <: String & Singleton] = S
    inline def require[T, S <: String & Singleton]: Ref[T, S] = ???
  import Tags.*

  val t1 = require[Int, "t1"]
  val t2 = require[Double, "t2"]
-----
ScalaFile
  ScClass: Enclosing
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Enclosing')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScObject: Tags
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Tags')
          ExtendsBlock
            ScTemplateBody
              PsiElement(:)(':')
              PsiWhiteSpace('\n    ')
              ScTypeAliasDefinition: Ref
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(opaque)('opaque')
                PsiWhiteSpace(' ')
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Ref')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: T
                    PsiElement(identifier)('T')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TypeParameter: S
                    PsiElement(identifier)('S')
                    PsiWhiteSpace(' ')
                    PsiElement(<:)('<:')
                    PsiWhiteSpace(' ')
                    InfixType: String & Singleton
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: &
                        PsiElement(identifier)('&')
                      PsiWhiteSpace(' ')
                      SimpleType: Singleton
                        CodeReferenceElement: Singleton
                          PsiElement(identifier)('Singleton')
                  PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                SimpleType: S
                  CodeReferenceElement: S
                    PsiElement(identifier)('S')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: require
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(inline)('inline')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('require')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: T
                    PsiElement(identifier)('T')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TypeParameter: S
                    PsiElement(identifier)('S')
                    PsiWhiteSpace(' ')
                    PsiElement(<:)('<:')
                    PsiWhiteSpace(' ')
                    InfixType: String & Singleton
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: &
                        PsiElement(identifier)('&')
                      PsiWhiteSpace(' ')
                      SimpleType: Singleton
                        CodeReferenceElement: Singleton
                          PsiElement(identifier)('Singleton')
                  PsiElement(])(']')
                Parameters
                  <empty list>
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Ref[T, S]
                  SimpleType: Ref
                    CodeReferenceElement: Ref
                      PsiElement(identifier)('Ref')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: S
                      CodeReferenceElement: S
                        PsiElement(identifier)('S')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: ???
                  PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScImportStatement
          PsiElement(import)('import')
          PsiWhiteSpace(' ')
          ImportExpression
            CodeReferenceElement: Tags
              PsiElement(identifier)('Tags')
            PsiElement(.)('.')
            PsiElement(*)('*')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: t1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: t1
              PsiElement(identifier)('t1')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          GenericCall
            ReferenceExpression: require
              PsiElement(identifier)('require')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              LiteralType: "t1"
                StringLiteral
                  PsiElement(string content)('"t1"')
              PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: t2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: t2
              PsiElement(identifier)('t2')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          GenericCall
            ReferenceExpression: require
              PsiElement(identifier)('require')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Double
                CodeReferenceElement: Double
                  PsiElement(identifier)('Double')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              LiteralType: "t2"
                StringLiteral
                  PsiElement(string content)('"t2"')
              PsiElement(])(']')
