val x = (1, 1) match
  case _: (_ *: _) => ()
-----
ScalaFile
  ScPatternDefinition: x
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: x
        PsiElement(identifier)('x')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchStatement
      Tuple
        PsiElement(()('(')
        IntegerLiteral
          PsiElement(integer)('1')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        IntegerLiteral
          PsiElement(integer)('1')
        PsiElement())(')')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace('\n  ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          Scala3 TypedPattern
            WildcardPattern
              PsiElement(_)('_')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TypePattern
              TypeInParenthesis: (_ *: _)
                PsiElement(()('(')
                InfixType: _ *: _
                  WildcardType: _
                    PsiElement(_)('_')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: *:
                    PsiElement(identifier)('*:')
                  PsiWhiteSpace(' ')
                  WildcardType: _
                    PsiElement(_)('_')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            UnitExpression
              PsiElement(()('(')
              PsiElement())(')')
