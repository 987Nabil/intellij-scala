//> using options -source future -deprecation -Xfatal-warnings

def collectKeys[A, B, C](xs: Map[A, B])(f: PartialFunction[A, C]): Map[C, B] =
	xs.collect{ case (f(c) , b) => (c, b) }
-----
ScalaFile
  PsiElement(SCALA_DIRECTIVE)
    ScDirectiveToken(tDIRECTIVE_PREFIX)('//>')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_COMMAND)('using')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_KEY)('options')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-source')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('future')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-deprecation')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-Xfatal-warnings')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: collectKeys
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('collectKeys')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('B')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: C
        PsiElement(identifier)('C')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: xs
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('xs')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            ParametrizedType: Map[A, B]
              SimpleType: Map
                CodeReferenceElement: Map
                  PsiElement(identifier)('Map')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                SimpleType: B
                  CodeReferenceElement: B
                    PsiElement(identifier)('B')
                PsiElement(])(']')
        PsiElement())(')')
      ParametersClause
        PsiElement(()('(')
        Parameter: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('f')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            ParametrizedType: PartialFunction[A, C]
              SimpleType: PartialFunction
                CodeReferenceElement: PartialFunction
                  PsiElement(identifier)('PartialFunction')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                SimpleType: C
                  CodeReferenceElement: C
                    PsiElement(identifier)('C')
                PsiElement(])(']')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: Map[C, B]
      SimpleType: Map
        CodeReferenceElement: Map
          PsiElement(identifier)('Map')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: C
          CodeReferenceElement: C
            PsiElement(identifier)('C')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        SimpleType: B
          CodeReferenceElement: B
            PsiElement(identifier)('B')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace('\n\t')
    MethodCall
      ReferenceExpression: xs.collect
        ReferenceExpression: xs
          PsiElement(identifier)('xs')
        PsiElement(.)('.')
        PsiElement(identifier)('collect')
      ArgumentList
        BlockExpression
          PsiElement({)('{')
          PsiWhiteSpace(' ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              TuplePattern
                PsiElement(()('(')
                ArgumentPatterns
                  ConstructorPattern
                    CodeReferenceElement: f
                      PsiElement(identifier)('f')
                    Pattern Argument List
                      PsiElement(()('(')
                      ReferencePattern: c
                        PsiElement(identifier)('c')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferencePattern: b
                    PsiElement(identifier)('b')
                PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                Tuple
                  PsiElement(()('(')
                  ReferenceExpression: c
                    PsiElement(identifier)('c')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: b
                    PsiElement(identifier)('b')
                  PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(})('}')
