//> using options -Xfatal-warnings -Wunused:all -deprecation -feature

package foo:
  class Foo[T]
  given Foo[Int] = new Foo[Int]


package bar:
  import foo.{given foo.Foo[Int]}
  import foo.Foo

  val repro: Foo[Int] = summon[Foo[Int]]
-----
ScalaFile
  PsiElement(SCALA_DIRECTIVE)
    ScDirectiveToken(tDIRECTIVE_PREFIX)('//>')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_COMMAND)('using')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_KEY)('options')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-Xfatal-warnings')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-Wunused:all')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-deprecation')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-feature')
  PsiWhiteSpace('\n\n')
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: foo
      PsiElement(identifier)('foo')
    PsiElement(:)(':')
    PsiWhiteSpace('\n  ')
    ScClass: Foo
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Foo')
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: T
          PsiElement(identifier)('T')
        PsiElement(])(']')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          <empty list>
      ExtendsBlock
        <empty list>
    PsiWhiteSpace('\n  ')
    ScGivenAliasDefinition: given_Foo_Int
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(given)('given')
      PsiWhiteSpace(' ')
      ParametrizedType: Foo[Int]
        SimpleType: Foo
          CodeReferenceElement: Foo
            PsiElement(identifier)('Foo')
        TypeArgumentsList
          PsiElement([)('[')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiElement(])(']')
      Parameters
        <empty list>
      PsiWhiteSpace(' ')
      PsiElement(=)('=')
      PsiWhiteSpace(' ')
      ScNewTemplateDefinition: <anonymous>
        PsiElement(new)('new')
        PsiWhiteSpace(' ')
        ExtendsBlock
          TemplateParents
            ConstructorInvocation
              ParametrizedType: Foo[Int]
                SimpleType: Foo
                  CodeReferenceElement: Foo
                    PsiElement(identifier)('Foo')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiElement(])(']')
  PsiWhiteSpace('\n\n\n')
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: bar
      PsiElement(identifier)('bar')
    PsiElement(:)(':')
    PsiWhiteSpace('\n  ')
    ScImportStatement
      PsiElement(import)('import')
      PsiWhiteSpace(' ')
      ImportExpression
        CodeReferenceElement: foo
          PsiElement(identifier)('foo')
        PsiElement(.)('.')
        ImportSelectors
          PsiElement({)('{')
          ImportSelector
            PsiElement(given)('given')
            PsiWhiteSpace(' ')
            ParametrizedType: foo.Foo[Int]
              SimpleType: foo.Foo
                CodeReferenceElement: foo.Foo
                  CodeReferenceElement: foo
                    PsiElement(identifier)('foo')
                  PsiElement(.)('.')
                  PsiElement(identifier)('Foo')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiElement(])(']')
          PsiElement(})('}')
    PsiWhiteSpace('\n  ')
    ScImportStatement
      PsiElement(import)('import')
      PsiWhiteSpace(' ')
      ImportExpression
        CodeReferenceElement: foo.Foo
          CodeReferenceElement: foo
            PsiElement(identifier)('foo')
          PsiElement(.)('.')
          PsiElement(identifier)('Foo')
    PsiWhiteSpace('\n\n  ')
    ScPatternDefinition: repro
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(val)('val')
      PsiWhiteSpace(' ')
      ListOfPatterns
        ReferencePattern: repro
          PsiElement(identifier)('repro')
      PsiElement(:)(':')
      PsiWhiteSpace(' ')
      ParametrizedType: Foo[Int]
        SimpleType: Foo
          CodeReferenceElement: Foo
            PsiElement(identifier)('Foo')
        TypeArgumentsList
          PsiElement([)('[')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiElement(])(']')
      PsiWhiteSpace(' ')
      PsiElement(=)('=')
      PsiWhiteSpace(' ')
      GenericCall
        ReferenceExpression: summon
          PsiElement(identifier)('summon')
        TypeArgumentsList
          PsiElement([)('[')
          ParametrizedType: Foo[Int]
            SimpleType: Foo
              CodeReferenceElement: Foo
                PsiElement(identifier)('Foo')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiElement(])(']')
