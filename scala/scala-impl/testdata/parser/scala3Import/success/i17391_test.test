def test(): Unit =
{
  val x: Foo[mypkg.Bar[String]] = ???
  val y: mypkg.Bar[String] = ???

  y.retainAll("fd") // works
  x.f.retainAll("fd"); // error

}

class Foo[T](val f: T)
-----
ScalaFile
  ScFunctionDefinition: test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test')
    Parameters
      ParametersClause
        PsiElement(()('(')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Unit
      CodeReferenceElement: Unit
        PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace('\n')
    BlockExpression
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      ScPatternDefinition: x
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: x
            PsiElement(identifier)('x')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        ParametrizedType: Foo[mypkg.Bar[String]]
          SimpleType: Foo
            CodeReferenceElement: Foo
              PsiElement(identifier)('Foo')
          TypeArgumentsList
            PsiElement([)('[')
            ParametrizedType: mypkg.Bar[String]
              SimpleType: mypkg.Bar
                CodeReferenceElement: mypkg.Bar
                  CodeReferenceElement: mypkg
                    PsiElement(identifier)('mypkg')
                  PsiElement(.)('.')
                  PsiElement(identifier)('Bar')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
                PsiElement(])(']')
            PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ReferenceExpression: ???
          PsiElement(identifier)('???')
      PsiWhiteSpace('\n  ')
      ScPatternDefinition: y
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: y
            PsiElement(identifier)('y')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        ParametrizedType: mypkg.Bar[String]
          SimpleType: mypkg.Bar
            CodeReferenceElement: mypkg.Bar
              CodeReferenceElement: mypkg
                PsiElement(identifier)('mypkg')
              PsiElement(.)('.')
              PsiElement(identifier)('Bar')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
            PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ReferenceExpression: ???
          PsiElement(identifier)('???')
      PsiWhiteSpace('\n\n  ')
      MethodCall
        ReferenceExpression: y.retainAll
          ReferenceExpression: y
            PsiElement(identifier)('y')
          PsiElement(.)('.')
          PsiElement(identifier)('retainAll')
        ArgumentList
          PsiElement(()('(')
          StringLiteral
            PsiElement(string content)('"fd"')
          PsiElement())(')')
      PsiWhiteSpace(' ')
      PsiComment(comment)('// works')
      PsiWhiteSpace('\n  ')
      MethodCall
        ReferenceExpression: x.f.retainAll
          ReferenceExpression: x.f
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiElement(.)('.')
            PsiElement(identifier)('f')
          PsiElement(.)('.')
          PsiElement(identifier)('retainAll')
        ArgumentList
          PsiElement(()('(')
          StringLiteral
            PsiElement(string content)('"fd"')
          PsiElement())(')')
      PsiElement(;)(';')
      PsiWhiteSpace(' ')
      PsiComment(comment)('// error')
      PsiWhiteSpace('\n\n')
      PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: f
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('f')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
