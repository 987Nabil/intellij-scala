import scala.language.implicitConversions

def foo(a: Int): Int = ???
def bar(f: () => Int): Int = ???

given f: Conversion[Int => Int, () => Int] = ???

def test1: Int = bar(foo) // implicit conversion applied to foo
def test2: Int = bar(f(foo))
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.language.implicitConversions
        CodeReferenceElement: scala.language
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('language')
        PsiElement(.)('.')
        PsiElement(identifier)('implicitConversions')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('foo')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('a')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Int
      CodeReferenceElement: Int
        PsiElement(identifier)('Int')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: ???
      PsiElement(identifier)('???')
  PsiWhiteSpace('\n')
  ScFunctionDefinition: bar
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('bar')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('f')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            FunctionalType: () => Int
              TypeInParenthesis: ()
                PsiElement(()('(')
                PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Int
      CodeReferenceElement: Int
        PsiElement(identifier)('Int')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: ???
      PsiElement(identifier)('???')
  PsiWhiteSpace('\n\n')
  ScGivenAliasDefinition: f
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(given)('given')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('f')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: Conversion[Int => Int, () => Int]
      SimpleType: Conversion
        CodeReferenceElement: Conversion
          PsiElement(identifier)('Conversion')
      TypeArgumentsList
        PsiElement([)('[')
        FunctionalType: Int => Int
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        FunctionalType: () => Int
          TypeInParenthesis: ()
            PsiElement(()('(')
            PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: ???
      PsiElement(identifier)('???')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: test1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test1')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Int
      CodeReferenceElement: Int
        PsiElement(identifier)('Int')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: bar
        PsiElement(identifier)('bar')
      ArgumentList
        PsiElement(()('(')
        ReferenceExpression: foo
          PsiElement(identifier)('foo')
        PsiElement())(')')
  PsiWhiteSpace(' ')
  PsiComment(comment)('// implicit conversion applied to foo')
  PsiWhiteSpace('\n')
  ScFunctionDefinition: test2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test2')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Int
      CodeReferenceElement: Int
        PsiElement(identifier)('Int')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: bar
        PsiElement(identifier)('bar')
      ArgumentList
        PsiElement(()('(')
        MethodCall
          ReferenceExpression: f
            PsiElement(identifier)('f')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: foo
              PsiElement(identifier)('foo')
            PsiElement())(')')
        PsiElement())(')')
