//> using options -Xfatal-warnings -deprecation -feature

class Test {
  def test(x: 1 | 2 | 3) = (x: @annotation.switch) match {
    case 1 => 1
    case 2 => 2
    case 3 => 3
  }
}
-----
ScalaFile
  PsiElement(SCALA_DIRECTIVE)
    ScDirectiveToken(tDIRECTIVE_PREFIX)('//>')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_COMMAND)('using')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_KEY)('options')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-Xfatal-warnings')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-deprecation')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-feature')
  PsiWhiteSpace('\n\n')
  ScClass: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: test
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  InfixType: 1 | 2 | 3
                    InfixType: 1 | 2
                      LiteralType: 1
                        IntegerLiteral
                          PsiElement(integer)('1')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: |
                        PsiElement(identifier)('|')
                      PsiWhiteSpace(' ')
                      LiteralType: 2
                        IntegerLiteral
                          PsiElement(integer)('2')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: |
                      PsiElement(identifier)('|')
                    PsiWhiteSpace(' ')
                    LiteralType: 3
                      IntegerLiteral
                        PsiElement(integer)('3')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ExpressionInParenthesis
              PsiElement(()('(')
              TypedExpression
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                AnnotationsList
                  Annotation
                    PsiElement(@)('@')
                    AnnotationExpression
                      ConstructorInvocation
                        SimpleType: annotation.switch
                          CodeReferenceElement: annotation.switch
                            CodeReferenceElement: annotation
                              PsiElement(identifier)('annotation')
                            PsiElement(.)('.')
                            PsiElement(identifier)('switch')
              PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                LiteralPattern
                  IntegerLiteral
                    PsiElement(integer)('1')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  IntegerLiteral
                    PsiElement(integer)('1')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                LiteralPattern
                  IntegerLiteral
                    PsiElement(integer)('2')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  IntegerLiteral
                    PsiElement(integer)('2')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                LiteralPattern
                  IntegerLiteral
                    PsiElement(integer)('3')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  IntegerLiteral
                    PsiElement(integer)('3')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
