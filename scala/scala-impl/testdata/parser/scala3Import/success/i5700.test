// https://github.com/lampepfl/dotty/issues/5700
object noRecursionLimit:
  type M = { type T[+A]; type Ev >: T[Any] <: T[Nothing] }
  val M: M = ().asInstanceOf[M]
  def dcast(m: M.T[Any]): M.T[Int] = m: M.Ev
-----
ScalaFile
  ScObject: noRecursionLimit
    PsiComment(comment)('// https://github.com/lampepfl/dotty/issues/5700')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('noRecursionLimit')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: M
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('M')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          CompoundType: { type T[+A]; type Ev >: T[Any] <: T[Nothing] }
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDeclaration: T
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('T')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: A
                    PsiElement(identifier)('+')
                    PsiElement(identifier)('A')
                  PsiElement(])(']')
              PsiElement(;)(';')
              PsiWhiteSpace(' ')
              ScTypeAliasDeclaration: Ev
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Ev')
                PsiWhiteSpace(' ')
                PsiElement(>:)('>:')
                PsiWhiteSpace(' ')
                ParametrizedType: T[Any]
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Any
                      CodeReferenceElement: Any
                        PsiElement(identifier)('Any')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(<:)('<:')
                PsiWhiteSpace(' ')
                ParametrizedType: T[Nothing]
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Nothing
                      CodeReferenceElement: Nothing
                        PsiElement(identifier)('Nothing')
                    PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: M
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: M
              PsiElement(identifier)('M')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: M
            CodeReferenceElement: M
              PsiElement(identifier)('M')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          GenericCall
            ReferenceExpression: ().asInstanceOf
              UnitExpression
                PsiElement(()('(')
                PsiElement())(')')
              PsiElement(.)('.')
              PsiElement(identifier)('asInstanceOf')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: M
                CodeReferenceElement: M
                  PsiElement(identifier)('M')
              PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: dcast
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('dcast')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: m
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('m')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: M.T[Any]
                    SimpleType: M.T
                      CodeReferenceElement: M.T
                        CodeReferenceElement: M
                          PsiElement(identifier)('M')
                        PsiElement(.)('.')
                        PsiElement(identifier)('T')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Any
                        CodeReferenceElement: Any
                          PsiElement(identifier)('Any')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: M.T[Int]
            SimpleType: M.T
              CodeReferenceElement: M.T
                CodeReferenceElement: M
                  PsiElement(identifier)('M')
                PsiElement(.)('.')
                PsiElement(identifier)('T')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          TypedExpression
            ReferenceExpression: m
              PsiElement(identifier)('m')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: M.Ev
              CodeReferenceElement: M.Ev
                CodeReferenceElement: M
                  PsiElement(identifier)('M')
                PsiElement(.)('.')
                PsiElement(identifier)('Ev')
