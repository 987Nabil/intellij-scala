// https://github.com/lampepfl/dotty/issues/7445

object Main {
  type O1[A] = {
    type OutInner[X] = Unit
    type Out = OutInner[A]
  }

  def f1: O1[Int]#Out = ???
}
-----
ScalaFile
  PsiComment(comment)('// https://github.com/lampepfl/dotty/issues/7445')
  PsiWhiteSpace('\n\n')
  ScObject: Main
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Main')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: O1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('O1')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          CompoundType: {
    type OutInner[X] = Unit
    type Out = OutInner[A]
  }
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScTypeAliasDefinition: OutInner
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('OutInner')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: X
                    PsiElement(identifier)('X')
                  PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                SimpleType: Unit
                  CodeReferenceElement: Unit
                    PsiElement(identifier)('Unit')
              PsiWhiteSpace('\n    ')
              ScTypeAliasDefinition: Out
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Out')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ParametrizedType: OutInner[A]
                  SimpleType: OutInner
                    CodeReferenceElement: OutInner
                      PsiElement(identifier)('OutInner')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiElement(])(']')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: f1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f1')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          TypeProjection: O1[Int]#Out
            ParametrizedType: O1[Int]
              SimpleType: O1
                CodeReferenceElement: O1
                  PsiElement(identifier)('O1')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiElement(])(']')
            PsiElement(#)('#')
            PsiElement(identifier)('Out')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
