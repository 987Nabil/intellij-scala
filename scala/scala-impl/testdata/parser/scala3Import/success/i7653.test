// https://github.com/lampepfl/dotty/issues/7653

object options2 {
  type Option[T] = {
    def isEmpty: Boolean
  }
  type None[T] = Option[T]
  val none: () => Option[Nothing] = () =>
    new {
      def isEmpty = true
    }
  val mkNone0: [T] => () => Option[Nothing] = [T] =>
    () =>
      new {
        def isEmpty = true
    }
  val mkNone: [T] => () => Option[T] = [T] =>
    () =>
      new {
        def isEmpty = true
    }
}
-----
ScalaFile
  PsiComment(comment)('// https://github.com/lampepfl/dotty/issues/7653')
  PsiWhiteSpace('\n\n')
  ScObject: options2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('options2')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: Option
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Option')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          CompoundType: {
    def isEmpty: Boolean
  }
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDeclaration: isEmpty
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('isEmpty')
                Parameters
                  <empty list>
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Boolean
                  CodeReferenceElement: Boolean
                    PsiElement(identifier)('Boolean')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: None
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('None')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ParametrizedType: Option[T]
            SimpleType: Option
              CodeReferenceElement: Option
                PsiElement(identifier)('Option')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: none
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: none
              PsiElement(identifier)('none')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          FunctionalType: () => Option[Nothing]
            TypeInParenthesis: ()
              PsiElement(()('(')
              PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            ParametrizedType: Option[Nothing]
              SimpleType: Option
                CodeReferenceElement: Option
                  PsiElement(identifier)('Option')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Nothing
                  CodeReferenceElement: Nothing
                    PsiElement(identifier)('Nothing')
                PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionExpression
            Parameters
              ParametersClause
                PsiElement(()('(')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace('\n    ')
            ScNewTemplateDefinition: <anonymous>
              PsiElement(new)('new')
              PsiWhiteSpace(' ')
              ExtendsBlock
                ScTemplateBody
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  ScFunctionDefinition: isEmpty
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(def)('def')
                    PsiWhiteSpace(' ')
                    PsiElement(identifier)('isEmpty')
                    Parameters
                      <empty list>
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    BooleanLiteral
                      PsiElement(true)('true')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: mkNone0
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: mkNone0
              PsiElement(identifier)('mkNone0')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          PolymorhicFunctionType: [T] => () => Option[Nothing]
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: T
                PsiElement(identifier)('T')
              PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            FunctionalType: () => Option[Nothing]
              TypeInParenthesis: ()
                PsiElement(()('(')
                PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              ParametrizedType: Option[Nothing]
                SimpleType: Option
                  CodeReferenceElement: Option
                    PsiElement(identifier)('Option')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Nothing
                    CodeReferenceElement: Nothing
                      PsiElement(identifier)('Nothing')
                  PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          PolyFunctionExpression
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: T
                PsiElement(identifier)('T')
              PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace('\n    ')
            FunctionExpression
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace('\n      ')
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  ScTemplateBody
                    PsiElement({)('{')
                    PsiWhiteSpace('\n        ')
                    ScFunctionDefinition: isEmpty
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(def)('def')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('isEmpty')
                      Parameters
                        <empty list>
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      BooleanLiteral
                        PsiElement(true)('true')
                    PsiWhiteSpace('\n    ')
                    PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: mkNone
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: mkNone
              PsiElement(identifier)('mkNone')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          PolymorhicFunctionType: [T] => () => Option[T]
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: T
                PsiElement(identifier)('T')
              PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            FunctionalType: () => Option[T]
              TypeInParenthesis: ()
                PsiElement(()('(')
                PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              ParametrizedType: Option[T]
                SimpleType: Option
                  CodeReferenceElement: Option
                    PsiElement(identifier)('Option')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                  PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          PolyFunctionExpression
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: T
                PsiElement(identifier)('T')
              PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace('\n    ')
            FunctionExpression
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace('\n      ')
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  ScTemplateBody
                    PsiElement({)('{')
                    PsiWhiteSpace('\n        ')
                    ScFunctionDefinition: isEmpty
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(def)('def')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('isEmpty')
                      Parameters
                        <empty list>
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      BooleanLiteral
                        PsiElement(true)('true')
                    PsiWhiteSpace('\n    ')
                    PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
