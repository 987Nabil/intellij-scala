//> using options -Xfatal-warnings -deprecation -feature

package asts

enum Ast[-T >: Null]:
  case DefDef()

trait AstImpl[T >: Null]:
  type Ast = asts.Ast[T]
  type DefDef = Ast.DefDef[T]
end AstImpl

object untpd extends AstImpl[Null]:

  def DefDef(ast: Ast): DefDef = ast match
    case ast: DefDef => ast

end untpd
-----
ScalaFile
  PsiElement(SCALA_DIRECTIVE)
    ScDirectiveToken(tDIRECTIVE_PREFIX)('//>')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_COMMAND)('using')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_KEY)('options')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-Xfatal-warnings')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-deprecation')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-feature')
  PsiWhiteSpace('\n\n')
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: asts
      PsiElement(identifier)('asts')
    PsiWhiteSpace('\n\n')
    ScEnum: Ast
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(enum)('enum')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Ast')
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: T
          PsiElement(identifier)('-')
          PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          PsiElement(>:)('>:')
          PsiWhiteSpace(' ')
          SimpleType: Null
            CodeReferenceElement: Null
              PsiElement(identifier)('Null')
        PsiElement(])(']')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          <empty list>
      ExtendsBlock
        ScTemplateBody
          PsiElement(:)(':')
          PsiWhiteSpace('\n  ')
          ScEnumCases: DefDef
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(case)('case')
            PsiWhiteSpace(' ')
            ScEnumClassCase: DefDef
              PsiElement(identifier)('DefDef')
              PrimaryConstructor
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement())(')')
              ExtendsBlock
                <empty list>
    PsiWhiteSpace('\n\n')
    ScTrait: AstImpl
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('AstImpl')
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: T
          PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          PsiElement(>:)('>:')
          PsiWhiteSpace(' ')
          SimpleType: Null
            CodeReferenceElement: Null
              PsiElement(identifier)('Null')
        PsiElement(])(']')
      ExtendsBlock
        ScTemplateBody
          PsiElement(:)(':')
          PsiWhiteSpace('\n  ')
          ScTypeAliasDefinition: Ast
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(type)('type')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Ast')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ParametrizedType: asts.Ast[T]
              SimpleType: asts.Ast
                CodeReferenceElement: asts.Ast
                  CodeReferenceElement: asts
                    PsiElement(identifier)('asts')
                  PsiElement(.)('.')
                  PsiElement(identifier)('Ast')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: T
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
                PsiElement(])(']')
          PsiWhiteSpace('\n  ')
          ScTypeAliasDefinition: DefDef
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(type)('type')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('DefDef')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ParametrizedType: Ast.DefDef[T]
              SimpleType: Ast.DefDef
                CodeReferenceElement: Ast.DefDef
                  CodeReferenceElement: Ast
                    PsiElement(identifier)('Ast')
                  PsiElement(.)('.')
                  PsiElement(identifier)('DefDef')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: T
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
                PsiElement(])(']')
          PsiWhiteSpace('\n')
          End: AstImpl
            PsiElement(end)('end')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('AstImpl')
    PsiWhiteSpace('\n\n')
    ScObject: untpd
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('untpd')
      PsiWhiteSpace(' ')
      ExtendsBlock
        PsiElement(extends)('extends')
        PsiWhiteSpace(' ')
        TemplateParents
          ConstructorInvocation
            ParametrizedType: AstImpl[Null]
              SimpleType: AstImpl
                CodeReferenceElement: AstImpl
                  PsiElement(identifier)('AstImpl')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Null
                  CodeReferenceElement: Null
                    PsiElement(identifier)('Null')
                PsiElement(])(']')
        ScTemplateBody
          PsiElement(:)(':')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: DefDef
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('DefDef')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: ast
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('ast')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Ast
                      CodeReferenceElement: Ast
                        PsiElement(identifier)('Ast')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: DefDef
              CodeReferenceElement: DefDef
                PsiElement(identifier)('DefDef')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MatchStatement
              ReferenceExpression: ast
                PsiElement(identifier)('ast')
              PsiWhiteSpace(' ')
              PsiElement(match)('match')
              PsiWhiteSpace('\n    ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  Scala3 TypedPattern
                    ReferencePattern: ast
                      PsiElement(identifier)('ast')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    TypePattern
                      SimpleType: DefDef
                        CodeReferenceElement: DefDef
                          PsiElement(identifier)('DefDef')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    ReferenceExpression: ast
                      PsiElement(identifier)('ast')
          PsiWhiteSpace('\n\n')
          End: untpd
            PsiElement(end)('end')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('untpd')
