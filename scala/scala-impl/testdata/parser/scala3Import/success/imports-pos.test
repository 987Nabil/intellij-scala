//> using options -source 3.2

package test;

import java.lang.System as S

object test {
  import S.out.{print as p, println as print}

  val foo = 1;

  p("hello"); print("world"); S.out.println("!");
  S.out.flush();
}
object test1 {
  import test._;
  foo
}
-----
ScalaFile
  PsiElement(SCALA_DIRECTIVE)
    ScDirectiveToken(tDIRECTIVE_PREFIX)('//>')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_COMMAND)('using')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_KEY)('options')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-source')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('3.2')
  PsiWhiteSpace('\n\n')
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: test
      PsiElement(identifier)('test')
    PsiElement(;)(';')
    PsiWhiteSpace('\n\n')
    ScImportStatement
      PsiElement(import)('import')
      PsiWhiteSpace(' ')
      ImportExpression
        CodeReferenceElement: java.lang
          CodeReferenceElement: java
            PsiElement(identifier)('java')
          PsiElement(.)('.')
          PsiElement(identifier)('lang')
        PsiElement(.)('.')
        ImportSelectors
          ImportSelector
            CodeReferenceElement: System
              PsiElement(identifier)('System')
            PsiWhiteSpace(' ')
            PsiElement(as)('as')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('S')
    PsiWhiteSpace('\n\n')
    ScObject: test
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('test')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScImportStatement
            PsiElement(import)('import')
            PsiWhiteSpace(' ')
            ImportExpression
              CodeReferenceElement: S.out
                CodeReferenceElement: S
                  PsiElement(identifier)('S')
                PsiElement(.)('.')
                PsiElement(identifier)('out')
              PsiElement(.)('.')
              ImportSelectors
                PsiElement({)('{')
                ImportSelector
                  CodeReferenceElement: print
                    PsiElement(identifier)('print')
                  PsiWhiteSpace(' ')
                  PsiElement(as)('as')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('p')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ImportSelector
                  CodeReferenceElement: println
                    PsiElement(identifier)('println')
                  PsiWhiteSpace(' ')
                  PsiElement(as)('as')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('print')
                PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScPatternDefinition: foo
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: foo
                PsiElement(identifier)('foo')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('1')
          PsiElement(;)(';')
          PsiWhiteSpace('\n\n  ')
          MethodCall
            ReferenceExpression: p
              PsiElement(identifier)('p')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"hello"')
              PsiElement())(')')
          PsiElement(;)(';')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: print
              PsiElement(identifier)('print')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"world"')
              PsiElement())(')')
          PsiElement(;)(';')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: S.out.println
              ReferenceExpression: S.out
                ReferenceExpression: S
                  PsiElement(identifier)('S')
                PsiElement(.)('.')
                PsiElement(identifier)('out')
              PsiElement(.)('.')
              PsiElement(identifier)('println')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"!"')
              PsiElement())(')')
          PsiElement(;)(';')
          PsiWhiteSpace('\n  ')
          MethodCall
            ReferenceExpression: S.out.flush
              ReferenceExpression: S.out
                ReferenceExpression: S
                  PsiElement(identifier)('S')
                PsiElement(.)('.')
                PsiElement(identifier)('out')
              PsiElement(.)('.')
              PsiElement(identifier)('flush')
            ArgumentList
              PsiElement(()('(')
              PsiElement())(')')
          PsiElement(;)(';')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
    PsiWhiteSpace('\n')
    ScObject: test1
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('test1')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScImportStatement
            PsiElement(import)('import')
            PsiWhiteSpace(' ')
            ImportExpression
              CodeReferenceElement: test
                PsiElement(identifier)('test')
              PsiElement(.)('.')
              PsiElement(_)('_')
          PsiElement(;)(';')
          PsiWhiteSpace('\n  ')
          ReferenceExpression: foo
            PsiElement(identifier)('foo')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
