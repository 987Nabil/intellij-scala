//> using options -source 3.2

import scala.collection.mutable.*

trait BugTrack {
    trait B[+T]
    val cache : HashMap[A[_], B[_]] = HashMap.empty

    def A[T](f: Int => B[T]): A[T]
        = new A[T]{def apply(in: Int) = f(in)}

    abstract class A[+T] extends (Int => B[T]) {
      def giveMeSame = this
    }

    def amethod[T](p: =>A[T]): A[T] = A(in => cache.get(p) match {
           case Some(res) => res
           case None => p(in)
     }).giveMeSame.asInstanceOf[A[T]]
}
-----
ScalaFile
  PsiElement(SCALA_DIRECTIVE)
    ScDirectiveToken(tDIRECTIVE_PREFIX)('//>')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_COMMAND)('using')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_KEY)('options')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-source')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('3.2')
  PsiWhiteSpace('\n\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.collection.mutable
        CodeReferenceElement: scala.collection
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('collection')
        PsiElement(.)('.')
        PsiElement(identifier)('mutable')
      PsiElement(.)('.')
      PsiElement(*)('*')
  PsiWhiteSpace('\n\n')
  ScTrait: BugTrack
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('BugTrack')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n    ')
        ScTrait: B
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('B')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('+')
              PsiElement(identifier)('T')
            PsiElement(])(']')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n    ')
        ScPatternDefinition: cache
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: cache
              PsiElement(identifier)('cache')
          PsiWhiteSpace(' ')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: HashMap[A[_], B[_]]
            SimpleType: HashMap
              CodeReferenceElement: HashMap
                PsiElement(identifier)('HashMap')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: A[_]
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
                TypeArgumentsList
                  PsiElement([)('[')
                  WildcardType: _
                    PsiElement(_)('_')
                  PsiElement(])(']')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ParametrizedType: B[_]
                SimpleType: B
                  CodeReferenceElement: B
                    PsiElement(identifier)('B')
                TypeArgumentsList
                  PsiElement([)('[')
                  WildcardType: _
                    PsiElement(_)('_')
                  PsiElement(])(']')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: HashMap.empty
            ReferenceExpression: HashMap
              PsiElement(identifier)('HashMap')
            PsiElement(.)('.')
            PsiElement(identifier)('empty')
        PsiWhiteSpace('\n\n    ')
        ScFunctionDefinition: A
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('A')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: Int => B[T]
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    ParametrizedType: B[T]
                      SimpleType: B
                        CodeReferenceElement: B
                          PsiElement(identifier)('B')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                        PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: A[T]
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
          PsiWhiteSpace('\n        ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: A[T]
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
              ScTemplateBody
                PsiElement({)('{')
                ScFunctionDefinition: apply
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('apply')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: in
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('in')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: f
                      PsiElement(identifier)('f')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: in
                        PsiElement(identifier)('in')
                      PsiElement())(')')
                PsiElement(})('}')
        PsiWhiteSpace('\n\n    ')
        ScClass: A
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(abstract)('abstract')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('A')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('+')
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                TypeInParenthesis: (Int => B[T])
                  PsiElement(()('(')
                  FunctionalType: Int => B[T]
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    ParametrizedType: B[T]
                      SimpleType: B
                        CodeReferenceElement: B
                          PsiElement(identifier)('B')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                        PsiElement(])(']')
                  PsiElement())(')')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n      ')
              ScFunctionDefinition: giveMeSame
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('giveMeSame')
                Parameters
                  <empty list>
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ThisReference
                  PsiElement(this)('this')
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n    ')
        ScFunctionDefinition: amethod
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('amethod')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: p
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('p')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  PsiElement(=>)('=>')
                  ParametrizedType: A[T]
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: A[T]
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          GenericCall
            ReferenceExpression: A(in => cache.get(p) match {
           case Some(res) => res
           case None => p(in)
     }).giveMeSame.asInstanceOf
              ReferenceExpression: A(in => cache.get(p) match {
           case Some(res) => res
           case None => p(in)
     }).giveMeSame
                MethodCall
                  ReferenceExpression: A
                    PsiElement(identifier)('A')
                  ArgumentList
                    PsiElement(()('(')
                    FunctionExpression
                      Parameters
                        ParametersClause
                          Parameter: in
                            PsiElement(identifier)('in')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      MatchStatement
                        MethodCall
                          ReferenceExpression: cache.get
                            ReferenceExpression: cache
                              PsiElement(identifier)('cache')
                            PsiElement(.)('.')
                            PsiElement(identifier)('get')
                          ArgumentList
                            PsiElement(()('(')
                            ReferenceExpression: p
                              PsiElement(identifier)('p')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(match)('match')
                        PsiWhiteSpace(' ')
                        PsiElement({)('{')
                        PsiWhiteSpace('\n           ')
                        CaseClauses
                          CaseClause
                            PsiElement(case)('case')
                            PsiWhiteSpace(' ')
                            ConstructorPattern
                              CodeReferenceElement: Some
                                PsiElement(identifier)('Some')
                              Pattern Argument List
                                PsiElement(()('(')
                                ReferencePattern: res
                                  PsiElement(identifier)('res')
                                PsiElement())(')')
                            PsiWhiteSpace(' ')
                            PsiElement(=>)('=>')
                            PsiWhiteSpace(' ')
                            BlockOfExpressions
                              ReferenceExpression: res
                                PsiElement(identifier)('res')
                          PsiWhiteSpace('\n           ')
                          CaseClause
                            PsiElement(case)('case')
                            PsiWhiteSpace(' ')
                            StableElementPattern
                              ReferenceExpression: None
                                PsiElement(identifier)('None')
                            PsiWhiteSpace(' ')
                            PsiElement(=>)('=>')
                            PsiWhiteSpace(' ')
                            BlockOfExpressions
                              MethodCall
                                ReferenceExpression: p
                                  PsiElement(identifier)('p')
                                ArgumentList
                                  PsiElement(()('(')
                                  ReferenceExpression: in
                                    PsiElement(identifier)('in')
                                  PsiElement())(')')
                        PsiWhiteSpace('\n     ')
                        PsiElement(})('}')
                    PsiElement())(')')
                PsiElement(.)('.')
                PsiElement(identifier)('giveMeSame')
              PsiElement(.)('.')
              PsiElement(identifier)('asInstanceOf')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: A[T]
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                  PsiElement(])(']')
              PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
