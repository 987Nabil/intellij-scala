//> using options -Xfatal-warnings -deprecation -feature

def foo: Unit =
  object O:
    sealed abstract class A
  class B extends O.A
  class C extends O.A

  val x: O.A = ???
  x match
    case x: B => ???
    case x: C => ???
-----
ScalaFile
  PsiElement(SCALA_DIRECTIVE)
    ScDirectiveToken(tDIRECTIVE_PREFIX)('//>')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_COMMAND)('using')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_KEY)('options')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-Xfatal-warnings')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-deprecation')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-feature')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('foo')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Unit
      CodeReferenceElement: Unit
        PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    BlockExpression
      PsiWhiteSpace('\n  ')
      ScObject: O
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(object)('object')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('O')
        ExtendsBlock
          ScTemplateBody
            PsiElement(:)(':')
            PsiWhiteSpace('\n    ')
            ScClass: A
              AnnotationsList
                <empty list>
              Modifiers
                PsiElement(sealed)('sealed')
                PsiWhiteSpace(' ')
                PsiElement(abstract)('abstract')
              PsiWhiteSpace(' ')
              PsiElement(class)('class')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('A')
              PrimaryConstructor
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                Parameters
                  <empty list>
              ExtendsBlock
                <empty list>
      PsiWhiteSpace('\n  ')
      ScClass: B
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(class)('class')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('B')
        PrimaryConstructor
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          Parameters
            <empty list>
        PsiWhiteSpace(' ')
        ExtendsBlock
          PsiElement(extends)('extends')
          PsiWhiteSpace(' ')
          TemplateParents
            ConstructorInvocation
              SimpleType: O.A
                CodeReferenceElement: O.A
                  CodeReferenceElement: O
                    PsiElement(identifier)('O')
                  PsiElement(.)('.')
                  PsiElement(identifier)('A')
      PsiWhiteSpace('\n  ')
      ScClass: C
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(class)('class')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('C')
        PrimaryConstructor
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          Parameters
            <empty list>
        PsiWhiteSpace(' ')
        ExtendsBlock
          PsiElement(extends)('extends')
          PsiWhiteSpace(' ')
          TemplateParents
            ConstructorInvocation
              SimpleType: O.A
                CodeReferenceElement: O.A
                  CodeReferenceElement: O
                    PsiElement(identifier)('O')
                  PsiElement(.)('.')
                  PsiElement(identifier)('A')
      PsiWhiteSpace('\n\n  ')
      ScPatternDefinition: x
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: x
            PsiElement(identifier)('x')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        SimpleType: O.A
          CodeReferenceElement: O.A
            CodeReferenceElement: O
              PsiElement(identifier)('O')
            PsiElement(.)('.')
            PsiElement(identifier)('A')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ReferenceExpression: ???
          PsiElement(identifier)('???')
      PsiWhiteSpace('\n  ')
      MatchStatement
        ReferenceExpression: x
          PsiElement(identifier)('x')
        PsiWhiteSpace(' ')
        PsiElement(match)('match')
        PsiWhiteSpace('\n    ')
        CaseClauses
          CaseClause
            PsiElement(case)('case')
            PsiWhiteSpace(' ')
            Scala3 TypedPattern
              ReferencePattern: x
                PsiElement(identifier)('x')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              TypePattern
                SimpleType: B
                  CodeReferenceElement: B
                    PsiElement(identifier)('B')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            BlockOfExpressions
              ReferenceExpression: ???
                PsiElement(identifier)('???')
          PsiWhiteSpace('\n    ')
          CaseClause
            PsiElement(case)('case')
            PsiWhiteSpace(' ')
            Scala3 TypedPattern
              ReferencePattern: x
                PsiElement(identifier)('x')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              TypePattern
                SimpleType: C
                  CodeReferenceElement: C
                    PsiElement(identifier)('C')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            BlockOfExpressions
              ReferenceExpression: ???
                PsiElement(identifier)('???')
