class MockFunction1[T1]:
  def expects(v1: T1 | Foo): Any = ???
  def expects(matcher: String): Any = ???

def when[T1](f: T1 => Any): MockFunction1[T1] = ???

class Foo

def main =
    val f: Foo = new Foo
    when((x: Foo) => "").expects(f)
-----
ScalaFile
  ScClass: MockFunction1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MockFunction1')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T1
        PsiElement(identifier)('T1')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: expects
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('expects')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: v1
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('v1')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  InfixType: T1 | Foo
                    SimpleType: T1
                      CodeReferenceElement: T1
                        PsiElement(identifier)('T1')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: |
                      PsiElement(identifier)('|')
                    PsiWhiteSpace(' ')
                    SimpleType: Foo
                      CodeReferenceElement: Foo
                        PsiElement(identifier)('Foo')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Any
            CodeReferenceElement: Any
              PsiElement(identifier)('Any')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: expects
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('expects')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: matcher
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('matcher')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Any
            CodeReferenceElement: Any
              PsiElement(identifier)('Any')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: when
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('when')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T1
        PsiElement(identifier)('T1')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('f')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            FunctionalType: T1 => Any
              SimpleType: T1
                CodeReferenceElement: T1
                  PsiElement(identifier)('T1')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              SimpleType: Any
                CodeReferenceElement: Any
                  PsiElement(identifier)('Any')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: MockFunction1[T1]
      SimpleType: MockFunction1
        CodeReferenceElement: MockFunction1
          PsiElement(identifier)('MockFunction1')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: T1
          CodeReferenceElement: T1
            PsiElement(identifier)('T1')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: ???
      PsiElement(identifier)('???')
  PsiWhiteSpace('\n\n')
  ScClass: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: main
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('main')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    BlockExpression
      PsiWhiteSpace('\n    ')
      ScPatternDefinition: f
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: f
            PsiElement(identifier)('f')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        SimpleType: Foo
          CodeReferenceElement: Foo
            PsiElement(identifier)('Foo')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ScNewTemplateDefinition: <anonymous>
          PsiElement(new)('new')
          PsiWhiteSpace(' ')
          ExtendsBlock
            TemplateParents
              ConstructorInvocation
                SimpleType: Foo
                  CodeReferenceElement: Foo
                    PsiElement(identifier)('Foo')
      PsiWhiteSpace('\n    ')
      MethodCall
        ReferenceExpression: when((x: Foo) => "").expects
          MethodCall
            ReferenceExpression: when
              PsiElement(identifier)('when')
            ArgumentList
              PsiElement(()('(')
              FunctionExpression
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: x
                      AnnotationsList
                        <empty list>
                      PsiElement(identifier)('x')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Foo
                          CodeReferenceElement: Foo
                            PsiElement(identifier)('Foo')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('""')
              PsiElement())(')')
          PsiElement(.)('.')
          PsiElement(identifier)('expects')
        ArgumentList
          PsiElement(()('(')
          ReferenceExpression: f
            PsiElement(identifier)('f')
          PsiElement())(')')
