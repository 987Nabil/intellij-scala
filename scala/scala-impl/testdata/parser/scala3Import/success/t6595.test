//> using options -Xfatal-warnings -deprecation -feature

import scala.annotation.switch

class Foo extends AnyRef {
// TODO NEEDS MANUAL CHANGE (early initializers)
// BEGIN copied early initializers
final val b0 = 5
// END copied early initializers

  final val b1 = 10

  // Using the @switch annotation as a means of testing that the
  // type inferred for b0 is Int(5) and not Int. Only in the former
  // case can a switch be generated.
  def f(p: Int) = (p: @switch) match {
    case `b0` => 1
    case `b1` => 2
    case 15   => 3
    case 20   => 4
    case _    => 5
  }
}
-----
ScalaFile
  PsiElement(SCALA_DIRECTIVE)
    ScDirectiveToken(tDIRECTIVE_PREFIX)('//>')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_COMMAND)('using')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_KEY)('options')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-Xfatal-warnings')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-deprecation')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-feature')
  PsiWhiteSpace('\n\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.annotation.switch
        CodeReferenceElement: scala.annotation
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('annotation')
        PsiElement(.)('.')
        PsiElement(identifier)('switch')
  PsiWhiteSpace('\n\n')
  ScClass: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: AnyRef
            CodeReferenceElement: AnyRef
              PsiElement(identifier)('AnyRef')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n')
        ScPatternDefinition: b0
          PsiComment(comment)('// TODO NEEDS MANUAL CHANGE (early initializers)')
          PsiWhiteSpace('\n')
          PsiComment(comment)('// BEGIN copied early initializers')
          PsiWhiteSpace('\n')
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: b0
              PsiElement(identifier)('b0')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('5')
        PsiWhiteSpace('\n')
        PsiComment(comment)('// END copied early initializers')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: b1
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: b1
              PsiElement(identifier)('b1')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('10')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: f
          PsiComment(comment)('// Using the @switch annotation as a means of testing that the')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// type inferred for b0 is Int(5) and not Int. Only in the former')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// case can a switch be generated.')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: p
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('p')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ExpressionInParenthesis
              PsiElement(()('(')
              TypedExpression
                ReferenceExpression: p
                  PsiElement(identifier)('p')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                AnnotationsList
                  Annotation
                    PsiElement(@)('@')
                    AnnotationExpression
                      ConstructorInvocation
                        SimpleType: switch
                          CodeReferenceElement: switch
                            PsiElement(identifier)('switch')
              PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                StableElementPattern
                  ReferenceExpression: `b0`
                    PsiElement(identifier)('`b0`')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  IntegerLiteral
                    PsiElement(integer)('1')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                StableElementPattern
                  ReferenceExpression: `b1`
                    PsiElement(identifier)('`b1`')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  IntegerLiteral
                    PsiElement(integer)('2')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                LiteralPattern
                  IntegerLiteral
                    PsiElement(integer)('15')
                PsiWhiteSpace('   ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  IntegerLiteral
                    PsiElement(integer)('3')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                LiteralPattern
                  IntegerLiteral
                    PsiElement(integer)('20')
                PsiWhiteSpace('   ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  IntegerLiteral
                    PsiElement(integer)('4')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                WildcardPattern
                  PsiElement(_)('_')
                PsiWhiteSpace('    ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  IntegerLiteral
                    PsiElement(integer)('5')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
