//> using options -Xfatal-warnings -deprecation -feature

import scala.language.`future-migration`
import scala.reflect.TypeTest

trait Foo:
  type X
  type Y <: X
  def x: X
  given TypeTest[X, Y] = ???

object Test:
  def test(foo: Foo): Unit =
    foo.x match
      case x: foo.Y =>
      case x: foo.X =>
-----
ScalaFile
  PsiElement(SCALA_DIRECTIVE)
    ScDirectiveToken(tDIRECTIVE_PREFIX)('//>')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_COMMAND)('using')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_KEY)('options')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-Xfatal-warnings')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-deprecation')
    PsiWhiteSpace(' ')
    ScDirectiveToken(tDIRECTIVE_VALUE)('-feature')
  PsiWhiteSpace('\n\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.language.`future-migration`
        CodeReferenceElement: scala.language
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('language')
        PsiElement(.)('.')
        PsiElement(identifier)('`future-migration`')
  PsiWhiteSpace('\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.reflect.TypeTest
        CodeReferenceElement: scala.reflect
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('reflect')
        PsiElement(.)('.')
        PsiElement(identifier)('TypeTest')
  PsiWhiteSpace('\n\n')
  ScTrait: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: X
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('X')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: Y
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Y')
          PsiWhiteSpace(' ')
          PsiElement(<:)('<:')
          PsiWhiteSpace(' ')
          SimpleType: X
            CodeReferenceElement: X
              PsiElement(identifier)('X')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('x')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: X
            CodeReferenceElement: X
              PsiElement(identifier)('X')
        PsiWhiteSpace('\n  ')
        ScGivenAliasDefinition: given_TypeTest_X_Y
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(given)('given')
          PsiWhiteSpace(' ')
          ParametrizedType: TypeTest[X, Y]
            SimpleType: TypeTest
              CodeReferenceElement: TypeTest
                PsiElement(identifier)('TypeTest')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: X
                CodeReferenceElement: X
                  PsiElement(identifier)('X')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: Y
                CodeReferenceElement: Y
                  PsiElement(identifier)('Y')
              PsiElement(])(']')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: test
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: foo
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('foo')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Foo
                    CodeReferenceElement: Foo
                      PsiElement(identifier)('Foo')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          MatchStatement
            ReferenceExpression: foo.x
              ReferenceExpression: foo
                PsiElement(identifier)('foo')
              PsiElement(.)('.')
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace('\n      ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: x
                    PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    SimpleType: foo.Y
                      CodeReferenceElement: foo.Y
                        CodeReferenceElement: foo
                          PsiElement(identifier)('foo')
                        PsiElement(.)('.')
                        PsiElement(identifier)('Y')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                BlockOfExpressions
                  <empty list>
              PsiWhiteSpace('\n      ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: x
                    PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    SimpleType: foo.X
                      CodeReferenceElement: foo.X
                        CodeReferenceElement: foo
                          PsiElement(identifier)('foo')
                        PsiElement(.)('.')
                        PsiElement(identifier)('X')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                BlockOfExpressions
                  <empty list>
